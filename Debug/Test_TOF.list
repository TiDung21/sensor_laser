
Test_TOF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015aac  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ebfc  0801ebfc  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  0801ebfc  0801ebfc  0002ebfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ec04  0801ec04  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ec04  0801ec04  0002ec04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ec08  0801ec08  0002ec08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0801ec0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d6c  200000b0  0801ecbc  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e1c  0801ecbc  00030e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011192  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c4d  00000000  00000000  00041272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00043ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d20  00000000  00000000  00044d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184ef  00000000  00000000  00045a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141a8  00000000  00000000  0005df0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d979  00000000  00000000  000720b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ffa30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041f0  00000000  00000000  000ffa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009138 	.word	0x08009138

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08009138 	.word	0x08009138

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800058e:	4b13      	ldr	r3, [pc, #76]	; (80005dc <BSP_I2C1_Init+0x58>)
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <BSP_I2C1_Init+0x5c>)
 8000592:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <BSP_I2C1_Init+0x60>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	4912      	ldr	r1, [pc, #72]	; (80005e4 <BSP_I2C1_Init+0x60>)
 800059c:	600a      	str	r2, [r1, #0]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d117      	bne.n	80005d2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80005a2:	480e      	ldr	r0, [pc, #56]	; (80005dc <BSP_I2C1_Init+0x58>)
 80005a4:	f004 fe64 	bl	8005270 <HAL_I2C_GetState>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d111      	bne.n	80005d2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80005ae:	480b      	ldr	r0, [pc, #44]	; (80005dc <BSP_I2C1_Init+0x58>)
 80005b0:	f000 f8e2 	bl	8000778 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d10b      	bne.n	80005d2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <BSP_I2C1_Init+0x58>)
 80005bc:	f000 f8a8 	bl	8000710 <MX_I2C1_Init>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80005c6:	f06f 0307 	mvn.w	r3, #7
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	e001      	b.n	80005d2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80005d2:	687b      	ldr	r3, [r7, #4]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000cc 	.word	0x200000cc
 80005e0:	40005400 	.word	0x40005400
 80005e4:	20000120 	.word	0x20000120

080005e8 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80005f2:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <BSP_I2C1_DeInit+0x48>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d014      	beq.n	8000624 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <BSP_I2C1_DeInit+0x48>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	3b01      	subs	r3, #1
 8000600:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <BSP_I2C1_DeInit+0x48>)
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <BSP_I2C1_DeInit+0x48>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10b      	bne.n	8000624 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <BSP_I2C1_DeInit+0x4c>)
 800060e:	f000 f8fb 	bl	8000808 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8000612:	4808      	ldr	r0, [pc, #32]	; (8000634 <BSP_I2C1_DeInit+0x4c>)
 8000614:	f004 fac8 	bl	8004ba8 <HAL_I2C_DeInit>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d002      	beq.n	8000624 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800061e:	f06f 0307 	mvn.w	r3, #7
 8000622:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000624:	687b      	ldr	r3, [r7, #4]
}
 8000626:	4618      	mov	r0, r3
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000120 	.word	0x20000120
 8000634:	200000cc 	.word	0x200000cc

08000638 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	; 0x28
 800063c:	af04      	add	r7, sp, #16
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	461a      	mov	r2, r3
 8000642:	4603      	mov	r3, r0
 8000644:	81fb      	strh	r3, [r7, #14]
 8000646:	460b      	mov	r3, r1
 8000648:	81bb      	strh	r3, [r7, #12]
 800064a:	4613      	mov	r3, r2
 800064c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8000652:	89ba      	ldrh	r2, [r7, #12]
 8000654:	89f9      	ldrh	r1, [r7, #14]
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2310      	movs	r3, #16
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <BSP_I2C1_WriteReg16+0x60>)
 8000668:	f004 fae2 	bl	8004c30 <HAL_I2C_Mem_Write>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00c      	beq.n	800068c <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <BSP_I2C1_WriteReg16+0x60>)
 8000674:	f004 fe0a 	bl	800528c <HAL_I2C_GetError>
 8000678:	4603      	mov	r3, r0
 800067a:	2b04      	cmp	r3, #4
 800067c:	d103      	bne.n	8000686 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800067e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e002      	b.n	800068c <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8000686:	f06f 0303 	mvn.w	r3, #3
 800068a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800068c:	697b      	ldr	r3, [r7, #20]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	200000cc 	.word	0x200000cc

0800069c <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	60ba      	str	r2, [r7, #8]
 80006a4:	461a      	mov	r2, r3
 80006a6:	4603      	mov	r3, r0
 80006a8:	81fb      	strh	r3, [r7, #14]
 80006aa:	460b      	mov	r3, r1
 80006ac:	81bb      	strh	r3, [r7, #12]
 80006ae:	4613      	mov	r3, r2
 80006b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80006b6:	89ba      	ldrh	r2, [r7, #12]
 80006b8:	89f9      	ldrh	r1, [r7, #14]
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	88fb      	ldrh	r3, [r7, #6]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2310      	movs	r3, #16
 80006ca:	480c      	ldr	r0, [pc, #48]	; (80006fc <BSP_I2C1_ReadReg16+0x60>)
 80006cc:	f004 fbaa 	bl	8004e24 <HAL_I2C_Mem_Read>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00c      	beq.n	80006f0 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80006d6:	4809      	ldr	r0, [pc, #36]	; (80006fc <BSP_I2C1_ReadReg16+0x60>)
 80006d8:	f004 fdd8 	bl	800528c <HAL_I2C_GetError>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d003      	beq.n	80006ea <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80006e2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	e002      	b.n	80006f0 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80006ea:	f06f 0303 	mvn.w	r3, #3
 80006ee:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80006f0:	697b      	ldr	r3, [r7, #20]
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3718      	adds	r7, #24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000cc 	.word	0x200000cc

08000700 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000704:	f003 fc9e 	bl	8004044 <HAL_GetTick>
 8000708:	4603      	mov	r3, r0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
	...

08000710 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000718:	2300      	movs	r3, #0
 800071a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a14      	ldr	r2, [pc, #80]	; (8000770 <MX_I2C1_Init+0x60>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a13      	ldr	r2, [pc, #76]	; (8000774 <MX_I2C1_Init+0x64>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2200      	movs	r2, #0
 8000732:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f004 f8e3 	bl	8004920 <HAL_I2C_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8000760:	2301      	movs	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000764:	7bfb      	ldrb	r3, [r7, #15]
}
 8000766:	4618      	mov	r0, r3
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40005400 	.word	0x40005400
 8000774:	00061a80 	.word	0x00061a80

08000778 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	2300      	movs	r3, #0
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <I2C1_MspInit+0x88>)
 8000786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000788:	4a1d      	ldr	r2, [pc, #116]	; (8000800 <I2C1_MspInit+0x88>)
 800078a:	f043 0302 	orr.w	r3, r3, #2
 800078e:	6313      	str	r3, [r2, #48]	; 0x30
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <I2C1_MspInit+0x88>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800079c:	2340      	movs	r3, #64	; 0x40
 800079e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a0:	2312      	movs	r3, #18
 80007a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80007ac:	2304      	movs	r3, #4
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4619      	mov	r1, r3
 80007b6:	4813      	ldr	r0, [pc, #76]	; (8000804 <I2C1_MspInit+0x8c>)
 80007b8:	f003 fe18 	bl	80043ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c0:	2312      	movs	r3, #18
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80007cc:	2304      	movs	r3, #4
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <I2C1_MspInit+0x8c>)
 80007d8:	f003 fe08 	bl	80043ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <I2C1_MspInit+0x88>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <I2C1_MspInit+0x88>)
 80007e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <I2C1_MspInit+0x88>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400

08000808 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <I2C1_MspDeInit+0x2c>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000814:	4a07      	ldr	r2, [pc, #28]	; (8000834 <I2C1_MspDeInit+0x2c>)
 8000816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800081a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800081c:	2140      	movs	r1, #64	; 0x40
 800081e:	4806      	ldr	r0, [pc, #24]	; (8000838 <I2C1_MspDeInit+0x30>)
 8000820:	f003 ff68 	bl	80046f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <I2C1_MspDeInit+0x30>)
 8000828:	f003 ff64 	bl	80046f4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f003 fb9a 	bl	8003f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f810 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 f876 	bl	8000938 <MX_GPIO_Init>
  MX_TOF_Init();
 800084c:	f006 fd9e 	bl	800738c <MX_TOF_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <main+0x28>)
 8000858:	f004 f830 	bl	80048bc <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_TOF_Process();
 800085c:	f006 fd9c 	bl	8007398 <MX_TOF_Process>
 8000860:	e7fc      	b.n	800085c <main+0x20>
 8000862:	bf00      	nop
 8000864:	40020800 	.word	0x40020800

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	; 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	; 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f007 fbf4 	bl	8008064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <SystemClock_Config+0xc8>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000894:	4a26      	ldr	r2, [pc, #152]	; (8000930 <SystemClock_Config+0xc8>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	; 0x40
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <SystemClock_Config+0xc8>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SystemClock_Config+0xcc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a20      	ldr	r2, [pc, #128]	; (8000934 <SystemClock_Config+0xcc>)
 80008b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <SystemClock_Config+0xcc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008d8:	230f      	movs	r3, #15
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008dc:	2348      	movs	r3, #72	; 0x48
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f005 f835 	bl	800595c <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f8:	f000 f8d4 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2101      	movs	r1, #1
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fa97 	bl	8005e4c <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000924:	f000 f8be 	bl	8000aa4 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	; 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b49      	ldr	r3, [pc, #292]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a48      	ldr	r2, [pc, #288]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b46      	ldr	r3, [pc, #280]	; (8000a94 <MX_GPIO_Init+0x15c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <MX_GPIO_Init+0x15c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a41      	ldr	r2, [pc, #260]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <MX_GPIO_Init+0x15c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <MX_GPIO_Init+0x15c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a3a      	ldr	r2, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x15c>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <MX_GPIO_Init+0x15c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2120      	movs	r1, #32
 80009c2:	4835      	ldr	r0, [pc, #212]	; (8000a98 <MX_GPIO_Init+0x160>)
 80009c4:	f003 ff7a 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	21c0      	movs	r1, #192	; 0xc0
 80009cc:	4832      	ldr	r0, [pc, #200]	; (8000a98 <MX_GPIO_Init+0x160>)
 80009ce:	f003 ff75 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009d8:	4830      	ldr	r0, [pc, #192]	; (8000a9c <MX_GPIO_Init+0x164>)
 80009da:	f003 ff6f 	bl	80048bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009de:	2320      	movs	r3, #32
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4828      	ldr	r0, [pc, #160]	; (8000a98 <MX_GPIO_Init+0x160>)
 80009f6:	f003 fcf9 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009fa:	23c0      	movs	r3, #192	; 0xc0
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4821      	ldr	r0, [pc, #132]	; (8000a98 <MX_GPIO_Init+0x160>)
 8000a12:	f003 fceb 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0x168>)
 8000a2c:	f003 fcde 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4816      	ldr	r0, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0x168>)
 8000a48:	f003 fcd0 	bl	80043ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_GPIO_Init+0x164>)
 8000a66:	f003 fcc1 	bl	80043ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2006      	movs	r0, #6
 8000a70:	f003 fbf3 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a74:	2006      	movs	r0, #6
 8000a76:	f003 fc0c 	bl	8004292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2028      	movs	r0, #40	; 0x28
 8000a80:	f003 fbeb 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a84:	2028      	movs	r0, #40	; 0x28
 8000a86:	f003 fc04 	bl	8004292 <HAL_NVIC_EnableIRQ>

}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	; 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020800 	.word	0x40020800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f003 fa66 	bl	800401c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f003 fec9 	bl	80048f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f005 fcdb 	bl	8006524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000428 	.word	0x20000428

08000b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <EXTI15_10_IRQHandler+0x24>)
 8000b84:	f003 fe9a 	bl	80048bc <HAL_GPIO_WritePin>
	printf("%c[2J", 27);
 8000b88:	211b      	movs	r1, #27
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <EXTI15_10_IRQHandler+0x28>)
 8000b8c:	f007 fa72 	bl	8008074 <iprintf>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000b90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000b94:	f003 feac 	bl	80048f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40020800 	.word	0x40020800
 8000ba0:	08009150 	.word	0x08009150

08000ba4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e00a      	b.n	8000bcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb6:	f3af 8000 	nop.w
 8000bba:	4601      	mov	r1, r0
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	b2ca      	uxtb	r2, r1
 8000bc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf0      	blt.n	8000bb6 <_read+0x12>
  }

  return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b086      	sub	sp, #24
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	60f8      	str	r0, [r7, #12]
 8000be6:	60b9      	str	r1, [r7, #8]
 8000be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	e009      	b.n	8000c04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	60ba      	str	r2, [r7, #8]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f003 f94f 	bl	8003e9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3301      	adds	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	dbf1      	blt.n	8000bf0 <_write+0x12>
  }
  return len;
 8000c0c:	687b      	ldr	r3, [r7, #4]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <_close>:

int _close(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c3e:	605a      	str	r2, [r3, #4]
  return 0;
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <_isatty>:

int _isatty(int file)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f007 f9a0 	bl	8007ff4 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20020000 	.word	0x20020000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	20000124 	.word	0x20000124
 8000ce8:	20000e20 	.word	0x20000e20

08000cec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <SystemInit+0x20>)
 8000cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <SystemInit+0x20>)
 8000cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d16:	490e      	ldr	r1, [pc, #56]	; (8000d50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d18:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d2c:	4c0b      	ldr	r4, [pc, #44]	; (8000d5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ffd7 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f007 f95f 	bl	8008000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fd7b 	bl	800083c <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000d54:	0801ec0c 	.word	0x0801ec0c
  ldr r2, =_sbss
 8000d58:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000d5c:	20000e1c 	.word	0x20000e1c

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>

08000d62 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b084      	sub	sp, #16
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	4611      	mov	r1, r2
 8000d6e:	461a      	mov	r2, r3
 8000d70:	4603      	mov	r3, r0
 8000d72:	70fb      	strb	r3, [r7, #3]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70bb      	strb	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8000d84:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8000d8c:	78fb      	ldrb	r3, [r7, #3]
 8000d8e:	8839      	ldrh	r1, [r7, #0]
 8000d90:	f002 fa0a 	bl	80031a8 <RdMulti>
 8000d94:	4603      	mov	r3, r0
 8000d96:	461a      	mov	r2, r3
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	210a      	movs	r1, #10
 8000da2:	4618      	mov	r0, r3
 8000da4:	f002 fa4d 	bl	8003242 <WaitMs>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8000db2:	7bbb      	ldrb	r3, [r7, #14]
 8000db4:	2bc7      	cmp	r3, #199	; 0xc7
 8000db6:	d904      	bls.n	8000dc2 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
			break;
 8000dc0:	e01a      	b.n	8000df8 <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d909      	bls.n	8000ddc <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8000dce:	2b7e      	cmp	r3, #126	; 0x7e
 8000dd0:	d904      	bls.n	8000ddc <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8000dd8:	73fb      	strb	r3, [r7, #15]
			break;
 8000dda:	e00d      	b.n	8000df8 <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 8000ddc:	7bbb      	ldrb	r3, [r7, #14]
 8000dde:	3301      	adds	r3, #1
 8000de0:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8000de2:	78bb      	ldrb	r3, [r7, #2]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4413      	add	r3, r2
 8000de8:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8000dec:	7e3b      	ldrb	r3, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	7f3a      	ldrb	r2, [r7, #28]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d1c5      	bne.n	8000d84 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f107 020b 	add.w	r2, r7, #11
 8000e18:	2106      	movs	r1, #6
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 f982 	bl	8003124 <RdByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 8000e2a:	7afb      	ldrb	r3, [r7, #11]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	da10      	bge.n	8000e54 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f107 020a 	add.w	r2, r7, #10
 8000e38:	2107      	movs	r1, #7
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f002 f972 	bl	8003124 <RdByte>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 8000e4a:	7aba      	ldrb	r2, [r7, #10]
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]
			break;
 8000e52:	e012      	b.n	8000e7a <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2101      	movs	r1, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f002 f9f2 	bl	8003242 <WaitMs>
		timeout++;
 8000e5e:	89bb      	ldrh	r3, [r7, #12]
 8000e60:	3301      	adds	r3, #1
 8000e62:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d104      	bne.n	8000e78 <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8000e6e:	89bb      	ldrh	r3, [r7, #12]
 8000e70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e74:	d3cd      	bcc.n	8000e12 <_vl53l5cx_poll_for_mcu_boot+0x10>
 8000e76:	e000      	b.n	8000e7a <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 8000e78:	bf00      	nop

   return status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0ea      	sub	sp, #424	; 0x1a8
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e8e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000e92:	6018      	str	r0, [r3, #0]
 8000e94:	460a      	mov	r2, r1
 8000e96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000e9a:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8000e9e:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8000ea6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000eaa:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000eae:	4ad9      	ldr	r2, [pc, #868]	; (8001214 <_vl53l5cx_send_offset_data+0x390>)
 8000eb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8000eb8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ebc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8000ec0:	4ad5      	ldr	r2, [pc, #852]	; (8001218 <_vl53l5cx_send_offset_data+0x394>)
 8000ec2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec6:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 8000eca:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ece:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8000ed8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000edc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8000ee4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f007 f8ad 	bl	8008048 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8000eee:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000ef2:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b10      	cmp	r3, #16
 8000efa:	f040 8122 	bne.w	8001142 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8000efe:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f02:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8000f0c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8000f14:	cb03      	ldmia	r3!, {r0, r1}
 8000f16:	6010      	str	r0, [r2, #0]
 8000f18:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8000f1a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f1e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8000f28:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 f952 	bl	80031d6 <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8000f32:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f36:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8000f40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f007 f87d 	bl	8008048 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8000f4e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f52:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8000f5c:	f107 0318 	add.w	r3, r7, #24
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	4618      	mov	r0, r3
 8000f64:	f007 f870 	bl	8008048 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8000f6e:	e0ac      	b.n	80010ca <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8000f76:	e09c      	b.n	80010b2 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8000f78:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8000f7c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	005a      	lsls	r2, r3, #1
 8000f86:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000f8e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8000f92:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8000f96:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	1c59      	adds	r1, r3, #1
 8000fa2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000faa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fae:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8000fb0:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8000fb4:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	440b      	add	r3, r1
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	0059      	lsls	r1, r3, #1
 8000fc0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fcc:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8000fce:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8000fd2:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	440b      	add	r3, r1
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	f103 0109 	add.w	r1, r3, #9
 8000fe0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000fe8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000fec:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8000fee:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8000ff2:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8000ffa:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8000ffc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8001008:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800100c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	4413      	add	r3, r2
 8001014:	005a      	lsls	r2, r3, #1
 8001016:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800101a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800101e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001022:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8001024:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8001028:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	4413      	add	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001038:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800103c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001040:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8001042:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001046:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	440a      	add	r2, r1
 800104e:	3204      	adds	r2, #4
 8001050:	0051      	lsls	r1, r2, #1
 8001052:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001056:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800105a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800105e:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8001060:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8001064:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8001068:	00d2      	lsls	r2, r2, #3
 800106a:	440a      	add	r2, r1
 800106c:	0052      	lsls	r2, r2, #1
 800106e:	f102 0109 	add.w	r1, r2, #9
 8001072:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8001076:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 800107a:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 800107e:	4413      	add	r3, r2
                                  /(int16_t)4;
 8001080:	2b00      	cmp	r3, #0
 8001082:	da00      	bge.n	8001086 <_vl53l5cx_send_offset_data+0x202>
 8001084:	3303      	adds	r3, #3
 8001086:	109b      	asrs	r3, r3, #2
 8001088:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 800108a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800108e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	441a      	add	r2, r3
 8001096:	b209      	sxth	r1, r1
 8001098:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800109c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80010a0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80010a4:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3301      	adds	r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80010b2:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	f77f af5e 	ble.w	8000f78 <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 80010bc:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3301      	adds	r3, #1
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 80010ca:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	f77f af4e 	ble.w	8000f70 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	3320      	adds	r3, #32
 80010da:	2260      	movs	r2, #96	; 0x60
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 ffc0 	bl	8008064 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 80010e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80010e8:	3340      	adds	r3, #64	; 0x40
 80010ea:	22c0      	movs	r2, #192	; 0xc0
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f006 ffb8 	bl	8008064 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 80010f4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80010f8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8001102:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8001106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110a:	4618      	mov	r0, r3
 800110c:	f006 ff9c 	bl	8008048 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8001110:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001114:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 800111e:	f107 0118 	add.w	r1, r7, #24
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	4618      	mov	r0, r3
 8001126:	f006 ff8f 	bl	8008048 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 800112a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800112e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001138:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 800113c:	4618      	mov	r0, r3
 800113e:	f002 f84a 	bl	80031d6 <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001142:	2300      	movs	r3, #0
 8001144:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001148:	e01b      	b.n	8001182 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 800114a:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800114e:	f103 0208 	add.w	r2, r3, #8
 8001152:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001156:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800115a:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 800115e:	6809      	ldr	r1, [r1, #0]
 8001160:	440a      	add	r2, r1
 8001162:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8001166:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800116a:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	4413      	add	r3, r2
 8001172:	460a      	mov	r2, r1
 8001174:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8001178:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 800117c:	3301      	adds	r3, #1
 800117e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8001182:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8001186:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 800118a:	d3de      	bcc.n	800114a <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 800118c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001190:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 800119a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800119e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80011a2:	cb03      	ldmia	r3!, {r0, r1}
 80011a4:	6010      	str	r0, [r2, #0]
 80011a6:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80011a8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011ac:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80011c0:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80011c4:	f642 6118 	movw	r1, #11800	; 0x2e18
 80011c8:	f001 ffd7 	bl	800317a <WrMulti>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 80011d4:	4313      	orrs	r3, r2
 80011d6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80011da:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80011de:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 80011e2:	2303      	movs	r3, #3
 80011e4:	9301      	str	r3, [sp, #4]
 80011e6:	23ff      	movs	r3, #255	; 0xff
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80011ee:	2201      	movs	r2, #1
 80011f0:	2104      	movs	r1, #4
 80011f2:	6800      	ldr	r0, [r0, #0]
 80011f4:	f7ff fdb5 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8001200:	4313      	orrs	r3, r2
 8001202:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001206:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 800120a:	4618      	mov	r0, r3
 800120c:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	08009158 	.word	0x08009158
 8001218:	08009160 	.word	0x08009160

0800121c <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0ca      	sub	sp, #296	; 0x128
 8001220:	af02      	add	r7, sp, #8
 8001222:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001226:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800122a:	6018      	str	r0, [r3, #0]
 800122c:	460a      	mov	r2, r1
 800122e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001232:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8001236:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800123e:	4a9a      	ldr	r2, [pc, #616]	; (80014a8 <_vl53l5cx_send_xtalk_data+0x28c>)
 8001240:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001248:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 800124c:	4a97      	ldr	r2, [pc, #604]	; (80014ac <_vl53l5cx_send_xtalk_data+0x290>)
 800124e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001256:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 800125a:	4b95      	ldr	r3, [pc, #596]	; (80014b0 <_vl53l5cx_send_xtalk_data+0x294>)
 800125c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8001260:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001264:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 800126e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001272:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800127c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8001280:	4619      	mov	r1, r3
 8001282:	f006 fee1 	bl	8008048 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8001286:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800128a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b10      	cmp	r3, #16
 8001292:	f040 80d2 	bne.w	800143a <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8001296:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800129a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80012a4:	461a      	mov	r2, r3
 80012a6:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80012aa:	cb03      	ldmia	r3!, {r0, r1}
 80012ac:	6010      	str	r0, [r2, #0]
 80012ae:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 80012b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 80012be:	461a      	mov	r2, r3
 80012c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80012c4:	cb03      	ldmia	r3!, {r0, r1}
 80012c6:	6010      	str	r0, [r2, #0]
 80012c8:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80012ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80012d8:	f44f 7142 	mov.w	r1, #776	; 0x308
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 ff7a 	bl	80031d6 <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 80012e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f203 5144 	addw	r1, r3, #1348	; 0x544
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fea5 	bl	8008048 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8001304:	e05d      	b.n	80013c2 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800130c:	e04e      	b.n	80013ac <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 800130e:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8001312:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4413      	add	r3, r2
 800131a:	005a      	lsls	r2, r3, #1
 800131c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001320:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001324:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8001328:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800132c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	440b      	add	r3, r1
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	1c59      	adds	r1, r3, #1
 8001338:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800133c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001340:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001344:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8001346:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800134a:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	3304      	adds	r3, #4
 8001354:	0059      	lsls	r1, r3, #1
 8001356:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800135a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800135e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001362:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001364:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001368:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	440b      	add	r3, r1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	f103 0109 	add.w	r1, r3, #9
 8001376:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800137a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800137e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001382:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8001384:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8001388:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 800138c:	0092      	lsls	r2, r2, #2
 800138e:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8001390:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8001392:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001396:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800139a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800139e:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	3301      	adds	r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80013ac:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	ddac      	ble.n	800130e <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 80013b4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	3301      	adds	r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80013c2:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	dd9d      	ble.n	8001306 <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	3340      	adds	r3, #64	; 0x40
 80013d0:	22c0      	movs	r2, #192	; 0xc0
 80013d2:	2100      	movs	r1, #0
 80013d4:	4618      	mov	r0, r3
 80013d6:	f006 fe45 	bl	8008064 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 80013da:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f203 5344 	addw	r3, r3, #1348	; 0x544
 80013e8:	f107 0108 	add.w	r1, r7, #8
 80013ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f0:	4618      	mov	r0, r3
 80013f2:	f006 fe29 	bl	8008048 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80013f6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80013fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001404:	f44f 7142 	mov.w	r1, #776	; 0x308
 8001408:	4618      	mov	r0, r3
 800140a:	f001 fee4 	bl	80031d6 <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 800140e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001412:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f203 6344 	addw	r3, r3, #1604	; 0x644
 800141c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001420:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8001422:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8001430:	2204      	movs	r2, #4
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f006 fe15 	bl	8008064 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 800143a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800143e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001442:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8001444:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001448:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8001452:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001456:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 800145a:	f001 fe8e 	bl	800317a <WrMulti>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001466:	4313      	orrs	r3, r2
 8001468:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 800146c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001470:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8001474:	2303      	movs	r3, #3
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	23ff      	movs	r3, #255	; 0xff
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001480:	2201      	movs	r2, #1
 8001482:	2104      	movs	r1, #4
 8001484:	6800      	ldr	r0, [r0, #0]
 8001486:	f7ff fc6c 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8001492:	4313      	orrs	r3, r2
 8001494:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8001498:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 800149c:	4618      	mov	r0, r3
 800149e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	08009168 	.word	0x08009168
 80014ac:	08009170 	.word	0x08009170
 80014b0:	0001fca0 	.word	0x0001fca0

080014b4 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 80014c0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80014c4:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 80014c6:	2301      	movs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a7e      	ldr	r2, [pc, #504]	; (80016c8 <vl53l5cx_init+0x214>)
 80014ce:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a7e      	ldr	r2, [pc, #504]	; (80016cc <vl53l5cx_init+0x218>)
 80014d4:	619a      	str	r2, [r3, #24]

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 fe35 	bl	800314e <WrByte>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	7dfb      	ldrb	r3, [r7, #23]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2204      	movs	r2, #4
 80014f2:	2109      	movs	r1, #9
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fe2a 	bl	800314e <WrByte>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	4313      	orrs	r3, r2
 8001502:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2240      	movs	r2, #64	; 0x40
 8001508:	210f      	movs	r1, #15
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fe1f 	bl	800314e <WrByte>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	7dfb      	ldrb	r3, [r7, #23]
 8001516:	4313      	orrs	r3, r2
 8001518:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2203      	movs	r2, #3
 800151e:	210a      	movs	r1, #10
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fe14 	bl	800314e <WrByte>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	4313      	orrs	r3, r2
 800152e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f107 0216 	add.w	r2, r7, #22
 8001536:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800153a:	4618      	mov	r0, r3
 800153c:	f001 fdf2 	bl	8003124 <RdByte>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	4313      	orrs	r3, r2
 8001548:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2201      	movs	r2, #1
 800154e:	210c      	movs	r1, #12
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fdfc 	bl	800314e <WrByte>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	4313      	orrs	r3, r2
 800155e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f240 1101 	movw	r1, #257	; 0x101
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fdf0 	bl	800314e <WrByte>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	4313      	orrs	r3, r2
 8001576:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8001580:	4618      	mov	r0, r3
 8001582:	f001 fde4 	bl	800314e <WrByte>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	4313      	orrs	r3, r2
 800158e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8001598:	4618      	mov	r0, r3
 800159a:	f001 fdd8 	bl	800314e <WrByte>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f244 0102 	movw	r1, #16386	; 0x4002
 80015b0:	4618      	mov	r0, r3
 80015b2:	f001 fdcc 	bl	800314e <WrByte>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	4313      	orrs	r3, r2
 80015be:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f244 0102 	movw	r1, #16386	; 0x4002
 80015c8:	4618      	mov	r0, r3
 80015ca:	f001 fdc0 	bl	800314e <WrByte>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2203      	movs	r2, #3
 80015dc:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fdb4 	bl	800314e <WrByte>
 80015e6:	4603      	mov	r3, r0
 80015e8:	461a      	mov	r2, r3
 80015ea:	7dfb      	ldrb	r3, [r7, #23]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f240 1103 	movw	r1, #259	; 0x103
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fda8 	bl	800314e <WrByte>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	4313      	orrs	r3, r2
 8001606:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	210c      	movs	r1, #12
 800160e:	4618      	mov	r0, r3
 8001610:	f001 fd9d 	bl	800314e <WrByte>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	7dfb      	ldrb	r3, [r7, #23]
 800161a:	4313      	orrs	r3, r2
 800161c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2243      	movs	r2, #67	; 0x43
 8001622:	210f      	movs	r1, #15
 8001624:	4618      	mov	r0, r3
 8001626:	f001 fd92 	bl	800314e <WrByte>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	4313      	orrs	r3, r2
 8001632:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2101      	movs	r1, #1
 8001638:	4618      	mov	r0, r3
 800163a:	f001 fe02 	bl	8003242 <WaitMs>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	4313      	orrs	r3, r2
 8001646:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2240      	movs	r2, #64	; 0x40
 800164c:	210f      	movs	r1, #15
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fd7d 	bl	800314e <WrByte>
 8001654:	4603      	mov	r3, r0
 8001656:	461a      	mov	r2, r3
 8001658:	7dfb      	ldrb	r3, [r7, #23]
 800165a:	4313      	orrs	r3, r2
 800165c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	210a      	movs	r1, #10
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fd72 	bl	800314e <WrByte>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	4313      	orrs	r3, r2
 8001672:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2164      	movs	r1, #100	; 0x64
 8001678:	4618      	mov	r0, r3
 800167a:	f001 fde2 	bl	8003242 <WaitMs>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	4313      	orrs	r3, r2
 8001686:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001690:	4618      	mov	r0, r3
 8001692:	f001 fd5c 	bl	800314e <WrByte>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	4313      	orrs	r3, r2
 800169e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 80016a0:	2301      	movs	r3, #1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	23ff      	movs	r3, #255	; 0xff
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2306      	movs	r3, #6
 80016aa:	2200      	movs	r2, #0
 80016ac:	2101      	movs	r1, #1
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fb57 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f040 831c 	bne.w	8001cfe <vl53l5cx_init+0x84a>
 80016c6:	e003      	b.n	80016d0 <vl53l5cx_init+0x21c>
 80016c8:	0801e834 	.word	0x0801e834
 80016cc:	0801e468 	.word	0x0801e468
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	210e      	movs	r1, #14
 80016d6:	4618      	mov	r0, r3
 80016d8:	f001 fd39 	bl	800314e <WrByte>
 80016dc:	4603      	mov	r3, r0
 80016de:	461a      	mov	r2, r3
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80016ee:	4618      	mov	r0, r3
 80016f0:	f001 fd2d 	bl	800314e <WrByte>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	220d      	movs	r2, #13
 8001702:	2103      	movs	r1, #3
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fd22 	bl	800314e <WrByte>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	7dfb      	ldrb	r3, [r7, #23]
 8001710:	4313      	orrs	r3, r2
 8001712:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2201      	movs	r2, #1
 8001718:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800171c:	4618      	mov	r0, r3
 800171e:	f001 fd16 	bl	800314e <WrByte>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	7dfb      	ldrb	r3, [r7, #23]
 8001728:	4313      	orrs	r3, r2
 800172a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800172c:	2310      	movs	r3, #16
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	2310      	movs	r3, #16
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2321      	movs	r3, #33	; 0x21
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f7ff fb11 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	7dfb      	ldrb	r3, [r7, #23]
 8001746:	4313      	orrs	r3, r2
 8001748:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fcfb 	bl	800314e <WrByte>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	4313      	orrs	r3, r2
 8001760:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f107 0216 	add.w	r2, r7, #22
 8001768:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fcd9 	bl	8003124 <RdByte>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	4313      	orrs	r3, r2
 800177a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	210c      	movs	r1, #12
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fce3 	bl	800314e <WrByte>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	4313      	orrs	r3, r2
 8001790:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fcd7 	bl	800314e <WrByte>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f240 1101 	movw	r1, #257	; 0x101
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 fccb 	bl	800314e <WrByte>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461a      	mov	r2, r3
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	4313      	orrs	r3, r2
 80017c0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fcbf 	bl	800314e <WrByte>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fcb3 	bl	800314e <WrByte>
 80017e8:	4603      	mov	r3, r0
 80017ea:	461a      	mov	r2, r3
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f244 0102 	movw	r1, #16386	; 0x4002
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fca7 	bl	800314e <WrByte>
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	7dfb      	ldrb	r3, [r7, #23]
 8001806:	4313      	orrs	r3, r2
 8001808:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f244 0102 	movw	r1, #16386	; 0x4002
 8001812:	4618      	mov	r0, r3
 8001814:	f001 fc9b 	bl	800314e <WrByte>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	4313      	orrs	r3, r2
 8001820:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fc8f 	bl	800314e <WrByte>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	7dfb      	ldrb	r3, [r7, #23]
 8001836:	4313      	orrs	r3, r2
 8001838:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f240 1103 	movw	r1, #259	; 0x103
 8001842:	4618      	mov	r0, r3
 8001844:	f001 fc83 	bl	800314e <WrByte>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	4313      	orrs	r3, r2
 8001850:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f244 010f 	movw	r1, #16399	; 0x400f
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fc77 	bl	800314e <WrByte>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	4313      	orrs	r3, r2
 8001868:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2243      	movs	r2, #67	; 0x43
 800186e:	f240 211a 	movw	r1, #538	; 0x21a
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fc6b 	bl	800314e <WrByte>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	4313      	orrs	r3, r2
 8001880:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2203      	movs	r2, #3
 8001886:	f240 211a 	movw	r1, #538	; 0x21a
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fc5f 	bl	800314e <WrByte>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	4313      	orrs	r3, r2
 8001898:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f240 211a 	movw	r1, #538	; 0x21a
 80018a2:	4618      	mov	r0, r3
 80018a4:	f001 fc53 	bl	800314e <WrByte>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f240 211a 	movw	r1, #538	; 0x21a
 80018ba:	4618      	mov	r0, r3
 80018bc:	f001 fc47 	bl	800314e <WrByte>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	7dfb      	ldrb	r3, [r7, #23]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f240 2119 	movw	r1, #537	; 0x219
 80018d2:	4618      	mov	r0, r3
 80018d4:	f001 fc3b 	bl	800314e <WrByte>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	4313      	orrs	r3, r2
 80018e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f240 211b 	movw	r1, #539	; 0x21b
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 fc2f 	bl	800314e <WrByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fc23 	bl	800314e <WrByte>
 8001908:	4603      	mov	r3, r0
 800190a:	461a      	mov	r2, r3
 800190c:	7dfb      	ldrb	r3, [r7, #23]
 800190e:	4313      	orrs	r3, r2
 8001910:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f107 0216 	add.w	r2, r7, #22
 8001918:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800191c:	4618      	mov	r0, r3
 800191e:	f001 fc01 	bl	8003124 <RdByte>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	7dfb      	ldrb	r3, [r7, #23]
 8001928:	4313      	orrs	r3, r2
 800192a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	210c      	movs	r1, #12
 8001932:	4618      	mov	r0, r3
 8001934:	f001 fc0b 	bl	800314e <WrByte>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	4313      	orrs	r3, r2
 8001940:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fbff 	bl	800314e <WrByte>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	4313      	orrs	r3, r2
 8001958:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2207      	movs	r2, #7
 800195e:	2120      	movs	r1, #32
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fbf4 	bl	800314e <WrByte>
 8001966:	4603      	mov	r3, r0
 8001968:	461a      	mov	r2, r3
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	4313      	orrs	r3, r2
 800196e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2206      	movs	r2, #6
 8001974:	2120      	movs	r1, #32
 8001976:	4618      	mov	r0, r3
 8001978:	f001 fbe9 	bl	800314e <WrByte>
 800197c:	4603      	mov	r3, r0
 800197e:	461a      	mov	r2, r3
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	4313      	orrs	r3, r2
 8001984:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2209      	movs	r2, #9
 800198a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800198e:	4618      	mov	r0, r3
 8001990:	f001 fbdd 	bl	800314e <WrByte>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	4313      	orrs	r3, r2
 800199c:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a4:	4adb      	ldr	r2, [pc, #876]	; (8001d14 <vl53l5cx_init+0x860>)
 80019a6:	2100      	movs	r1, #0
 80019a8:	f001 fbe7 	bl	800317a <WrMulti>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	220a      	movs	r2, #10
 80019ba:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019be:	4618      	mov	r0, r3
 80019c0:	f001 fbc5 	bl	800314e <WrByte>
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	7dfb      	ldrb	r3, [r7, #23]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d4:	4ad0      	ldr	r2, [pc, #832]	; (8001d18 <vl53l5cx_init+0x864>)
 80019d6:	2100      	movs	r1, #0
 80019d8:	f001 fbcf 	bl	800317a <WrMulti>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	220b      	movs	r2, #11
 80019ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fbad 	bl	800314e <WrByte>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a04:	4ac5      	ldr	r2, [pc, #788]	; (8001d1c <vl53l5cx_init+0x868>)
 8001a06:	2100      	movs	r1, #0
 8001a08:	f001 fbb7 	bl	800317a <WrMulti>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 fb95 	bl	800314e <WrByte>
 8001a24:	4603      	mov	r3, r0
 8001a26:	461a      	mov	r2, r3
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fb89 	bl	800314e <WrByte>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220d      	movs	r2, #13
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f001 fb7e 	bl	800314e <WrByte>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fb72 	bl	800314e <WrByte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8001a74:	2310      	movs	r3, #16
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	2310      	movs	r3, #16
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2321      	movs	r3, #33	; 0x21
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2101      	movs	r1, #1
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f7ff f96d 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 8134 	bne.w	8001d02 <vl53l5cx_init+0x84e>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f001 fb53 	bl	800314e <WrByte>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f107 0216 	add.w	r2, r7, #22
 8001ab8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 fb31 	bl	8003124 <RdByte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	7dfb      	ldrb	r3, [r7, #23]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	210c      	movs	r1, #12
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f001 fb3b 	bl	800314e <WrByte>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	7dfb      	ldrb	r3, [r7, #23]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001aea:	4618      	mov	r0, r3
 8001aec:	f001 fb2f 	bl	800314e <WrByte>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 fb23 	bl	800314e <WrByte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	7dfb      	ldrb	r3, [r7, #23]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f240 1115 	movw	r1, #277	; 0x115
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fb17 	bl	800314e <WrByte>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	7dfb      	ldrb	r3, [r7, #23]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2242      	movs	r2, #66	; 0x42
 8001b2e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8001b32:	4618      	mov	r0, r3
 8001b34:	f001 fb0b 	bl	800314e <WrByte>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f240 1117 	movw	r1, #279	; 0x117
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f001 faff 	bl	800314e <WrByte>
 8001b50:	4603      	mov	r3, r0
 8001b52:	461a      	mov	r2, r3
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	210b      	movs	r1, #11
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 faf4 	bl	800314e <WrByte>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f107 0216 	add.w	r2, r7, #22
 8001b76:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fad2 	bl	8003124 <RdByte>
 8001b80:	4603      	mov	r3, r0
 8001b82:	461a      	mov	r2, r3
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	210c      	movs	r1, #12
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fadc 	bl	800314e <WrByte>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	7dfb      	ldrb	r3, [r7, #23]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	210b      	movs	r1, #11
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f001 fad1 	bl	800314e <WrByte>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	7dfb      	ldrb	r3, [r7, #23]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff f923 	bl	8000e02 <_vl53l5cx_poll_for_mcu_boot>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f040 809c 	bne.w	8001d06 <vl53l5cx_init+0x852>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f001 fab9 	bl	800314e <WrByte>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	2328      	movs	r3, #40	; 0x28
 8001bea:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <vl53l5cx_init+0x86c>)
 8001bec:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8001bf0:	f001 fac3 	bl	800317a <WrMulti>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	7dfb      	ldrb	r3, [r7, #23]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8001bfe:	2302      	movs	r3, #2
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	23ff      	movs	r3, #255	; 0xff
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff f8a7 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8001c1e:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8001c26:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8001c2a:	f642 4104 	movw	r1, #11268	; 0x2c04
 8001c2e:	f001 fabb 	bl	80031a8 <RdMulti>
 8001c32:	4603      	mov	r3, r0
 8001c34:	461a      	mov	r2, r3
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f103 0020 	add.w	r0, r3, #32
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8001c48:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f006 f9fb 	bl	8008048 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8001c52:	2110      	movs	r1, #16
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff f915 	bl	8000e84 <_vl53l5cx_send_offset_data>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c6a:	4a2e      	ldr	r2, [pc, #184]	; (8001d24 <vl53l5cx_init+0x870>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4611      	mov	r1, r2
 8001c70:	f44f 7342 	mov.w	r3, #776	; 0x308
 8001c74:	461a      	mov	r2, r3
 8001c76:	f006 f9e7 	bl	8008048 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8001c7a:	2110      	movs	r1, #16
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff facd 	bl	800121c <_vl53l5cx_send_xtalk_data>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8001c96:	f642 4134 	movw	r1, #11316	; 0x2c34
 8001c9a:	f001 fa6e 	bl	800317a <WrMulti>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8001ca8:	2303      	movs	r3, #3
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	23ff      	movs	r3, #255	; 0xff
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2104      	movs	r1, #4
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff f852 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8001cc8:	f107 0110 	add.w	r1, r7, #16
 8001ccc:	2304      	movs	r3, #4
 8001cce:	f64c 7278 	movw	r2, #53112	; 0xcf78
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 ffb6 	bl	8002c44 <vl53l5cx_dci_write_data>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	461a      	mov	r2, r3
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8001ce2:	f107 010c 	add.w	r1, r7, #12
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 ffa9 	bl	8002c44 <vl53l5cx_dci_write_data>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	e004      	b.n	8001d08 <vl53l5cx_init+0x854>
		goto exit;
 8001cfe:	bf00      	nop
 8001d00:	e002      	b.n	8001d08 <vl53l5cx_init+0x854>
		goto exit;
 8001d02:	bf00      	nop
 8001d04:	e000      	b.n	8001d08 <vl53l5cx_init+0x854>
		goto exit;
 8001d06:	bf00      	nop
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));
exit:
	return status;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	08009468 	.word	0x08009468
 8001d18:	08011468 	.word	0x08011468
 8001d1c:	08019468 	.word	0x08019468
 8001d20:	0801eb3c 	.word	0x0801eb3c
 8001d24:	0801e834 	.word	0x0801e834

08001d28 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fa04 	bl	800314e <WrByte>
 8001d46:	4603      	mov	r3, r0
 8001d48:	461a      	mov	r2, r3
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	887b      	ldrh	r3, [r7, #2]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	f001 f9f6 	bl	800314e <WrByte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f001 f9e7 	bl	800314e <WrByte>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	73fb      	strb	r3, [r7, #15]

	return status;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <vl53l5cx_get_power_mode>:

uint8_t vl53l5cx_get_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001daa:	4618      	mov	r0, r3
 8001dac:	f001 f9cf 	bl	800314e <WrByte>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f107 020e 	add.w	r2, r7, #14
 8001dc0:	2109      	movs	r1, #9
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 f9ae 	bl	8003124 <RdByte>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461a      	mov	r2, r3
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d005      	beq.n	8001de4 <vl53l5cx_get_power_mode+0x50>
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d107      	bne.n	8001dec <vl53l5cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L5CX_POWER_MODE_WAKEUP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	701a      	strb	r2, [r3, #0]
			break;
 8001de2:	e009      	b.n	8001df8 <vl53l5cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L5CX_POWER_MODE_SLEEP;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]

			break;
 8001dea:	e005      	b.n	8001df8 <vl53l5cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
			status = VL53L5CX_STATUS_ERROR;
 8001df2:	23ff      	movs	r3, #255	; 0xff
 8001df4:	73fb      	strb	r3, [r7, #15]
			break;
 8001df6:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e00:	4618      	mov	r0, r3
 8001e02:	f001 f9a4 	bl	800314e <WrByte>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	73fb      	strb	r3, [r7, #15]

	return status;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <vl53l5cx_set_power_mode>:

uint8_t vl53l5cx_set_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af02      	add	r7, sp, #8
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L5CX_STATUS_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_get_power_mode(p_dev, &current_power_mode);
 8001e2a:	f107 030e 	add.w	r3, r7, #14
 8001e2e:	4619      	mov	r1, r3
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffaf 	bl	8001d94 <vl53l5cx_get_power_mode>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8001e40:	7bbb      	ldrb	r3, [r7, #14]
 8001e42:	78fa      	ldrb	r2, [r7, #3]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d061      	beq.n	8001f0c <vl53l5cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d028      	beq.n	8001ea0 <vl53l5cx_set_power_mode+0x86>
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d14d      	bne.n	8001eee <vl53l5cx_set_power_mode+0xd4>
	{
		case VL53L5CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 f977 	bl	800314e <WrByte>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	2109      	movs	r1, #9
 8001e70:	4618      	mov	r0, r3
 8001e72:	f001 f96c 	bl	800314e <WrByte>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8001e80:	2301      	movs	r3, #1
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2306      	movs	r3, #6
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7fe ff67 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8001e9e:	e029      	b.n	8001ef4 <vl53l5cx_set_power_mode+0xda>

		case VL53L5CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f001 f950 	bl	800314e <WrByte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	2109      	movs	r1, #9
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 f945 	bl	800314e <WrByte>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8001ece:	2300      	movs	r3, #0
 8001ed0:	9301      	str	r3, [sp, #4]
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	2306      	movs	r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2101      	movs	r1, #1
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7fe ff40 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8001eec:	e002      	b.n	8001ef4 <vl53l5cx_set_power_mode+0xda>

		default:
			status = VL53L5CX_STATUS_ERROR;
 8001eee:	23ff      	movs	r3, #255	; 0xff
 8001ef0:	73fb      	strb	r3, [r7, #15]
			break;
 8001ef2:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 f926 	bl	800314e <WrByte>
 8001f02:	4603      	mov	r3, r0
 8001f04:	461a      	mov	r2, r3
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <vl53l5cx_start_ranging>:

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8001f18:	b5b0      	push	{r4, r5, r7, lr}
 8001f1a:	b09c      	sub	sp, #112	; 0x70
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8001f26:	2300      	movs	r3, #0
 8001f28:	653b      	str	r3, [r7, #80]	; 0x50
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8001f2e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8001f34:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fc52 	bl	80027e4 <vl53l5cx_get_resolution>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	22ff      	movs	r2, #255	; 0xff
 8001f58:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8001f5a:	4ba7      	ldr	r3, [pc, #668]	; (80021f8 <vl53l5cx_start_ranging+0x2e0>)
 8001f5c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001f60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8001f66:	4ba5      	ldr	r3, [pc, #660]	; (80021fc <vl53l5cx_start_ranging+0x2e4>)
 8001f68:	f107 040c 	add.w	r4, r7, #12
 8001f6c:	461d      	mov	r5, r3
 8001f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8001f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f80:	3308      	adds	r3, #8
 8001f82:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8001f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f86:	3320      	adds	r3, #32
 8001f88:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8001f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8c:	3340      	adds	r3, #64	; 0x40
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8001f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001f96:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8001f98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f9a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8001fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8001fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001fb4:	e073      	b.n	800209e <vl53l5cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 8001fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	3368      	adds	r3, #104	; 0x68
 8001fbc:	443b      	add	r3, r7
 8001fbe:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d067      	beq.n	8002096 <vl53l5cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 8001fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc8:	095b      	lsrs	r3, r3, #5
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	3368      	adds	r3, #104	; 0x68
 8001fce:	443b      	add	r3, r7
 8001fd0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8001fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	fa22 f303 	lsr.w	r3, r2, r3
 8001fde:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d057      	beq.n	8002096 <vl53l5cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8001fe6:	f107 020c 	add.w	r2, r7, #12
 8001fea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8001ff2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d03a      	beq.n	8002076 <vl53l5cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8002000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b0c      	cmp	r3, #12
 800200c:	d833      	bhi.n	8002076 <vl53l5cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 800200e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002010:	885b      	ldrh	r3, [r3, #2]
 8002012:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8002016:	4293      	cmp	r3, r2
 8002018:	d910      	bls.n	800203c <vl53l5cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 800201a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	f645 028f 	movw	r2, #22671	; 0x588f
 8002022:	4293      	cmp	r3, r2
 8002024:	d80a      	bhi.n	800203c <vl53l5cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 8002026:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800202a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202e:	b299      	uxth	r1, r3
 8002030:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002032:	8813      	ldrh	r3, [r2, #0]
 8002034:	f361 130f 	bfi	r3, r1, #4, #12
 8002038:	8013      	strh	r3, [r2, #0]
 800203a:	e009      	b.n	8002050 <vl53l5cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 800203c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002044:	b299      	uxth	r1, r3
 8002046:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002048:	8813      	ldrh	r3, [r2, #0]
 800204a:	f361 130f 	bfi	r3, r1, #4, #12
 800204e:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	f3c2 0203 	ubfx	r2, r2, #0, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	4611      	mov	r1, r2
 8002060:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002062:	8812      	ldrh	r2, [r2, #0]
 8002064:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002068:	b292      	uxth	r2, r2
 800206a:	fb01 f202 	mul.w	r2, r1, r2
 800206e:	441a      	add	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	615a      	str	r2, [r3, #20]
 8002074:	e009      	b.n	800208a <vl53l5cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800207c:	8812      	ldrh	r2, [r2, #0]
 800207e:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8002082:	b292      	uxth	r2, r2
 8002084:	441a      	add	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	1d1a      	adds	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]
 8002094:	e000      	b.n	8002098 <vl53l5cx_start_ranging+0x180>
			continue;
 8002096:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8002098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800209a:	3301      	adds	r3, #1
 800209c:	663b      	str	r3, [r7, #96]	; 0x60
 800209e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020a0:	2b0b      	cmp	r3, #11
 80020a2:	d988      	bls.n	8001fb6 <vl53l5cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	f103 0218 	add.w	r2, r3, #24
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 80020b0:	f107 010c 	add.w	r1, r7, #12
 80020b4:	2330      	movs	r3, #48	; 0x30
 80020b6:	f64c 5278 	movw	r2, #52600	; 0xcd78
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fdc2 	bl	8002c44 <vl53l5cx_dci_write_data>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 80020d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d6:	3301      	adds	r3, #1
 80020d8:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 80020da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80020de:	2308      	movs	r3, #8
 80020e0:	f64c 5260 	movw	r2, #52576	; 0xcd60
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 fdad 	bl	8002c44 <vl53l5cx_dci_write_data>
 80020ea:	4603      	mov	r3, r0
 80020ec:	461a      	mov	r2, r3
 80020ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 80020f8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80020fc:	2310      	movs	r3, #16
 80020fe:	f64c 5268 	movw	r2, #52584	; 0xcd68
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fd9e 	bl	8002c44 <vl53l5cx_dci_write_data>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002110:	4313      	orrs	r3, r2
 8002112:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800211e:	4618      	mov	r0, r3
 8002120:	f001 f815 	bl	800314e <WrByte>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800212c:	4313      	orrs	r3, r2
 800212e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2205      	movs	r2, #5
 8002136:	2109      	movs	r1, #9
 8002138:	4618      	mov	r0, r3
 800213a:	f001 f808 	bl	800314e <WrByte>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002146:	4313      	orrs	r3, r2
 8002148:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fffa 	bl	800314e <WrByte>
 800215a:	4603      	mov	r3, r0
 800215c:	461a      	mov	r2, r3
 800215e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002162:	4313      	orrs	r3, r2
 8002164:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800216e:	2304      	movs	r3, #4
 8002170:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002174:	f001 f801 	bl	800317a <WrMulti>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002180:	4313      	orrs	r3, r2
 8002182:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002186:	2303      	movs	r3, #3
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	23ff      	movs	r3, #255	; 0xff
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002192:	2201      	movs	r2, #1
 8002194:	2104      	movs	r1, #4
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f7fe fde3 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l5cx_dci_read_data(p_dev,
 80021b0:	230c      	movs	r3, #12
 80021b2:	f245 4240 	movw	r2, #21568	; 0x5440
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fcba 	bl	8002b30 <vl53l5cx_dci_read_data>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 80021d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80021dc:	461a      	mov	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d002      	beq.n	80021ec <vl53l5cx_start_ranging+0x2d4>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80021e6:	23ff      	movs	r3, #255	; 0xff
 80021e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 80021ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3768      	adds	r7, #104	; 0x68
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bdb0      	pop	{r4, r5, r7, pc}
 80021f8:	08009178 	.word	0x08009178
 80021fc:	08009188 	.word	0x08009188

08002200 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	74fb      	strb	r3, [r7, #19]
 800220c:	2300      	movs	r3, #0
 800220e:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f107 020c 	add.w	r2, r7, #12
 800221e:	2304      	movs	r3, #4
 8002220:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8002224:	f000 ffc0 	bl	80031a8 <RdMulti>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	7dfb      	ldrb	r3, [r7, #23]
 800222e:	4313      	orrs	r3, r2
 8002230:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8002238:	4293      	cmp	r3, r2
 800223a:	d048      	beq.n	80022ce <vl53l5cx_stop_ranging+0xce>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002244:	4618      	mov	r0, r3
 8002246:	f000 ff82 	bl	800314e <WrByte>
 800224a:	4603      	mov	r3, r0
 800224c:	461a      	mov	r2, r3
 800224e:	7dfb      	ldrb	r3, [r7, #23]
 8002250:	4313      	orrs	r3, r2
 8002252:	75fb      	strb	r3, [r7, #23]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2216      	movs	r2, #22
 8002258:	2115      	movs	r1, #21
 800225a:	4618      	mov	r0, r3
 800225c:	f000 ff77 	bl	800314e <WrByte>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	7dfb      	ldrb	r3, [r7, #23]
 8002266:	4313      	orrs	r3, r2
 8002268:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	2114      	movs	r1, #20
 8002270:	4618      	mov	r0, r3
 8002272:	f000 ff6c 	bl	800314e <WrByte>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	4313      	orrs	r3, r2
 800227e:	75fb      	strb	r3, [r7, #23]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8002280:	e021      	b.n	80022c6 <vl53l5cx_stop_ranging+0xc6>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f107 0213 	add.w	r2, r7, #19
 8002288:	2106      	movs	r1, #6
 800228a:	4618      	mov	r0, r3
 800228c:	f000 ff4a 	bl	8003124 <RdByte>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7dfb      	ldrb	r3, [r7, #23]
 8002296:	4313      	orrs	r3, r2
 8002298:	75fb      	strb	r3, [r7, #23]
			status |= WaitMs(&(p_dev->platform), 10);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	210a      	movs	r1, #10
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 ffcf 	bl	8003242 <WaitMs>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	75fb      	strb	r3, [r7, #23]
			timeout++;	/* Timeout reached after 5 seconds */
 80022ae:	8abb      	ldrh	r3, [r7, #20]
 80022b0:	3301      	adds	r3, #1
 80022b2:	82bb      	strh	r3, [r7, #20]

			if(timeout > (uint16_t)500)
 80022b4:	8abb      	ldrh	r3, [r7, #20]
 80022b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80022ba:	d904      	bls.n	80022c6 <vl53l5cx_stop_ranging+0xc6>
			{
				status |= tmp;
 80022bc:	7cfa      	ldrb	r2, [r7, #19]
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	75fb      	strb	r3, [r7, #23]
				break;
 80022c4:	e003      	b.n	80022ce <vl53l5cx_stop_ranging+0xce>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	b25b      	sxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dad9      	bge.n	8002282 <vl53l5cx_stop_ranging+0x82>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f107 0213 	add.w	r2, r7, #19
 80022d4:	2106      	movs	r1, #6
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 ff24 	bl	8003124 <RdByte>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 80022e6:	7cfb      	ldrb	r3, [r7, #19]
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	da15      	bge.n	800231a <vl53l5cx_stop_ranging+0x11a>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f107 0213 	add.w	r2, r7, #19
 80022f4:	2107      	movs	r1, #7
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 ff14 	bl	8003124 <RdByte>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	7dfb      	ldrb	r3, [r7, #23]
 8002302:	4313      	orrs	r3, r2
 8002304:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8002306:	7cfb      	ldrb	r3, [r7, #19]
 8002308:	2b84      	cmp	r3, #132	; 0x84
 800230a:	d006      	beq.n	800231a <vl53l5cx_stop_ranging+0x11a>
 800230c:	7cfb      	ldrb	r3, [r7, #19]
 800230e:	2b85      	cmp	r3, #133	; 0x85
 8002310:	d003      	beq.n	800231a <vl53l5cx_stop_ranging+0x11a>
		   status |= tmp;
 8002312:	7cfa      	ldrb	r2, [r7, #19]
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	4313      	orrs	r3, r2
 8002318:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002322:	4618      	mov	r0, r3
 8002324:	f000 ff13 	bl	800314e <WrByte>
 8002328:	4603      	mov	r3, r0
 800232a:	461a      	mov	r2, r3
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	4313      	orrs	r3, r2
 8002330:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	2114      	movs	r1, #20
 8002338:	4618      	mov	r0, r3
 800233a:	f000 ff08 	bl	800314e <WrByte>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	4313      	orrs	r3, r2
 8002346:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	2115      	movs	r1, #21
 800234e:	4618      	mov	r0, r3
 8002350:	f000 fefd 	bl	800314e <WrByte>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	4313      	orrs	r3, r2
 800235c:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2204      	movs	r2, #4
 8002362:	2109      	movs	r1, #9
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fef2 	bl	800314e <WrByte>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	4313      	orrs	r3, r2
 8002372:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2202      	movs	r2, #2
 8002378:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800237c:	4618      	mov	r0, r3
 800237e:	f000 fee6 	bl	800314e <WrByte>
 8002382:	4603      	mov	r3, r0
 8002384:	461a      	mov	r2, r3
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	4313      	orrs	r3, r2
 800238a:	75fb      	strb	r3, [r7, #23]

	return status;
 800238c:	7dfb      	ldrb	r3, [r7, #23]
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b084      	sub	sp, #16
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80023ac:	2304      	movs	r3, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	f000 fefa 	bl	80031a8 <RdMulti>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7c1b      	ldrb	r3, [r3, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d020      	beq.n	800240e <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80023d2:	2bff      	cmp	r3, #255	; 0xff
 80023d4:	d01b      	beq.n	800240e <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 80023dc:	2b05      	cmp	r3, #5
 80023de:	d116      	bne.n	800240e <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80023e6:	f003 0305 	and.w	r3, r3, #5
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d10f      	bne.n	800240e <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	741a      	strb	r2, [r3, #16]
 800240c:	e00e      	b.n	800242c <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8002414:	b25b      	sxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	da05      	bge.n	8002426 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	4313      	orrs	r3, r2
 8002424:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 8002446:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	2100      	movs	r1, #0
 8002454:	f000 fea8 	bl	80031a8 <RdMulti>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	7ffb      	ldrb	r3, [r7, #31]
 800245e:	4313      	orrs	r3, r2
 8002460:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	b29b      	uxth	r3, r3
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 feab 	bl	80031d6 <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8002480:	2310      	movs	r3, #16
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	e0db      	b.n	800263e <vl53l5cx_get_ranging_data+0x206>
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > 0x1U) 
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d915      	bls.n	80024cc <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < 0xdU))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d80e      	bhi.n	80024cc <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	fb02 f303 	mul.w	r3, r2, r3
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	e005      	b.n	80024d8 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	f3c3 130b 	ubfx	r3, r3, #4, #12
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	885b      	ldrh	r3, [r3, #2]
 80024dc:	f24d 427c 	movw	r2, #54396	; 0xd47c
 80024e0:	4293      	cmp	r3, r2
 80024e2:	f000 8088 	beq.w	80025f6 <vl53l5cx_get_ranging_data+0x1be>
 80024e6:	f24d 427c 	movw	r2, #54396	; 0xd47c
 80024ea:	4293      	cmp	r3, r2
 80024ec:	f300 809f 	bgt.w	800262e <vl53l5cx_get_ranging_data+0x1f6>
 80024f0:	f24d 423c 	movw	r2, #54332	; 0xd43c
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d070      	beq.n	80025da <vl53l5cx_get_ranging_data+0x1a2>
 80024f8:	f24d 423c 	movw	r2, #54332	; 0xd43c
 80024fc:	4293      	cmp	r3, r2
 80024fe:	f300 8096 	bgt.w	800262e <vl53l5cx_get_ranging_data+0x1f6>
 8002502:	f24d 323c 	movw	r2, #54076	; 0xd33c
 8002506:	4293      	cmp	r3, r2
 8002508:	d059      	beq.n	80025be <vl53l5cx_get_ranging_data+0x186>
 800250a:	f24d 323c 	movw	r2, #54076	; 0xd33c
 800250e:	4293      	cmp	r3, r2
 8002510:	f300 808d 	bgt.w	800262e <vl53l5cx_get_ranging_data+0x1f6>
 8002514:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8002518:	4293      	cmp	r3, r2
 800251a:	d042      	beq.n	80025a2 <vl53l5cx_get_ranging_data+0x16a>
 800251c:	f64c 72bc 	movw	r2, #53180	; 0xcfbc
 8002520:	4293      	cmp	r3, r2
 8002522:	f300 8084 	bgt.w	800262e <vl53l5cx_get_ranging_data+0x1f6>
 8002526:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 800252a:	4293      	cmp	r3, r2
 800252c:	d02b      	beq.n	8002586 <vl53l5cx_get_ranging_data+0x14e>
 800252e:	f64c 727c 	movw	r2, #53116	; 0xcf7c
 8002532:	4293      	cmp	r3, r2
 8002534:	dc7b      	bgt.n	800262e <vl53l5cx_get_ranging_data+0x1f6>
 8002536:	f64c 4250 	movw	r2, #52304	; 0xcc50
 800253a:	4293      	cmp	r3, r2
 800253c:	d069      	beq.n	8002612 <vl53l5cx_get_ranging_data+0x1da>
 800253e:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8002542:	4293      	cmp	r3, r2
 8002544:	dc73      	bgt.n	800262e <vl53l5cx_get_ranging_data+0x1f6>
 8002546:	f245 42b4 	movw	r2, #21684	; 0x54b4
 800254a:	4293      	cmp	r3, r2
 800254c:	d004      	beq.n	8002558 <vl53l5cx_get_ranging_data+0x120>
 800254e:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8002552:	4293      	cmp	r3, r2
 8002554:	d00a      	beq.n	800256c <vl53l5cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 8002556:	e06a      	b.n	800262e <vl53l5cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	330c      	adds	r3, #12
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8002564:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	701a      	strb	r2, [r3, #0]
				break;
 800256a:	e061      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	3304      	adds	r3, #4
 8002574:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	4619      	mov	r1, r3
 8002580:	f005 fd62 	bl	8008048 <memcpy>
				break;
 8002584:	e054      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3304      	adds	r3, #4
 8002590:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4619      	mov	r1, r3
 800259c:	f005 fd54 	bl	8008048 <memcpy>
				break;
 80025a0:	e046      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	3304      	adds	r3, #4
 80025ac:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f005 fd46 	bl	8008048 <memcpy>
				break;
 80025bc:	e038      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3304      	adds	r3, #4
 80025c8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4619      	mov	r1, r3
 80025d4:	f005 fd38 	bl	8008048 <memcpy>
				break;
 80025d8:	e02a      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	3304      	adds	r3, #4
 80025e4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4619      	mov	r1, r3
 80025f0:	f005 fd2a 	bl	8008048 <memcpy>
				break;
 80025f4:	e01c      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	3304      	adds	r3, #4
 8002600:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4619      	mov	r1, r3
 800260c:	f005 fd1c 	bl	8008048 <memcpy>
				break;
 8002610:	e00e      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	3304      	adds	r3, #4
 800261c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4619      	mov	r1, r3
 8002628:	f005 fd0e 	bl	8008048 <memcpy>
				break;
 800262c:	e000      	b.n	8002630 <vl53l5cx_get_ranging_data+0x1f8>
				break;
 800262e:	bf00      	nop
		}
		i += msize;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
	for (i = 16U; i < (uint32_t)p_dev->data_read_size; i+=4U)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	3304      	adds	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695b      	ldr	r3, [r3, #20]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	429a      	cmp	r2, r3
 8002646:	f4ff af1e 	bcc.w	8002486 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	e00d      	b.n	800266c <vl53l5cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0ada      	lsrs	r2, r3, #11
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	3301      	adds	r3, #1
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b3f      	cmp	r3, #63	; 0x3f
 8002670:	d9ee      	bls.n	8002650 <vl53l5cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	e045      	b.n	8002704 <vl53l5cx_get_ranging_data+0x2cc>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	4413      	add	r3, r2
 8002684:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	da00      	bge.n	800268e <vl53l5cx_get_ranging_data+0x256>
 800268c:	3303      	adds	r3, #3
 800268e:	109b      	asrs	r3, r3, #2
 8002690:	b219      	sxth	r1, r3
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	460a      	mov	r2, r1
 80026a0:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	4413      	add	r3, r2
 80026ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da07      	bge.n	80026c6 <vl53l5cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	2200      	movs	r2, #0
 80026c4:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	4413      	add	r3, r2
 80026cc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	b2d9      	uxtb	r1, r3
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 80026e0:	460a      	mov	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3350      	adds	r3, #80	; 0x50
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0ada      	lsrs	r2, r3, #11
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	3350      	adds	r3, #80	; 0x50
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3301      	adds	r3, #1
 8002702:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b3f      	cmp	r3, #63	; 0x3f
 8002708:	d9b6      	bls.n	8002678 <vl53l5cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800270a:	2300      	movs	r3, #0
 800270c:	61bb      	str	r3, [r7, #24]
 800270e:	e01b      	b.n	8002748 <vl53l5cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4413      	add	r3, r2
 8002716:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d110      	bne.n	8002742 <vl53l5cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	e00a      	b.n	800273c <vl53l5cx_get_ranging_data+0x304>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	4413      	add	r3, r2
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	22ff      	movs	r2, #255	; 0xff
 8002732:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f1      	beq.n	8002726 <vl53l5cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	3301      	adds	r3, #1
 8002746:	61bb      	str	r3, [r7, #24]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b3f      	cmp	r3, #63	; 0x3f
 800274c:	d9e0      	bls.n	8002710 <vl53l5cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 800274e:	2300      	movs	r3, #0
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	e012      	b.n	800277a <vl53l5cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	33d2      	adds	r3, #210	; 0xd2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <vl53l5cx_get_ranging_data+0x3a8>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0bda      	lsrs	r2, r3, #15
 8002768:	6839      	ldr	r1, [r7, #0]
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	33d2      	adds	r3, #210	; 0xd2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	3301      	adds	r3, #1
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	2b1f      	cmp	r3, #31
 800277e:	d9e9      	bls.n	8002754 <vl53l5cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8002786:	b29b      	uxth	r3, r3
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 8002792:	b29a      	uxth	r2, r3
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	4313      	orrs	r3, r2
 8002798:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 800279e:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	4413      	add	r3, r2
 80027a4:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	021b      	lsls	r3, r3, #8
 80027ac:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 80027b2:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80027bc:	b29a      	uxth	r2, r3
 80027be:	89bb      	ldrh	r3, [r7, #12]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 80027c4:	89fa      	ldrh	r2, [r7, #14]
 80027c6:	89bb      	ldrh	r3, [r7, #12]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d003      	beq.n	80027d4 <vl53l5cx_get_ranging_data+0x39c>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 80027cc:	7ffb      	ldrb	r3, [r7, #31]
 80027ce:	f043 0302 	orr.w	r3, r3, #2
 80027d2:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 80027d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	80008001 	.word	0x80008001

080027e4 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80027f8:	2308      	movs	r3, #8
 80027fa:	f245 4250 	movw	r2, #21584	; 0x5450
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f996 	bl	8002b30 <vl53l5cx_dci_read_data>
 8002804:	4603      	mov	r3, r0
 8002806:	461a      	mov	r2, r3
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	4313      	orrs	r3, r2
 800280c:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800281a:	fb12 f303 	smulbb	r3, r2, r3
 800281e:	b2da      	uxtb	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	701a      	strb	r2, [r3, #0]

	return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	460b      	mov	r3, r1
 8002838:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	2b10      	cmp	r3, #16
 8002842:	d002      	beq.n	800284a <vl53l5cx_set_resolution+0x1c>
 8002844:	2b40      	cmp	r3, #64	; 0x40
 8002846:	d055      	beq.n	80028f4 <vl53l5cx_set_resolution+0xc6>
 8002848:	e0a9      	b.n	800299e <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8002850:	2310      	movs	r3, #16
 8002852:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f96a 	bl	8002b30 <vl53l5cx_dci_read_data>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	4313      	orrs	r3, r2
 8002864:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2240      	movs	r2, #64	; 0x40
 800286a:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2204      	movs	r2, #4
 800287a:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002884:	2310      	movs	r3, #16
 8002886:	f64a 5238 	movw	r2, #44344	; 0xad38
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f9da 	bl	8002c44 <vl53l5cx_dci_write_data>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	7bfb      	ldrb	r3, [r7, #15]
 8002896:	4313      	orrs	r3, r2
 8002898:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80028a0:	2308      	movs	r3, #8
 80028a2:	f245 4250 	movw	r2, #21584	; 0x5450
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f942 	bl	8002b30 <vl53l5cx_dci_read_data>
 80028ac:	4603      	mov	r3, r0
 80028ae:	461a      	mov	r2, r3
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2204      	movs	r2, #4
 80028ba:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2208      	movs	r2, #8
 80028ca:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2208      	movs	r2, #8
 80028d2:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 80028dc:	2308      	movs	r3, #8
 80028de:	f245 4250 	movw	r2, #21584	; 0x5450
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f9ae 	bl	8002c44 <vl53l5cx_dci_write_data>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 80028f2:	e057      	b.n	80029a4 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80028fa:	2310      	movs	r3, #16
 80028fc:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f915 	bl	8002b30 <vl53l5cx_dci_read_data>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	7bfb      	ldrb	r3, [r7, #15]
 800290c:	4313      	orrs	r3, r2
 800290e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2210      	movs	r2, #16
 8002914:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2210      	movs	r2, #16
 800291c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 800292e:	2310      	movs	r3, #16
 8002930:	f64a 5238 	movw	r2, #44344	; 0xad38
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f985 	bl	8002c44 <vl53l5cx_dci_write_data>
 800293a:	4603      	mov	r3, r0
 800293c:	461a      	mov	r2, r3
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	4313      	orrs	r3, r2
 8002942:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 800294a:	2308      	movs	r3, #8
 800294c:	f245 4250 	movw	r2, #21584	; 0x5450
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8ed 	bl	8002b30 <vl53l5cx_dci_read_data>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	4313      	orrs	r3, r2
 800295e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2208      	movs	r2, #8
 8002964:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2208      	movs	r2, #8
 800296c:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2204      	movs	r2, #4
 8002974:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2204      	movs	r2, #4
 800297c:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8002986:	2308      	movs	r3, #8
 8002988:	f245 4250 	movw	r2, #21584	; 0x5450
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f959 	bl	8002c44 <vl53l5cx_dci_write_data>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	4313      	orrs	r3, r2
 800299a:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 800299c:	e002      	b.n	80029a4 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 800299e:	237f      	movs	r3, #127	; 0x7f
 80029a0:	73fb      	strb	r3, [r7, #15]
			break;
 80029a2:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	4619      	mov	r1, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7fe fa6b 	bl	8000e84 <_vl53l5cx_send_offset_data>
 80029ae:	4603      	mov	r3, r0
 80029b0:	461a      	mov	r2, r3
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	4619      	mov	r1, r3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe fc2d 	bl	800121c <_vl53l5cx_send_xtalk_data>
 80029c2:	4603      	mov	r3, r0
 80029c4:	461a      	mov	r2, r3
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	73fb      	strb	r3, [r7, #15]

	return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b088      	sub	sp, #32
 80029da:	af04      	add	r7, sp, #16
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80029ec:	2301      	movs	r3, #1
 80029ee:	9302      	str	r3, [sp, #8]
 80029f0:	2301      	movs	r3, #1
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	1cfb      	adds	r3, r7, #3
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2304      	movs	r3, #4
 80029fa:	f245 4258 	movw	r2, #21592	; 0x5458
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f9be 	bl	8002d80 <vl53l5cx_dci_replace_data>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461a      	mov	r2, r3
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <vl53l5cx_set_integration_time_ms>:
}

uint8_t vl53l5cx_set_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af04      	add	r7, sp, #16
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d903      	bls.n	8002a38 <vl53l5cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a36:	d904      	bls.n	8002a42 <vl53l5cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8002a3e:	73fb      	strb	r3, [r7, #15]
 8002a40:	e01a      	b.n	8002a78 <vl53l5cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a48:	fb02 f303 	mul.w	r3, r2, r3
 8002a4c:	60bb      	str	r3, [r7, #8]

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002a54:	2300      	movs	r3, #0
 8002a56:	9302      	str	r3, [sp, #8]
 8002a58:	2304      	movs	r3, #4
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	f107 0308 	add.w	r3, r7, #8
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2314      	movs	r3, #20
 8002a64:	f245 425c 	movw	r2, #21596	; 0x545c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f989 	bl	8002d80 <vl53l5cx_dci_replace_data>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002a9c:	2308      	movs	r3, #8
 8002a9e:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f844 	bl	8002b30 <vl53l5cx_dci_read_data>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d002      	beq.n	8002abe <vl53l5cx_set_ranging_mode+0x3c>
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d00b      	beq.n	8002ad4 <vl53l5cx_set_ranging_mode+0x52>
 8002abc:	e015      	b.n	8002aea <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
			break;
 8002ad2:	e00d      	b.n	8002af0 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
			break;
 8002ae8:	e002      	b.n	8002af0 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8002aea:	237f      	movs	r3, #127	; 0x7f
 8002aec:	73fb      	strb	r3, [r7, #15]
			break;
 8002aee:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002af6:	2308      	movs	r3, #8
 8002af8:	f64a 5230 	movw	r2, #44336	; 0xad30
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8a1 	bl	8002c44 <vl53l5cx_dci_write_data>
 8002b02:	4603      	mov	r3, r0
 8002b04:	461a      	mov	r2, r3
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8002b0c:	f107 0108 	add.w	r1, r7, #8
 8002b10:	2304      	movs	r3, #4
 8002b12:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f894 	bl	8002c44 <vl53l5cx_dci_write_data>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	461a      	mov	r2, r3
 8002b20:	7bfb      	ldrb	r3, [r7, #15]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08c      	sub	sp, #48	; 0x30
 8002b34:	af02      	add	r7, sp, #8
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	330c      	adds	r3, #12
 8002b48:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8002b4a:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <vl53l5cx_dci_read_data+0x110>)
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8002b56:	887b      	ldrh	r3, [r7, #2]
 8002b58:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002b5c:	d903      	bls.n	8002b66 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002b5e:	23ff      	movs	r3, #255	; 0xff
 8002b60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002b64:	e065      	b.n	8002c32 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	111b      	asrs	r3, r3, #4
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002b7c:	887b      	ldrh	r3, [r7, #2]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f107 0214 	add.w	r2, r7, #20
 8002b8c:	230c      	movs	r3, #12
 8002b8e:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8002b92:	f000 faf2 	bl	800317a <WrMulti>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	23ff      	movs	r3, #255	; 0xff
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7fe f8d4 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002bc8:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	f642 4104 	movw	r1, #11268	; 0x2c04
 8002bd6:	f000 fae7 	bl	80031a8 <RdMulti>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	330c      	adds	r3, #12
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 faed 	bl	80031d6 <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c00:	e011      	b.n	8002c26 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8002c02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c06:	1d1a      	adds	r2, r3, #4
 8002c08:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	440b      	add	r3, r1
 8002c10:	68f9      	ldr	r1, [r7, #12]
 8002c12:	440a      	add	r2, r1
 8002c14:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8002c18:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8002c1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3301      	adds	r3, #1
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002c26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c2a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	dbe7      	blt.n	8002c02 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8002c32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3728      	adds	r7, #40	; 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	080091b8 	.word	0x080091b8

08002c44 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	; 0x30
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	753b      	strb	r3, [r7, #20]
 8002c60:	2300      	movs	r3, #0
 8002c62:	757b      	strb	r3, [r7, #21]
 8002c64:	2300      	movs	r3, #0
 8002c66:	75bb      	strb	r3, [r7, #22]
 8002c68:	230f      	movs	r3, #15
 8002c6a:	75fb      	strb	r3, [r7, #23]
 8002c6c:	2305      	movs	r3, #5
 8002c6e:	763b      	strb	r3, [r7, #24]
 8002c70:	2301      	movs	r3, #1
 8002c72:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8002c74:	887b      	ldrh	r3, [r7, #2]
 8002c76:	3308      	adds	r3, #8
 8002c78:	121b      	asrs	r3, r3, #8
 8002c7a:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002c7c:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8002c7e:	887b      	ldrh	r3, [r7, #2]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3308      	adds	r3, #8
 8002c84:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8002c86:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8002c8e:	3334      	adds	r3, #52	; 0x34
 8002c90:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 8002c98:	d903      	bls.n	8002ca2 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8002c9a:	23ff      	movs	r3, #255	; 0xff
 8002c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ca0:	e068      	b.n	8002d74 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8002cb0:	887b      	ldrh	r3, [r7, #2]
 8002cb2:	111b      	asrs	r3, r3, #4
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8002cc2:	887b      	ldrh	r3, [r7, #2]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	68b8      	ldr	r0, [r7, #8]
 8002cc8:	f000 fa85 	bl	80031d6 <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cd4:	e012      	b.n	8002cfc <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8002cd6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	441a      	add	r2, r3
 8002cde:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002ce2:	3304      	adds	r3, #4
 8002ce4:	7811      	ldrb	r1, [r2, #0]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4413      	add	r3, r2
 8002cea:	460a      	mov	r2, r1
 8002cec:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8002cf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dae8      	bge.n	8002cd6 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	3304      	adds	r3, #4
 8002d12:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	cb03      	ldmia	r3!, {r0, r1}
 8002d22:	6010      	str	r0, [r2, #0]
 8002d24:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8002d26:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8002d2e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8002d30:	330c      	adds	r3, #12
 8002d32:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8002d34:	f000 fa21 	bl	800317a <WrMulti>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8002d46:	2303      	movs	r3, #3
 8002d48:	9301      	str	r3, [sp, #4]
 8002d4a:	23ff      	movs	r3, #255	; 0xff
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8002d52:	2201      	movs	r2, #1
 8002d54:	2104      	movs	r1, #4
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f7fe f803 	bl	8000d62 <_vl53l5cx_poll_for_answer>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8002d6a:	887b      	ldrh	r3, [r7, #2]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	68b8      	ldr	r0, [r7, #8]
 8002d70:	f000 fa31 	bl	80031d6 <SwapBuffer>
	}

	return status;
 8002d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3728      	adds	r7, #40	; 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff fec9 	bl	8002b30 <vl53l5cx_dci_read_data>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8002da8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	4413      	add	r3, r2
 8002dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002db0:	6a39      	ldr	r1, [r7, #32]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f005 f948 	bl	8008048 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff ff40 	bl	8002c44 <vl53l5cx_dci_write_data>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	7dfb      	ldrb	r3, [r7, #23]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	75fb      	strb	r3, [r7, #23]

	return status;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af04      	add	r7, sp, #16
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8002de8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002dec:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8002dee:	78fb      	ldrb	r3, [r7, #3]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d104      	bne.n	8002dfe <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8002df4:	2301      	movs	r3, #1
 8002df6:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	73bb      	strb	r3, [r7, #14]
 8002dfc:	e003      	b.n	8002e06 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8002e02:	230c      	movs	r3, #12
 8002e04:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9302      	str	r3, [sp, #8]
 8002e10:	2304      	movs	r3, #4
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ffad 	bl	8002d80 <vl53l5cx_dci_replace_data>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8002e36:	2311      	movs	r3, #17
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	f107 030e 	add.w	r3, r7, #14
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2314      	movs	r3, #20
 8002e46:	f245 4288 	movw	r2, #21640	; 0x5488
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ff98 	bl	8002d80 <vl53l5cx_dci_replace_data>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <vl53l5cx_set_detection_thresholds>:
}

uint8_t vl53l5cx_set_detection_thresholds(
		VL53L5CX_Configuration			*p_dev,
		VL53L5CX_DetectionThresholds	*p_thresholds)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L5CX_STATUS_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8002e72:	4aab      	ldr	r2, [pc, #684]	; (8003120 <vl53l5cx_set_detection_thresholds+0x2bc>)
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e7c:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	75fb      	strb	r3, [r7, #23]
 8002e84:	e128      	b.n	80030d8 <vl53l5cx_set_detection_thresholds+0x274>
	{
		switch(p_thresholds[i].measurement)
 8002e86:	7dfa      	ldrb	r2, [r7, #23]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	461a      	mov	r2, r3
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	4413      	add	r3, r2
 8002e96:	7a1b      	ldrb	r3, [r3, #8]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	2b12      	cmp	r3, #18
 8002e9c:	f200 8118 	bhi.w	80030d0 <vl53l5cx_set_detection_thresholds+0x26c>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <vl53l5cx_set_detection_thresholds+0x44>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002ef5 	.word	0x08002ef5
 8002eac:	08002f43 	.word	0x08002f43
 8002eb0:	080030d1 	.word	0x080030d1
 8002eb4:	08002f91 	.word	0x08002f91
 8002eb8:	080030d1 	.word	0x080030d1
 8002ebc:	080030d1 	.word	0x080030d1
 8002ec0:	080030d1 	.word	0x080030d1
 8002ec4:	08002fdf 	.word	0x08002fdf
 8002ec8:	080030d1 	.word	0x080030d1
 8002ecc:	080030d1 	.word	0x080030d1
 8002ed0:	080030d1 	.word	0x080030d1
 8002ed4:	080030d1 	.word	0x080030d1
 8002ed8:	0800302d 	.word	0x0800302d
 8002edc:	080030d1 	.word	0x080030d1
 8002ee0:	080030d1 	.word	0x080030d1
 8002ee4:	080030d1 	.word	0x080030d1
 8002ee8:	080030d1 	.word	0x080030d1
 8002eec:	080030d1 	.word	0x080030d1
 8002ef0:	0800307b 	.word	0x0800307b
		{
			case VL53L5CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8002ef4:	7dfa      	ldrb	r2, [r7, #23]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	461a      	mov	r2, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	461a      	mov	r2, r3
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	008a      	lsls	r2, r1, #2
 8002f18:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8002f1a:	7dfa      	ldrb	r2, [r7, #23]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	461a      	mov	r2, r3
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	7dfa      	ldrb	r2, [r7, #23]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	461a      	mov	r2, r3
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	008a      	lsls	r2, r1, #2
 8002f3e:	605a      	str	r2, [r3, #4]
				break;
 8002f40:	e0c7      	b.n	80030d2 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8002f42:	7dfa      	ldrb	r2, [r7, #23]
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4413      	add	r3, r2
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	7dfa      	ldrb	r2, [r7, #23]
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	461a      	mov	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	02ca      	lsls	r2, r1, #11
 8002f66:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8002f68:	7dfa      	ldrb	r2, [r7, #23]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	6859      	ldr	r1, [r3, #4]
 8002f7a:	7dfa      	ldrb	r2, [r7, #23]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	461a      	mov	r2, r3
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	4413      	add	r3, r2
 8002f8a:	02ca      	lsls	r2, r1, #11
 8002f8c:	605a      	str	r2, [r3, #4]
				break;
 8002f8e:	e0a0      	b.n	80030d2 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8002f90:	7dfa      	ldrb	r2, [r7, #23]
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	6819      	ldr	r1, [r3, #0]
 8002fa2:	7dfa      	ldrb	r2, [r7, #23]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	461a      	mov	r2, r3
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	01ca      	lsls	r2, r1, #7
 8002fb4:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8002fb6:	7dfa      	ldrb	r2, [r7, #23]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	7dfa      	ldrb	r2, [r7, #23]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	01ca      	lsls	r2, r1, #7
 8002fda:	605a      	str	r2, [r3, #4]
				break;
 8002fdc:	e079      	b.n	80030d2 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8002fde:	7dfa      	ldrb	r2, [r7, #23]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	7dfa      	ldrb	r2, [r7, #23]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	4413      	add	r3, r2
 8003000:	02ca      	lsls	r2, r1, #11
 8003002:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8003004:	7dfa      	ldrb	r2, [r7, #23]
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	461a      	mov	r2, r3
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4413      	add	r3, r2
 8003014:	6859      	ldr	r1, [r3, #4]
 8003016:	7dfa      	ldrb	r2, [r7, #23]
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	461a      	mov	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	02ca      	lsls	r2, r1, #11
 8003028:	605a      	str	r2, [r3, #4]
				break;
 800302a:	e052      	b.n	80030d2 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 800302c:	7dfa      	ldrb	r2, [r7, #23]
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	461a      	mov	r2, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4413      	add	r3, r2
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	7dfa      	ldrb	r2, [r7, #23]
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	461a      	mov	r2, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4413      	add	r3, r2
 800304e:	020a      	lsls	r2, r1, #8
 8003050:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8003052:	7dfa      	ldrb	r2, [r7, #23]
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	461a      	mov	r2, r3
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	4413      	add	r3, r2
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	7dfa      	ldrb	r2, [r7, #23]
 8003066:	4613      	mov	r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	4413      	add	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	4413      	add	r3, r2
 8003074:	020a      	lsls	r2, r1, #8
 8003076:	605a      	str	r2, [r3, #4]
				break;
 8003078:	e02b      	b.n	80030d2 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 800307a:	7dfa      	ldrb	r2, [r7, #23]
 800307c:	4613      	mov	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	461a      	mov	r2, r3
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4413      	add	r3, r2
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	7df9      	ldrb	r1, [r7, #23]
 800308e:	460b      	mov	r3, r1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	440b      	add	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4619      	mov	r1, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	4419      	add	r1, r3
 800309c:	4613      	mov	r3, r2
 800309e:	041b      	lsls	r3, r3, #16
 80030a0:	1a9b      	subs	r3, r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 80030a4:	7dfa      	ldrb	r2, [r7, #23]
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	461a      	mov	r2, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4413      	add	r3, r2
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	7df9      	ldrb	r1, [r7, #23]
 80030b8:	460b      	mov	r3, r1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	440b      	add	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4619      	mov	r1, r3
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	4419      	add	r1, r3
 80030c6:	4613      	mov	r3, r2
 80030c8:	041b      	lsls	r3, r3, #16
 80030ca:	1a9b      	subs	r3, r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
				break;
 80030ce:	e000      	b.n	80030d2 <vl53l5cx_set_detection_thresholds+0x26e>
			default:
				break;
 80030d0:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 80030d2:	7dfb      	ldrb	r3, [r7, #23]
 80030d4:	3301      	adds	r3, #1
 80030d6:	75fb      	strb	r3, [r7, #23]
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b3f      	cmp	r3, #63	; 0x3f
 80030dc:	f67f aed3 	bls.w	8002e86 <vl53l5cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 80030e0:	f107 010c 	add.w	r1, r7, #12
 80030e4:	2308      	movs	r3, #8
 80030e6:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff fdaa 	bl	8002c44 <vl53l5cx_dci_write_data>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	7dbb      	ldrb	r3, [r7, #22]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_VALID_STATUS, 
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 80030fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80030fe:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8003102:	6839      	ldr	r1, [r7, #0]
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fd9d 	bl	8002c44 <vl53l5cx_dci_write_data>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	7dbb      	ldrb	r3, [r7, #22]
 8003110:	4313      	orrs	r3, r2
 8003112:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_START, 
			(uint16_t)(VL53L5CX_NB_THRESHOLDS
			*sizeof(VL53L5CX_DetectionThresholds)));

	return status;
 8003114:	7dbb      	ldrb	r3, [r7, #22]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	080091c4 	.word	0x080091c4

08003124 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	460b      	mov	r3, r1
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689c      	ldr	r4, [r3, #8]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8818      	ldrh	r0, [r3, #0]
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	2301      	movs	r3, #1
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	47a0      	blx	r4
 8003142:	4603      	mov	r3, r0
 8003144:	b2db      	uxtb	r3, r3
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bd90      	pop	{r4, r7, pc}

0800314e <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 800314e:	b590      	push	{r4, r7, lr}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	807b      	strh	r3, [r7, #2]
 800315a:	4613      	mov	r3, r2
 800315c:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685c      	ldr	r4, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	8818      	ldrh	r0, [r3, #0]
 8003166:	1c7a      	adds	r2, r7, #1
 8003168:	8879      	ldrh	r1, [r7, #2]
 800316a:	2301      	movs	r3, #1
 800316c:	47a0      	blx	r4
 800316e:	4603      	mov	r3, r0
 8003170:	b2db      	uxtb	r3, r3
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bd90      	pop	{r4, r7, pc}

0800317a <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 800317a:	b590      	push	{r4, r7, lr}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	607a      	str	r2, [r7, #4]
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	460b      	mov	r3, r1
 8003188:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	685c      	ldr	r4, [r3, #4]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8818      	ldrh	r0, [r3, #0]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	8979      	ldrh	r1, [r7, #10]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	47a0      	blx	r4
 800319c:	4603      	mov	r3, r0
 800319e:	b2db      	uxtb	r3, r3
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}

080031a8 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	460b      	mov	r3, r1
 80031b6:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	689c      	ldr	r4, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8818      	ldrh	r0, [r3, #0]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	47a0      	blx	r4
 80031ca:	4603      	mov	r3, r0
 80031cc:	b2db      	uxtb	r3, r3
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd90      	pop	{r4, r7, pc}

080031d6 <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	e021      	b.n	800322c <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4413      	add	r3, r2
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	440b      	add	r3, r1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	041b      	lsls	r3, r3, #16
 80031fe:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3302      	adds	r3, #2
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	440b      	add	r3, r1
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	3203      	adds	r2, #3
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	440a      	add	r2, r1
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	4313      	orrs	r3, r2
    tmp = (
 800321a:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4413      	add	r3, r2
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	3304      	adds	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d3d9      	bcc.n	80031e8 <SwapBuffer+0x12>
  }
}
 8003234:	bf00      	nop
 8003236:	bf00      	nop
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
 800324a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4798      	blx	r3
 8003252:	4603      	mov	r3, r0
 8003254:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8003256:	bf00      	nop
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4798      	blx	r3
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d8f5      	bhi.n	8003258 <WaitMs+0x16>

  return 0;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <VL53L5CX_RegisterBusIO>:
  * @param pObj    vl53l5cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_RegisterBusIO(VL53L5CX_Object_t *pObj, VL53L5CX_IO_t *pIO)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b084      	sub	sp, #16
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <VL53L5CX_RegisterBusIO+0x16>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d103      	bne.n	8003294 <VL53L5CX_RegisterBusIO+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800328c:	f06f 0301 	mvn.w	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	e033      	b.n	80032fc <VL53L5CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	891a      	ldrh	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	615a      	str	r2, [r3, #20]

    /* fill vl53l5cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	891a      	ldrh	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	691a      	ldr	r2, [r3, #16]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d004      	beq.n	80032f6 <VL53L5CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4798      	blx	r3
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	e002      	b.n	80032fc <VL53L5CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L5CX_ERROR;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80032fc:	68fb      	ldr	r3, [r7, #12]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <VL53L5CX_Init>:
  * @brief Initializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Init(VL53L5CX_Object_t *pObj)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <VL53L5CX_Init+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003314:	f06f 0301 	mvn.w	r3, #1
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	e02e      	b.n	800337a <VL53L5CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <VL53L5CX_Init+0x28>
  {
    ret =  VL53L5CX_ERROR;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e025      	b.n	800337a <VL53L5CX_Init+0x74>
  }
  else if (vl53l5cx_init(&pObj->Dev) != VL53L5CX_STATUS_OK)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3318      	adds	r3, #24
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f8be 	bl	80014b4 <vl53l5cx_init>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <VL53L5CX_Init+0x40>
  {
    ret = VL53L5CX_ERROR;
 800333e:	f04f 33ff 	mov.w	r3, #4294967295
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e019      	b.n	800337a <VL53L5CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    pObj->IsBlocking = 0U;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
    pObj->IsContinuous = 0U;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
    pObj->IsAmbientEnabled = 0U;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = 0U;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsInitialized = 1U;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
    ret = VL53L5CX_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800337a:	68fb      	ldr	r3, [r7, #12]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <VL53L5CX_DeInit>:
  * @brief Deinitializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_DeInit(VL53L5CX_Object_t *pObj)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d103      	bne.n	800339a <VL53L5CX_DeInit+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003392:	f06f 0301 	mvn.w	r3, #1
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	e018      	b.n	80033cc <VL53L5CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 394c 	ldrb.w	r3, [r3, #2380]	; 0x94c
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d110      	bne.n	80033c6 <VL53L5CX_DeInit+0x42>
  {
    /* De-initialize the vl53l5cx interface */
    if (pObj->IO.DeInit() != 0)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	4798      	blx	r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <VL53L5CX_DeInit+0x34>
    {
      ret = VL53L5CX_ERROR;
 80033b0:	f04f 33ff 	mov.w	r3, #4294967295
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e009      	b.n	80033cc <VL53L5CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L5CX_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
 80033c4:	e002      	b.n	80033cc <VL53L5CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L5CX_ERROR;
 80033c6:	f04f 33ff 	mov.w	r3, #4294967295
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80033cc:	68fb      	ldr	r3, [r7, #12]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <VL53L5CX_ReadID>:
  * @param pObj    vl53l5cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ReadID(VL53L5CX_Object_t *pObj, uint32_t *pId)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L5CX_STATUS_OK;
 80033e8:	2300      	movs	r3, #0
 80033ea:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <VL53L5CX_ReadID+0x22>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <VL53L5CX_ReadID+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80033f8:	f06f 0301 	mvn.w	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	e045      	b.n	800348c <VL53L5CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3318      	adds	r3, #24
 8003404:	2200      	movs	r2, #0
 8003406:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fe9f 	bl	800314e <WrByte>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	7afb      	ldrb	r3, [r7, #11]
 8003416:	4313      	orrs	r3, r2
 8003418:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3318      	adds	r3, #24
 800341e:	f107 020a 	add.w	r2, r7, #10
 8003422:	2100      	movs	r1, #0
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fe7d 	bl	8003124 <RdByte>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	7afb      	ldrb	r3, [r7, #11]
 8003430:	4313      	orrs	r3, r2
 8003432:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3318      	adds	r3, #24
 8003438:	f107 0209 	add.w	r2, r7, #9
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fe70 	bl	8003124 <RdByte>
 8003444:	4603      	mov	r3, r0
 8003446:	461a      	mov	r2, r3
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	4313      	orrs	r3, r2
 800344c:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3318      	adds	r3, #24
 8003452:	2202      	movs	r2, #2
 8003454:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fe78 	bl	800314e <WrByte>
 800345e:	4603      	mov	r3, r0
 8003460:	461a      	mov	r2, r3
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	4313      	orrs	r3, r2
 8003466:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8003468:	7afb      	ldrb	r3, [r7, #11]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d108      	bne.n	8003480 <VL53L5CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 800346e:	7abb      	ldrb	r3, [r7, #10]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	7a7a      	ldrb	r2, [r7, #9]
 8003474:	441a      	add	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e005      	b.n	800348c <VL53L5CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2200      	movs	r2, #0
 8003484:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_ERROR;
 8003486:	f04f 33ff 	mov.w	r3, #4294967295
 800348a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800348c:	68fb      	ldr	r3, [r7, #12]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <VL53L5CX_GetCapabilities>:
  * @param pObj    vl53l5cx context object.
  * @param pCap    Pointer to the vl53l5cx capabilities.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetCapabilities(VL53L5CX_Object_t *pObj, VL53L5CX_Capabilities_t *pCap)
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <VL53L5CX_GetCapabilities+0x16>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <VL53L5CX_GetCapabilities+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80034ac:	f06f 0301 	mvn.w	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e00d      	b.n	80034d0 <VL53L5CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L5CX_RESOLUTION_8X8;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L5CX_TARGET_PER_ZONE;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	2201      	movs	r2, #1
 80034be:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2201      	movs	r2, #1
 80034ca:	60da      	str	r2, [r3, #12]

    ret = VL53L5CX_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <VL53L5CX_ConfigProfile>:
  * @param pObj    vl53l5cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigProfile(VL53L5CX_Object_t *pObj, VL53L5CX_ProfileConfig_t *pConfig)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L5CX_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01b      	beq.n	800352c <VL53L5CX_ConfigProfile+0x4c>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d018      	beq.n	800352c <VL53L5CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L5CX_INVALID_PARAM;
  }

  switch (profile)
 800350c:	7c7b      	ldrb	r3, [r7, #17]
 800350e:	3b01      	subs	r3, #1
 8003510:	2b03      	cmp	r3, #3
 8003512:	d822      	bhi.n	800355a <VL53L5CX_ConfigProfile+0x7a>
 8003514:	a201      	add	r2, pc, #4	; (adr r2, 800351c <VL53L5CX_ConfigProfile+0x3c>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003533 	.word	0x08003533
 8003520:	0800353d 	.word	0x0800353d
 8003524:	08003547 	.word	0x08003547
 8003528:	08003551 	.word	0x08003551
    return VL53L5CX_INVALID_PARAM;
 800352c:	f06f 0301 	mvn.w	r3, #1
 8003530:	e070      	b.n	8003614 <VL53L5CX_ConfigProfile+0x134>
  {
  case VL53L5CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 8003532:	2310      	movs	r3, #16
 8003534:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 8003536:	2301      	movs	r3, #1
 8003538:	74bb      	strb	r3, [r7, #18]
    break;
 800353a:	e016      	b.n	800356a <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 800353c:	2310      	movs	r3, #16
 800353e:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8003540:	2303      	movs	r3, #3
 8003542:	74bb      	strb	r3, [r7, #18]
    break;
 8003544:	e011      	b.n	800356a <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 8003546:	2340      	movs	r3, #64	; 0x40
 8003548:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800354a:	2301      	movs	r3, #1
 800354c:	74bb      	strb	r3, [r7, #18]
    break;
 800354e:	e00c      	b.n	800356a <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 8003550:	2340      	movs	r3, #64	; 0x40
 8003552:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8003554:	2303      	movs	r3, #3
 8003556:	74bb      	strb	r3, [r7, #18]
    break;
 8003558:	e007      	b.n	800356a <VL53L5CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800355a:	2300      	movs	r3, #0
 800355c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 800355e:	2300      	movs	r3, #0
 8003560:	74bb      	strb	r3, [r7, #18]
    ret = VL53L5CX_INVALID_PARAM;
 8003562:	f06f 0301 	mvn.w	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
    break;
 8003568:	bf00      	nop
  }

  if (ret != VL53L5CX_OK)
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <VL53L5CX_ConfigProfile+0x94>
  {
    return ret;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	e04f      	b.n	8003614 <VL53L5CX_ConfigProfile+0x134>
  }
  else if (vl53l5cx_set_resolution(&pObj->Dev, resolution) != VL53L5CX_STATUS_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3318      	adds	r3, #24
 8003578:	7cfa      	ldrb	r2, [r7, #19]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f956 	bl	800282e <vl53l5cx_set_resolution>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <VL53L5CX_ConfigProfile+0xb0>
  {
    ret = VL53L5CX_ERROR;
 8003588:	f04f 33ff 	mov.w	r3, #4294967295
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e040      	b.n	8003612 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L5CX_STATUS_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3318      	adds	r3, #24
 8003594:	7cba      	ldrb	r2, [r7, #18]
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fa72 	bl	8002a82 <vl53l5cx_set_ranging_mode>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <VL53L5CX_ConfigProfile+0xcc>
  {
    ret = VL53L5CX_ERROR;
 80035a4:	f04f 33ff 	mov.w	r3, #4294967295
 80035a8:	617b      	str	r3, [r7, #20]
 80035aa:	e032      	b.n	8003612 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L5CX_STATUS_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3318      	adds	r3, #24
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff fa30 	bl	8002a18 <vl53l5cx_set_integration_time_ms>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <VL53L5CX_ConfigProfile+0xe6>
  {
    ret = VL53L5CX_ERROR;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e025      	b.n	8003612 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L5CX_STATUS_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3318      	adds	r3, #24
 80035ca:	7afa      	ldrb	r2, [r7, #11]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fa01 	bl	80029d6 <vl53l5cx_set_ranging_frequency_hz>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <VL53L5CX_ConfigProfile+0x102>
  {
    ret = VL53L5CX_ERROR;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	e017      	b.n	8003612 <VL53L5CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951

    ret = VL53L5CX_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003612:	697b      	ldr	r3, [r7, #20]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <VL53L5CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigROI(VL53L5CX_Object_t *pObj, VL53L5CX_ROIConfig_t *pROIConfig)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L5CX_NOT_IMPLEMENTED;
 8003626:	f06f 0303 	mvn.w	r3, #3
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <VL53L5CX_ConfigIT>:
  * @param pObj    vl53l5cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigIT(VL53L5CX_Object_t *pObj, VL53L5CX_ITConfig_t *pITConfig)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8003642:	2300      	movs	r3, #0
 8003644:	72bb      	strb	r3, [r7, #10]
  static VL53L5CX_DetectionThresholds thresholds[VL53L5CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <VL53L5CX_ConfigIT+0x1a>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <VL53L5CX_ConfigIT+0x22>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003652:	f06f 0301 	mvn.w	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e09f      	b.n	800379a <VL53L5CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L5CX_IT_DEFAULT)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2bff      	cmp	r3, #255	; 0xff
 8003660:	d113      	bne.n	800368a <VL53L5CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3318      	adds	r3, #24
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fbb5 	bl	8002dd8 <vl53l5cx_set_detection_thresholds_enable>
 800366e:	4603      	mov	r3, r0
 8003670:	461a      	mov	r2, r3
 8003672:	7abb      	ldrb	r3, [r7, #10]
 8003674:	4313      	orrs	r3, r2
 8003676:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 8003678:	7abb      	ldrb	r3, [r7, #10]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <VL53L5CX_ConfigIT+0x4c>
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e000      	b.n	8003686 <VL53L5CX_ConfigIT+0x4e>
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e087      	b.n	800379a <VL53L5CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l5cx_get_resolution(&pObj->Dev, &res);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	3318      	adds	r3, #24
 800368e:	f107 0209 	add.w	r2, r7, #9
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff f8a5 	bl	80027e4 <vl53l5cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 800369a:	2300      	movs	r3, #0
 800369c:	72fb      	strb	r3, [r7, #11]
 800369e:	e044      	b.n	800372a <VL53L5CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 80036a0:	7afa      	ldrb	r2, [r7, #11]
 80036a2:	4940      	ldr	r1, [pc, #256]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 80036a4:	4613      	mov	r3, r2
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	330a      	adds	r3, #10
 80036b0:	7afa      	ldrb	r2, [r7, #11]
 80036b2:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L5CX_DISTANCE_MM;
 80036b4:	7afa      	ldrb	r2, [r7, #11]
 80036b6:	493b      	ldr	r1, [pc, #236]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3308      	adds	r3, #8
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	7afa      	ldrb	r2, [r7, #11]
 80036ce:	b2d8      	uxtb	r0, r3
 80036d0:	4934      	ldr	r1, [pc, #208]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 80036d2:	4613      	mov	r3, r2
 80036d4:	005b      	lsls	r3, r3, #1
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	3309      	adds	r3, #9
 80036de:	4602      	mov	r2, r0
 80036e0:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L5CX_OPERATION_NONE;
 80036e2:	7afa      	ldrb	r2, [r7, #11]
 80036e4:	492f      	ldr	r1, [pc, #188]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	330b      	adds	r3, #11
 80036f2:	2200      	movs	r2, #0
 80036f4:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	7afa      	ldrb	r2, [r7, #11]
 80036fc:	4618      	mov	r0, r3
 80036fe:	4929      	ldr	r1, [pc, #164]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	7afa      	ldrb	r2, [r7, #11]
 8003712:	4618      	mov	r0, r3
 8003714:	4923      	ldr	r1, [pc, #140]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3304      	adds	r3, #4
 8003722:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	3301      	adds	r3, #1
 8003728:	72fb      	strb	r3, [r7, #11]
 800372a:	7a7b      	ldrb	r3, [r7, #9]
 800372c:	7afa      	ldrb	r2, [r7, #11]
 800372e:	429a      	cmp	r2, r3
 8003730:	d3b6      	bcc.n	80036a0 <VL53L5CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L5CX_LAST_THRESHOLD;
 8003732:	7afa      	ldrb	r2, [r7, #11]
 8003734:	491b      	ldr	r1, [pc, #108]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 8003736:	4613      	mov	r3, r2
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	330a      	adds	r3, #10
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	7afa      	ldrb	r2, [r7, #11]
 8003746:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800374a:	b2d8      	uxtb	r0, r3
 800374c:	4915      	ldr	r1, [pc, #84]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	330a      	adds	r3, #10
 800375a:	4602      	mov	r2, r0
 800375c:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l5cx_set_detection_thresholds(&pObj->Dev, thresholds);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3318      	adds	r3, #24
 8003762:	4910      	ldr	r1, [pc, #64]	; (80037a4 <VL53L5CX_ConfigIT+0x16c>)
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fb7d 	bl	8002e64 <vl53l5cx_set_detection_thresholds>
 800376a:	4603      	mov	r3, r0
 800376c:	461a      	mov	r2, r3
 800376e:	7abb      	ldrb	r3, [r7, #10]
 8003770:	4313      	orrs	r3, r2
 8003772:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3318      	adds	r3, #24
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff fb2c 	bl	8002dd8 <vl53l5cx_set_detection_thresholds_enable>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	7abb      	ldrb	r3, [r7, #10]
 8003786:	4313      	orrs	r3, r2
 8003788:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 800378a:	7abb      	ldrb	r3, [r7, #10]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <VL53L5CX_ConfigIT+0x15e>
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	e000      	b.n	8003798 <VL53L5CX_ConfigIT+0x160>
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800379a:	68fb      	ldr	r3, [r7, #12]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000128 	.word	0x20000128

080037a8 <VL53L5CX_GetDistance>:
  * @param pObj    vl53l5cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetDistance(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <VL53L5CX_GetDistance+0x16>
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <VL53L5CX_GetDistance+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80037be:	f06f 0301 	mvn.w	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e019      	b.n	80037fa <VL53L5CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d103      	bne.n	80037d8 <VL53L5CX_GetDistance+0x30>
  {
    ret = VL53L5CX_ERROR;
 80037d0:	f04f 33ff 	mov.w	r3, #4294967295
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e010      	b.n	80037fa <VL53L5CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 394e 	ldrb.w	r3, [r3, #2382]	; 0x94e
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d106      	bne.n	80037f0 <VL53L5CX_GetDistance+0x48>
    {
      ret = vl53l5cx_poll_for_measurement(pObj, V53L5CX_POLL_TIMEOUT);
 80037e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f93a 	bl	8003a60 <vl53l5cx_poll_for_measurement>
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	e004      	b.n	80037fa <VL53L5CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l5cx_poll_for_measurement(pObj, 0U);
 80037f0:	2100      	movs	r1, #0
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f934 	bl	8003a60 <vl53l5cx_poll_for_measurement>
 80037f8:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L5CX_OK)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d104      	bne.n	800380a <VL53L5CX_GetDistance+0x62>
  {
    ret = vl53l5cx_get_result(pObj, pResult);
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f95f 	bl	8003ac6 <vl53l5cx_get_result>
 8003808:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800380a:	68fb      	ldr	r3, [r7, #12]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <VL53L5CX_Start>:
  * @param pObj    vl53l5cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Start(VL53L5CX_Object_t *pObj, uint32_t Mode)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d103      	bne.n	800382c <VL53L5CX_Start+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003824:	f06f 0301 	mvn.w	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e04c      	b.n	80038c6 <VL53L5CX_Start+0xb2>
  }
  else if (vl53l5cx_start_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3318      	adds	r3, #24
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fb71 	bl	8001f18 <vl53l5cx_start_ranging>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d141      	bne.n	80038c0 <VL53L5CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L5CX_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	3b01      	subs	r3, #1
 800384c:	2b03      	cmp	r3, #3
 800384e:	d82f      	bhi.n	80038b0 <VL53L5CX_Start+0x9c>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <VL53L5CX_Start+0x44>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003869 	.word	0x08003869
 800385c:	0800387b 	.word	0x0800387b
 8003860:	0800388d 	.word	0x0800388d
 8003864:	0800389f 	.word	0x0800389f
    {
      case VL53L5CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 8003878:	e025      	b.n	80038c6 <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 1U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800388a:	e01c      	b.n	80038c6 <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 800389c:	e013      	b.n	80038c6 <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 294f 	strb.w	r2, [r3, #2383]	; 0x94f
        pObj->IsBlocking = 0U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 294e 	strb.w	r2, [r3, #2382]	; 0x94e
        break;
 80038ae:	e00a      	b.n	80038c6 <VL53L5CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
        ret = VL53L5CX_INVALID_PARAM;
 80038b8:	f06f 0301 	mvn.w	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
        break;
 80038be:	e002      	b.n	80038c6 <VL53L5CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L5CX_ERROR;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80038c6:	68fb      	ldr	r3, [r7, #12]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <VL53L5CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Stop(VL53L5CX_Object_t *pObj)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <VL53L5CX_Stop+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80038de:	f06f 0301 	mvn.w	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e01a      	b.n	800391c <VL53L5CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 394d 	ldrb.w	r3, [r3, #2381]	; 0x94d
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <VL53L5CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L5CX_ERROR;
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	e011      	b.n	800391c <VL53L5CX_Stop+0x4c>
  }
  else if (vl53l5cx_stop_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3318      	adds	r3, #24
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fc7f 	bl	8002200 <vl53l5cx_stop_ranging>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d106      	bne.n	8003916 <VL53L5CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 294d 	strb.w	r2, [r3, #2381]	; 0x94d
    ret = VL53L5CX_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e002      	b.n	800391c <VL53L5CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L5CX_ERROR;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <VL53L5CX_SetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param Address     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetAddress(VL53L5CX_Object_t *pObj, uint32_t Address)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <VL53L5CX_SetAddress+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003936:	f06f 0301 	mvn.w	r3, #1
 800393a:	60fb      	str	r3, [r7, #12]
 800393c:	e016      	b.n	800396c <VL53L5CX_SetAddress+0x46>
  }
  else if (vl53l5cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L5CX_STATUS_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3318      	adds	r3, #24
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	b292      	uxth	r2, r2
 8003948:	4611      	mov	r1, r2
 800394a:	4618      	mov	r0, r3
 800394c:	f7fe f9ec 	bl	8001d28 <vl53l5cx_set_i2c_address>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <VL53L5CX_SetAddress+0x38>
  {
    ret = VL53L5CX_ERROR;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
 800395a:	60fb      	str	r3, [r7, #12]
 800395c:	e006      	b.n	800396c <VL53L5CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2db      	uxtb	r3, r3
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	811a      	strh	r2, [r3, #8]
    ret = VL53L5CX_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800396c:	68fb      	ldr	r3, [r7, #12]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <VL53L5CX_GetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetAddress(VL53L5CX_Object_t *pObj, uint32_t *pAddress)
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <VL53L5CX_GetAddress+0x16>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d103      	bne.n	8003994 <VL53L5CX_GetAddress+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800398c:	f06f 0301 	mvn.w	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e006      	b.n	80039a2 <VL53L5CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	891b      	ldrh	r3, [r3, #8]
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80039a2:	68fb      	ldr	r3, [r7, #12]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <VL53L5CX_SetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetPowerMode(VL53L5CX_Object_t *pObj, uint32_t PowerMode)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d103      	bne.n	80039c8 <VL53L5CX_SetPowerMode+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80039c0:	f06f 0301 	mvn.w	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e01a      	b.n	80039fe <VL53L5CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L5CX_POWER_MODE_SLEEP) &&
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d006      	beq.n	80039dc <VL53L5CX_SetPowerMode+0x2c>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d003      	beq.n	80039dc <VL53L5CX_SetPowerMode+0x2c>
           (PowerMode != VL53L5CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L5CX_INVALID_PARAM;
 80039d4:	f06f 0301 	mvn.w	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	e010      	b.n	80039fe <VL53L5CX_SetPowerMode+0x4e>
  }
  else if (vl53l5cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L5CX_STATUS_OK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3318      	adds	r3, #24
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe fa17 	bl	8001e1a <vl53l5cx_set_power_mode>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <VL53L5CX_SetPowerMode+0x4a>
  {
    ret = VL53L5CX_ERROR;
 80039f2:	f04f 33ff 	mov.w	r3, #4294967295
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	e001      	b.n	80039fe <VL53L5CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L5CX_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80039fe:	68fb      	ldr	r3, [r7, #12]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <VL53L5CX_GetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetPowerMode(VL53L5CX_Object_t *pObj, uint32_t *pPowerMode)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <VL53L5CX_GetPowerMode+0x16>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <VL53L5CX_GetPowerMode+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003a1e:	f06f 0301 	mvn.w	r3, #1
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e017      	b.n	8003a56 <VL53L5CX_GetPowerMode+0x4e>
  }
  else if (vl53l5cx_get_power_mode(&pObj->Dev, &powermode) != VL53L5CX_STATUS_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3318      	adds	r3, #24
 8003a2a:	f107 020b 	add.w	r2, r7, #11
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe f9af 	bl	8001d94 <vl53l5cx_get_power_mode>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d006      	beq.n	8003a4a <VL53L5CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_ERROR;
 8003a42:	f04f 33ff 	mov.w	r3, #4294967295
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	e005      	b.n	8003a56 <VL53L5CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 8003a4a:	7afb      	ldrb	r3, [r7, #11]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a56:	68fb      	ldr	r3, [r7, #12]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <vl53l5cx_poll_for_measurement>:

/** @defgroup VL53L5CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l5cx_poll_for_measurement(VL53L5CX_Object_t *pObj, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <vl53l5cx_poll_for_measurement+0x1c>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003a74:	f06f 0301 	mvn.w	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e01f      	b.n	8003abc <vl53l5cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L5CX_TIMEOUT;
 8003a7c:	f06f 0302 	mvn.w	r3, #2
 8003a80:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	4798      	blx	r3
 8003a88:	4603      	mov	r3, r0
 8003a8a:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l5cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3318      	adds	r3, #24
 8003a90:	f107 020f 	add.w	r2, r7, #15
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fc7d 	bl	8002396 <vl53l5cx_check_data_ready>

      if (NewDataReady == 1U)
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <vl53l5cx_poll_for_measurement+0x48>
      {
        ret = VL53L5CX_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
        break;
 8003aa6:	e009      	b.n	8003abc <vl53l5cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	4798      	blx	r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d8e7      	bhi.n	8003a8c <vl53l5cx_poll_for_measurement+0x2c>

  }

  return ret;
 8003abc:	697b      	ldr	r3, [r7, #20]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <vl53l5cx_get_result>:

static int32_t vl53l5cx_get_result(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	f5ad 7d79 	sub.w	sp, sp, #996	; 0x3e4
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ad2:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003ad6:	6018      	str	r0, [r3, #0]
 8003ad8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003adc:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003ae0:	6019      	str	r1, [r3, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8003ae2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ae6:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d006      	beq.n	8003afe <vl53l5cx_get_result+0x38>
 8003af0:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003af4:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <vl53l5cx_get_result+0x42>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003afe:	f06f 0301 	mvn.w	r3, #1
 8003b02:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003b06:	e138      	b.n	8003d7a <vl53l5cx_get_result+0x2b4>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 8003b08:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003b0c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	3318      	adds	r3, #24
 8003b14:	f507 7276 	add.w	r2, r7, #984	; 0x3d8
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fe62 	bl	80027e4 <vl53l5cx_get_resolution>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <vl53l5cx_get_result+0x6a>
  {
    ret = VL53L5CX_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003b2e:	e124      	b.n	8003d7a <vl53l5cx_get_result+0x2b4>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 8003b30:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003b34:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3318      	adds	r3, #24
 8003b3c:	f107 0208 	add.w	r2, r7, #8
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe fc78 	bl	8002438 <vl53l5cx_get_ranging_data>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <vl53l5cx_get_result+0x92>
  {
    ret = VL53L5CX_ERROR;
 8003b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b52:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8003b56:	e110      	b.n	8003d7a <vl53l5cx_get_result+0x2b4>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8003b58:	f897 33d8 	ldrb.w	r3, [r7, #984]	; 0x3d8
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003b62:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
 8003b70:	e0f9      	b.n	8003d66 <vl53l5cx_get_result+0x2a0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8003b72:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003b76:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003b7a:	f507 7178 	add.w	r1, r7, #992	; 0x3e0
 8003b7e:	f5a1 7176 	sub.w	r1, r1, #984	; 0x3d8
 8003b82:	440b      	add	r3, r1
 8003b84:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 8003b88:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003b8c:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003b90:	6819      	ldr	r1, [r3, #0]
 8003b92:	4613      	mov	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 33da 	strb.w	r3, [r7, #986]	; 0x3da
 8003ba8:	e0ca      	b.n	8003d40 <vl53l5cx_get_result+0x27a>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003baa:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003bae:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003bb8:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003bbc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003bc8:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003bcc:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003bd0:	461c      	mov	r4, r3
 8003bd2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003bd6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	4403      	add	r3, r0
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003bea:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003bee:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d120      	bne.n	8003c3e <vl53l5cx_get_result+0x178>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8003bfc:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003c00:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003c04:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c12:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003c16:	ee07 3a90 	vmov	s15, r3
 8003c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1e:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003c22:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4403      	add	r3, r0
 8003c30:	3302      	adds	r3, #2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	3308      	adds	r3, #8
 8003c38:	edc3 7a00 	vstr	s15, [r3]
 8003c3c:	e013      	b.n	8003c66 <vl53l5cx_get_result+0x1a0>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8003c3e:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c42:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003c46:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003c4a:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	4403      	add	r3, r0
 8003c58:	3302      	adds	r3, #2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3308      	adds	r3, #8
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003c66:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003c6a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d124      	bne.n	8003cc2 <vl53l5cx_get_result+0x1fc>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003c78:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c7c:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003c80:	4413      	add	r3, r2
 8003c82:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003c86:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003c8a:	3350      	adds	r3, #80	; 0x50
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003c92:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003c96:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8003ca2:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003ca6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003caa:	6819      	ldr	r1, [r3, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4403      	add	r3, r0
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	3304      	adds	r3, #4
 8003cbc:	edc3 7a00 	vstr	s15, [r3]
 8003cc0:	e013      	b.n	8003cea <vl53l5cx_get_result+0x224>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8003cc2:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003cc6:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003cca:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003cce:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	4403      	add	r3, r0
 8003cdc:	3304      	adds	r3, #4
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003cea:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003cee:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003cf8:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 8003d02:	f887 33d9 	strb.w	r3, [r7, #985]	; 0x3d9
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status(target_status);
 8003d06:	f897 33d9 	ldrb.w	r3, [r7, #985]	; 0x3d9
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f83c 	bl	8003d88 <vl53l5cx_map_target_status>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003d16:	f897 03da 	ldrb.w	r0, [r7, #986]	; 0x3da
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8003d20:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8003d24:	6819      	ldr	r1, [r3, #0]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	4403      	add	r3, r0
 8003d2e:	3302      	adds	r3, #2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8003d36:	f897 33da 	ldrb.w	r3, [r7, #986]	; 0x3da
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	f887 33da 	strb.w	r3, [r7, #986]	; 0x3da
 8003d40:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003d44:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8003d48:	f5a2 7276 	sub.w	r2, r2, #984	; 0x3d8
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8003d52:	f897 23da 	ldrb.w	r2, [r7, #986]	; 0x3da
 8003d56:	429a      	cmp	r2, r3
 8003d58:	f4ff af27 	bcc.w	8003baa <vl53l5cx_get_result+0xe4>
    for (i = 0; i < resolution; i++)
 8003d5c:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8003d60:	3301      	adds	r3, #1
 8003d62:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
 8003d66:	f897 33d8 	ldrb.w	r3, [r7, #984]	; 0x3d8
 8003d6a:	f897 23db 	ldrb.w	r2, [r7, #987]	; 0x3db
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	f4ff aeff 	bcc.w	8003b72 <vl53l5cx_get_result+0xac>
      }
    }

    ret = VL53L5CX_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
  }

  return ret;
 8003d7a:	f8d7 33dc 	ldr.w	r3, [r7, #988]	; 0x3dc
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f507 7779 	add.w	r7, r7, #996	; 0x3e4
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd90      	pop	{r4, r7, pc}

08003d88 <vl53l5cx_map_target_status>:

static uint8_t vl53l5cx_map_target_status(uint8_t status)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	4603      	mov	r3, r0
 8003d90:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	d002      	beq.n	8003d9e <vl53l5cx_map_target_status+0x16>
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	d102      	bne.n	8003da4 <vl53l5cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e007      	b.n	8003db4 <vl53l5cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d102      	bne.n	8003db0 <vl53l5cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8003daa:	23ff      	movs	r3, #255	; 0xff
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e001      	b.n	8003db4 <vl53l5cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003dd2:	79fb      	ldrb	r3, [r7, #7]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d903      	bls.n	8003de0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003dd8:	f06f 0301 	mvn.w	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e025      	b.n	8003e2c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	79fa      	ldrb	r2, [r7, #7]
 8003de4:	4914      	ldr	r1, [pc, #80]	; (8003e38 <BSP_COM_Init+0x74>)
 8003de6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003dea:	4814      	ldr	r0, [pc, #80]	; (8003e3c <BSP_COM_Init+0x78>)
 8003dec:	4613      	mov	r3, r2
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4403      	add	r3, r0
 8003df6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003df8:	79fa      	ldrb	r2, [r7, #7]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4a0e      	ldr	r2, [pc, #56]	; (8003e3c <BSP_COM_Init+0x78>)
 8003e04:	4413      	add	r3, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f864 	bl	8003ed4 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003e0c:	79fa      	ldrb	r2, [r7, #7]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <BSP_COM_Init+0x78>)
 8003e18:	4413      	add	r3, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 f810 	bl	8003e40 <MX_USART1_UART_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e26:	f06f 0303 	mvn.w	r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000003c 	.word	0x2000003c
 8003e3c:	20000428 	.word	0x20000428

08003e40 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <MX_USART1_UART_Init+0x58>)
 8003e50:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e58:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	220c      	movs	r2, #12
 8003e70:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f002 f9c4 	bl	800620c <HAL_UART_Init>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40011000 	.word	0x40011000

08003e9c <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <__io_putchar+0x30>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <__io_putchar+0x34>)
 8003eb4:	1898      	adds	r0, r3, r2
 8003eb6:	1d39      	adds	r1, r7, #4
 8003eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f002 f9fc 	bl	80062ba <HAL_UART_Transmit>
  return ch;
 8003ec2:	687b      	ldr	r3, [r7, #4]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	2000046c 	.word	0x2000046c
 8003ed0:	20000428 	.word	0x20000428

08003ed4 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003edc:	2300      	movs	r3, #0
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	4b23      	ldr	r3, [pc, #140]	; (8003f70 <USART1_MspInit+0x9c>)
 8003ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee4:	4a22      	ldr	r2, [pc, #136]	; (8003f70 <USART1_MspInit+0x9c>)
 8003ee6:	f043 0310 	orr.w	r3, r3, #16
 8003eea:	6453      	str	r3, [r2, #68]	; 0x44
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <USART1_MspInit+0x9c>)
 8003eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef0:	f003 0310 	and.w	r3, r3, #16
 8003ef4:	613b      	str	r3, [r7, #16]
 8003ef6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <USART1_MspInit+0x9c>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <USART1_MspInit+0x9c>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6313      	str	r3, [r2, #48]	; 0x30
 8003f08:	4b19      	ldr	r3, [pc, #100]	; (8003f70 <USART1_MspInit+0x9c>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8003f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8003f26:	2307      	movs	r3, #7
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8003f2a:	f107 0314 	add.w	r3, r7, #20
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4810      	ldr	r0, [pc, #64]	; (8003f74 <USART1_MspInit+0xa0>)
 8003f32:	f000 fa5b 	bl	80043ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8003f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8003f48:	2307      	movs	r3, #7
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	4808      	ldr	r0, [pc, #32]	; (8003f74 <USART1_MspInit+0xa0>)
 8003f54:	f000 fa4a 	bl	80043ec <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	2025      	movs	r0, #37	; 0x25
 8003f5e:	f000 f97c 	bl	800425a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003f62:	2025      	movs	r0, #37	; 0x25
 8003f64:	f000 f995 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8003f68:	bf00      	nop
 8003f6a:	3728      	adds	r7, #40	; 0x28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40023800 	.word	0x40023800
 8003f74:	40020000 	.word	0x40020000

08003f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f7c:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <HAL_Init+0x40>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0d      	ldr	r2, [pc, #52]	; (8003fb8 <HAL_Init+0x40>)
 8003f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_Init+0x40>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0a      	ldr	r2, [pc, #40]	; (8003fb8 <HAL_Init+0x40>)
 8003f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f94:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <HAL_Init+0x40>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a07      	ldr	r2, [pc, #28]	; (8003fb8 <HAL_Init+0x40>)
 8003f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa0:	2003      	movs	r0, #3
 8003fa2:	f000 f94f 	bl	8004244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fa6:	200f      	movs	r0, #15
 8003fa8:	f000 f808 	bl	8003fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fac:	f7fc fd80 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	40023c00 	.word	0x40023c00

08003fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_InitTick+0x54>)
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_InitTick+0x58>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	4619      	mov	r1, r3
 8003fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 f967 	bl	80042ae <HAL_SYSTICK_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e00e      	b.n	8004008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d80a      	bhi.n	8004006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	f000 f92f 	bl	800425a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ffc:	4a06      	ldr	r2, [pc, #24]	; (8004018 <HAL_InitTick+0x5c>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	e000      	b.n	8004008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
}
 8004008:	4618      	mov	r0, r3
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000000 	.word	0x20000000
 8004014:	20000044 	.word	0x20000044
 8004018:	20000040 	.word	0x20000040

0800401c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_IncTick+0x20>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_IncTick+0x24>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4413      	add	r3, r2
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <HAL_IncTick+0x24>)
 800402e:	6013      	str	r3, [r2, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000044 	.word	0x20000044
 8004040:	20000470 	.word	0x20000470

08004044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return uwTick;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_GetTick+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000470 	.word	0x20000470

0800405c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004064:	f7ff ffee 	bl	8004044 <HAL_GetTick>
 8004068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d005      	beq.n	8004082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_Delay+0x44>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004082:	bf00      	nop
 8004084:	f7ff ffde 	bl	8004044 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d8f7      	bhi.n	8004084 <HAL_Delay+0x28>
  {
  }
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000044 	.word	0x20000044

080040a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c0:	4013      	ands	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <__NVIC_GetPriorityGrouping+0x18>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 0307 	and.w	r3, r3, #7
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	db0b      	blt.n	8004132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <__NVIC_EnableIRQ+0x38>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2001      	movs	r0, #1
 800412a:	fa00 f202 	lsl.w	r2, r0, r2
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000e100 	.word	0xe000e100

08004144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	2b00      	cmp	r3, #0
 8004156:	db0a      	blt.n	800416e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	490c      	ldr	r1, [pc, #48]	; (8004190 <__NVIC_SetPriority+0x4c>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	440b      	add	r3, r1
 8004168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800416c:	e00a      	b.n	8004184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4908      	ldr	r1, [pc, #32]	; (8004194 <__NVIC_SetPriority+0x50>)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3b04      	subs	r3, #4
 800417c:	0112      	lsls	r2, r2, #4
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	440b      	add	r3, r1
 8004182:	761a      	strb	r2, [r3, #24]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000e100 	.word	0xe000e100
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	bf28      	it	cs
 80041b6:	2304      	movcs	r3, #4
 80041b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3304      	adds	r3, #4
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d902      	bls.n	80041c8 <NVIC_EncodePriority+0x30>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3b03      	subs	r3, #3
 80041c6:	e000      	b.n	80041ca <NVIC_EncodePriority+0x32>
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041cc:	f04f 32ff 	mov.w	r2, #4294967295
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	401a      	ands	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	43d9      	mvns	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	4313      	orrs	r3, r2
         );
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004210:	d301      	bcc.n	8004216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004212:	2301      	movs	r3, #1
 8004214:	e00f      	b.n	8004236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <SysTick_Config+0x40>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800421e:	210f      	movs	r1, #15
 8004220:	f04f 30ff 	mov.w	r0, #4294967295
 8004224:	f7ff ff8e 	bl	8004144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <SysTick_Config+0x40>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800422e:	4b04      	ldr	r3, [pc, #16]	; (8004240 <SysTick_Config+0x40>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010

08004244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff29 	bl	80040a4 <__NVIC_SetPriorityGrouping>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800426c:	f7ff ff3e 	bl	80040ec <__NVIC_GetPriorityGrouping>
 8004270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff ff8e 	bl	8004198 <NVIC_EncodePriority>
 800427c:	4602      	mov	r2, r0
 800427e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff5d 	bl	8004144 <__NVIC_SetPriority>
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800429c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff31 	bl	8004108 <__NVIC_EnableIRQ>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffa2 	bl	8004200 <SysTick_Config>
 80042bc:	4603      	mov	r3, r0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80042d4:	f7ff feb6 	bl	8004044 <HAL_GetTick>
 80042d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d008      	beq.n	80042f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2280      	movs	r2, #128	; 0x80
 80042ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e052      	b.n	800439e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0216 	bic.w	r2, r2, #22
 8004306:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695a      	ldr	r2, [r3, #20]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004316:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d103      	bne.n	8004328 <HAL_DMA_Abort+0x62>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004324:	2b00      	cmp	r3, #0
 8004326:	d007      	beq.n	8004338 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0208 	bic.w	r2, r2, #8
 8004336:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 0201 	bic.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004348:	e013      	b.n	8004372 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800434a:	f7ff fe7b 	bl	8004044 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b05      	cmp	r3, #5
 8004356:	d90c      	bls.n	8004372 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2220      	movs	r2, #32
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2203      	movs	r2, #3
 8004362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e015      	b.n	800439e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e4      	bne.n	800434a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	223f      	movs	r2, #63	; 0x3f
 8004386:	409a      	lsls	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d004      	beq.n	80043c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2280      	movs	r2, #128	; 0x80
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e00c      	b.n	80043de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2205      	movs	r2, #5
 80043c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b089      	sub	sp, #36	; 0x24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	e159      	b.n	80046bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004408:	2201      	movs	r2, #1
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	429a      	cmp	r2, r3
 8004422:	f040 8148 	bne.w	80046b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b01      	cmp	r3, #1
 8004430:	d005      	beq.n	800443e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443a:	2b02      	cmp	r3, #2
 800443c:	d130      	bne.n	80044a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4313      	orrs	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004474:	2201      	movs	r2, #1
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	43db      	mvns	r3, r3
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	4013      	ands	r3, r2
 8004482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 0201 	and.w	r2, r3, #1
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4313      	orrs	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f003 0303 	and.w	r3, r3, #3
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d017      	beq.n	80044dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	2203      	movs	r2, #3
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d123      	bne.n	8004530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	08da      	lsrs	r2, r3, #3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	3208      	adds	r2, #8
 80044f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f003 0307 	and.w	r3, r3, #7
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	220f      	movs	r2, #15
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	43db      	mvns	r3, r3
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4013      	ands	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	fa02 f303 	lsl.w	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4313      	orrs	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	08da      	lsrs	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	3208      	adds	r2, #8
 800452a:	69b9      	ldr	r1, [r7, #24]
 800452c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	2203      	movs	r2, #3
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f003 0203 	and.w	r2, r3, #3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	69ba      	ldr	r2, [r7, #24]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80a2 	beq.w	80046b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004572:	2300      	movs	r3, #0
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b57      	ldr	r3, [pc, #348]	; (80046d4 <HAL_GPIO_Init+0x2e8>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4a56      	ldr	r2, [pc, #344]	; (80046d4 <HAL_GPIO_Init+0x2e8>)
 800457c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004580:	6453      	str	r3, [r2, #68]	; 0x44
 8004582:	4b54      	ldr	r3, [pc, #336]	; (80046d4 <HAL_GPIO_Init+0x2e8>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800458e:	4a52      	ldr	r2, [pc, #328]	; (80046d8 <HAL_GPIO_Init+0x2ec>)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	3302      	adds	r3, #2
 8004596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800459a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	220f      	movs	r2, #15
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a49      	ldr	r2, [pc, #292]	; (80046dc <HAL_GPIO_Init+0x2f0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d019      	beq.n	80045ee <HAL_GPIO_Init+0x202>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a48      	ldr	r2, [pc, #288]	; (80046e0 <HAL_GPIO_Init+0x2f4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_GPIO_Init+0x1fe>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a47      	ldr	r2, [pc, #284]	; (80046e4 <HAL_GPIO_Init+0x2f8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d00d      	beq.n	80045e6 <HAL_GPIO_Init+0x1fa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a46      	ldr	r2, [pc, #280]	; (80046e8 <HAL_GPIO_Init+0x2fc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d007      	beq.n	80045e2 <HAL_GPIO_Init+0x1f6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a45      	ldr	r2, [pc, #276]	; (80046ec <HAL_GPIO_Init+0x300>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d101      	bne.n	80045de <HAL_GPIO_Init+0x1f2>
 80045da:	2304      	movs	r3, #4
 80045dc:	e008      	b.n	80045f0 <HAL_GPIO_Init+0x204>
 80045de:	2307      	movs	r3, #7
 80045e0:	e006      	b.n	80045f0 <HAL_GPIO_Init+0x204>
 80045e2:	2303      	movs	r3, #3
 80045e4:	e004      	b.n	80045f0 <HAL_GPIO_Init+0x204>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e002      	b.n	80045f0 <HAL_GPIO_Init+0x204>
 80045ea:	2301      	movs	r3, #1
 80045ec:	e000      	b.n	80045f0 <HAL_GPIO_Init+0x204>
 80045ee:	2300      	movs	r3, #0
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	f002 0203 	and.w	r2, r2, #3
 80045f6:	0092      	lsls	r2, r2, #2
 80045f8:	4093      	lsls	r3, r2
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004600:	4935      	ldr	r1, [pc, #212]	; (80046d8 <HAL_GPIO_Init+0x2ec>)
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	3302      	adds	r3, #2
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800460e:	4b38      	ldr	r3, [pc, #224]	; (80046f0 <HAL_GPIO_Init+0x304>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004632:	4a2f      	ldr	r2, [pc, #188]	; (80046f0 <HAL_GPIO_Init+0x304>)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004638:	4b2d      	ldr	r3, [pc, #180]	; (80046f0 <HAL_GPIO_Init+0x304>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800465c:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <HAL_GPIO_Init+0x304>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004662:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_GPIO_Init+0x304>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	43db      	mvns	r3, r3
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	4013      	ands	r3, r2
 8004670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004686:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_GPIO_Init+0x304>)
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800468c:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_GPIO_Init+0x304>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	43db      	mvns	r3, r3
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4013      	ands	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046b0:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <HAL_GPIO_Init+0x304>)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b0f      	cmp	r3, #15
 80046c0:	f67f aea2 	bls.w	8004408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	3724      	adds	r7, #36	; 0x24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40023800 	.word	0x40023800
 80046d8:	40013800 	.word	0x40013800
 80046dc:	40020000 	.word	0x40020000
 80046e0:	40020400 	.word	0x40020400
 80046e4:	40020800 	.word	0x40020800
 80046e8:	40020c00 	.word	0x40020c00
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40013c00 	.word	0x40013c00

080046f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	e0bb      	b.n	8004888 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004710:	2201      	movs	r2, #1
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4013      	ands	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	429a      	cmp	r2, r3
 8004728:	f040 80ab 	bne.w	8004882 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800472c:	4a5c      	ldr	r2, [pc, #368]	; (80048a0 <HAL_GPIO_DeInit+0x1ac>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	3302      	adds	r3, #2
 8004734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004738:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	220f      	movs	r2, #15
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	4013      	ands	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a54      	ldr	r2, [pc, #336]	; (80048a4 <HAL_GPIO_DeInit+0x1b0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d019      	beq.n	800478a <HAL_GPIO_DeInit+0x96>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a53      	ldr	r2, [pc, #332]	; (80048a8 <HAL_GPIO_DeInit+0x1b4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_GPIO_DeInit+0x92>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a52      	ldr	r2, [pc, #328]	; (80048ac <HAL_GPIO_DeInit+0x1b8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00d      	beq.n	8004782 <HAL_GPIO_DeInit+0x8e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a51      	ldr	r2, [pc, #324]	; (80048b0 <HAL_GPIO_DeInit+0x1bc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <HAL_GPIO_DeInit+0x8a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a50      	ldr	r2, [pc, #320]	; (80048b4 <HAL_GPIO_DeInit+0x1c0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_GPIO_DeInit+0x86>
 8004776:	2304      	movs	r3, #4
 8004778:	e008      	b.n	800478c <HAL_GPIO_DeInit+0x98>
 800477a:	2307      	movs	r3, #7
 800477c:	e006      	b.n	800478c <HAL_GPIO_DeInit+0x98>
 800477e:	2303      	movs	r3, #3
 8004780:	e004      	b.n	800478c <HAL_GPIO_DeInit+0x98>
 8004782:	2302      	movs	r3, #2
 8004784:	e002      	b.n	800478c <HAL_GPIO_DeInit+0x98>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_GPIO_DeInit+0x98>
 800478a:	2300      	movs	r3, #0
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	f002 0203 	and.w	r2, r2, #3
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	4093      	lsls	r3, r2
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	429a      	cmp	r2, r3
 800479a:	d132      	bne.n	8004802 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800479c:	4b46      	ldr	r3, [pc, #280]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	4944      	ldr	r1, [pc, #272]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80047aa:	4b43      	ldr	r3, [pc, #268]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	43db      	mvns	r3, r3
 80047b2:	4941      	ldr	r1, [pc, #260]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80047b8:	4b3f      	ldr	r3, [pc, #252]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	43db      	mvns	r3, r3
 80047c0:	493d      	ldr	r1, [pc, #244]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80047c6:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047c8:	689a      	ldr	r2, [r3, #8]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	493a      	ldr	r1, [pc, #232]	; (80048b8 <HAL_GPIO_DeInit+0x1c4>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	220f      	movs	r2, #15
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047e4:	4a2e      	ldr	r2, [pc, #184]	; (80048a0 <HAL_GPIO_DeInit+0x1ac>)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	3302      	adds	r3, #2
 80047ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	43da      	mvns	r2, r3
 80047f4:	482a      	ldr	r0, [pc, #168]	; (80048a0 <HAL_GPIO_DeInit+0x1ac>)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	400a      	ands	r2, r1
 80047fc:	3302      	adds	r3, #2
 80047fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2103      	movs	r1, #3
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	08da      	lsrs	r2, r3, #3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3208      	adds	r2, #8
 8004820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	220f      	movs	r2, #15
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	08d2      	lsrs	r2, r2, #3
 8004838:	4019      	ands	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2103      	movs	r1, #3
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	401a      	ands	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	2101      	movs	r1, #1
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	fa01 f303 	lsl.w	r3, r1, r3
 8004864:	43db      	mvns	r3, r3
 8004866:	401a      	ands	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	2103      	movs	r1, #3
 8004876:	fa01 f303 	lsl.w	r3, r1, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	401a      	ands	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2b0f      	cmp	r3, #15
 800488c:	f67f af40 	bls.w	8004710 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40013800 	.word	0x40013800
 80048a4:	40020000 	.word	0x40020000
 80048a8:	40020400 	.word	0x40020400
 80048ac:	40020800 	.word	0x40020800
 80048b0:	40020c00 	.word	0x40020c00
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40013c00 	.word	0x40013c00

080048bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
 80048c8:	4613      	mov	r3, r2
 80048ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048cc:	787b      	ldrb	r3, [r7, #1]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048d2:	887a      	ldrh	r2, [r7, #2]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048d8:	e003      	b.n	80048e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048da:	887b      	ldrh	r3, [r7, #2]
 80048dc:	041a      	lsls	r2, r3, #16
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	619a      	str	r2, [r3, #24]
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d006      	beq.n	8004914 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004906:	4a05      	ldr	r2, [pc, #20]	; (800491c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	4618      	mov	r0, r3
 8004910:	f003 f95c 	bl	8007bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40013c00 	.word	0x40013c00

08004920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e12b      	b.n	8004b8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f95d 	bl	8004c06 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2224      	movs	r2, #36	; 0x24
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0201 	bic.w	r2, r2, #1
 8004962:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004972:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004982:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004984:	f001 fc1a 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 8004988:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a81      	ldr	r2, [pc, #516]	; (8004b94 <HAL_I2C_Init+0x274>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d807      	bhi.n	80049a4 <HAL_I2C_Init+0x84>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4a80      	ldr	r2, [pc, #512]	; (8004b98 <HAL_I2C_Init+0x278>)
 8004998:	4293      	cmp	r3, r2
 800499a:	bf94      	ite	ls
 800499c:	2301      	movls	r3, #1
 800499e:	2300      	movhi	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e006      	b.n	80049b2 <HAL_I2C_Init+0x92>
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	4a7d      	ldr	r2, [pc, #500]	; (8004b9c <HAL_I2C_Init+0x27c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	bf94      	ite	ls
 80049ac:	2301      	movls	r3, #1
 80049ae:	2300      	movhi	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e0e7      	b.n	8004b8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	4a78      	ldr	r2, [pc, #480]	; (8004ba0 <HAL_I2C_Init+0x280>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0c9b      	lsrs	r3, r3, #18
 80049c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68ba      	ldr	r2, [r7, #8]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a6a      	ldr	r2, [pc, #424]	; (8004b94 <HAL_I2C_Init+0x274>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d802      	bhi.n	80049f4 <HAL_I2C_Init+0xd4>
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	3301      	adds	r3, #1
 80049f2:	e009      	b.n	8004a08 <HAL_I2C_Init+0xe8>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	4a69      	ldr	r2, [pc, #420]	; (8004ba4 <HAL_I2C_Init+0x284>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	099b      	lsrs	r3, r3, #6
 8004a06:	3301      	adds	r3, #1
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	495c      	ldr	r1, [pc, #368]	; (8004b94 <HAL_I2C_Init+0x274>)
 8004a24:	428b      	cmp	r3, r1
 8004a26:	d819      	bhi.n	8004a5c <HAL_I2C_Init+0x13c>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	1e59      	subs	r1, r3, #1
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a36:	1c59      	adds	r1, r3, #1
 8004a38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_I2C_Init+0x138>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e59      	subs	r1, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a56:	e051      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	e04f      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d111      	bne.n	8004a88 <HAL_I2C_Init+0x168>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	1e58      	subs	r0, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	440b      	add	r3, r1
 8004a72:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a76:	3301      	adds	r3, #1
 8004a78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf0c      	ite	eq
 8004a80:	2301      	moveq	r3, #1
 8004a82:	2300      	movne	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	e012      	b.n	8004aae <HAL_I2C_Init+0x18e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1e58      	subs	r0, r3, #1
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	460b      	mov	r3, r1
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	0099      	lsls	r1, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf0c      	ite	eq
 8004aa8:	2301      	moveq	r3, #1
 8004aaa:	2300      	movne	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_I2C_Init+0x196>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e022      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10e      	bne.n	8004adc <HAL_I2C_Init+0x1bc>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1e58      	subs	r0, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6859      	ldr	r1, [r3, #4]
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	440b      	add	r3, r1
 8004acc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ada:	e00f      	b.n	8004afc <HAL_I2C_Init+0x1dc>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1e58      	subs	r0, r3, #1
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	0099      	lsls	r1, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af2:	3301      	adds	r3, #1
 8004af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	6809      	ldr	r1, [r1, #0]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69da      	ldr	r2, [r3, #28]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6911      	ldr	r1, [r2, #16]
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d2      	ldr	r2, [r2, #12]
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6812      	ldr	r2, [r2, #0]
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	000186a0 	.word	0x000186a0
 8004b98:	001e847f 	.word	0x001e847f
 8004b9c:	003d08ff 	.word	0x003d08ff
 8004ba0:	431bde83 	.word	0x431bde83
 8004ba4:	10624dd3 	.word	0x10624dd3

08004ba8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e021      	b.n	8004bfe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f821 	bl	8004c1a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b088      	sub	sp, #32
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	817b      	strh	r3, [r7, #10]
 8004c42:	460b      	mov	r3, r1
 8004c44:	813b      	strh	r3, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c4a:	f7ff f9fb 	bl	8004044 <HAL_GetTick>
 8004c4e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	f040 80d9 	bne.w	8004e10 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	2319      	movs	r3, #25
 8004c64:	2201      	movs	r2, #1
 8004c66:	496d      	ldr	r1, [pc, #436]	; (8004e1c <HAL_I2C_Mem_Write+0x1ec>)
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 fc99 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0cc      	b.n	8004e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_I2C_Mem_Write+0x56>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e0c5      	b.n	8004e12 <HAL_I2C_Mem_Write+0x1e2>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d007      	beq.n	8004cac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0201 	orr.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2221      	movs	r2, #33	; 0x21
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a3a      	ldr	r2, [r7, #32]
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4a4d      	ldr	r2, [pc, #308]	; (8004e20 <HAL_I2C_Mem_Write+0x1f0>)
 8004cec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cee:	88f8      	ldrh	r0, [r7, #6]
 8004cf0:	893a      	ldrh	r2, [r7, #8]
 8004cf2:	8979      	ldrh	r1, [r7, #10]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	9301      	str	r3, [sp, #4]
 8004cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f000 fad0 	bl	80052a4 <I2C_RequestMemoryWrite>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d052      	beq.n	8004db0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e081      	b.n	8004e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fd1a 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00d      	beq.n	8004d3a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d107      	bne.n	8004d36 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06b      	b.n	8004e12 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d11b      	bne.n	8004db0 <HAL_I2C_Mem_Write+0x180>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1aa      	bne.n	8004d0e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fd06 	bl	80057ce <I2C_WaitOnBTFFlagUntilTimeout>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00d      	beq.n	8004de4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dcc:	2b04      	cmp	r3, #4
 8004dce:	d107      	bne.n	8004de0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e016      	b.n	8004e12 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	00100002 	.word	0x00100002
 8004e20:	ffff0000 	.word	0xffff0000

08004e24 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08c      	sub	sp, #48	; 0x30
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	4608      	mov	r0, r1
 8004e2e:	4611      	mov	r1, r2
 8004e30:	461a      	mov	r2, r3
 8004e32:	4603      	mov	r3, r0
 8004e34:	817b      	strh	r3, [r7, #10]
 8004e36:	460b      	mov	r3, r1
 8004e38:	813b      	strh	r3, [r7, #8]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e3e:	f7ff f901 	bl	8004044 <HAL_GetTick>
 8004e42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b20      	cmp	r3, #32
 8004e4e:	f040 8208 	bne.w	8005262 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	2319      	movs	r3, #25
 8004e58:	2201      	movs	r2, #1
 8004e5a:	497b      	ldr	r1, [pc, #492]	; (8005048 <HAL_I2C_Mem_Read+0x224>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fb9f 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e1fb      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d101      	bne.n	8004e7a <HAL_I2C_Mem_Read+0x56>
 8004e76:	2302      	movs	r3, #2
 8004e78:	e1f4      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d007      	beq.n	8004ea0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2222      	movs	r2, #34	; 0x22
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2240      	movs	r2, #64	; 0x40
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4a5b      	ldr	r2, [pc, #364]	; (800504c <HAL_I2C_Mem_Read+0x228>)
 8004ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ee2:	88f8      	ldrh	r0, [r7, #6]
 8004ee4:	893a      	ldrh	r2, [r7, #8]
 8004ee6:	8979      	ldrh	r1, [r7, #10]
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa6c 	bl	80053d0 <I2C_RequestMemoryRead>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e1b0      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d113      	bne.n	8004f32 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	623b      	str	r3, [r7, #32]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	623b      	str	r3, [r7, #32]
 8004f1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	e184      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d11b      	bne.n	8004f72 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	61fb      	str	r3, [r7, #28]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699b      	ldr	r3, [r3, #24]
 8004f5c:	61fb      	str	r3, [r7, #28]
 8004f5e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	e164      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d11b      	bne.n	8004fb2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f88:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f98:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	e144      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fc8:	e138      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	f200 80f1 	bhi.w	80051b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d123      	bne.n	8005024 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fc35 	bl	8005850 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e139      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005022:	e10b      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005028:	2b02      	cmp	r3, #2
 800502a:	d14e      	bne.n	80050ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2200      	movs	r2, #0
 8005034:	4906      	ldr	r1, [pc, #24]	; (8005050 <HAL_I2C_Mem_Read+0x22c>)
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fab2 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d008      	beq.n	8005054 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e10e      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
 8005046:	bf00      	nop
 8005048:	00100002 	.word	0x00100002
 800504c:	ffff0000 	.word	0xffff0000
 8005050:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005080:	3b01      	subs	r3, #1
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29a      	uxth	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	3b01      	subs	r3, #1
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c8:	e0b8      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	2200      	movs	r2, #0
 80050d2:	4966      	ldr	r1, [pc, #408]	; (800526c <HAL_I2C_Mem_Read+0x448>)
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f000 fa63 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0bf      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	2200      	movs	r2, #0
 800512e:	494f      	ldr	r1, [pc, #316]	; (800526c <HAL_I2C_Mem_Read+0x448>)
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 fa35 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e091      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	691a      	ldr	r2, [r3, #16]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	1c5a      	adds	r2, r3, #1
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051b4:	e042      	b.n	800523c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fb48 	bl	8005850 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e04c      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b04      	cmp	r3, #4
 8005208:	d118      	bne.n	800523c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f aec2 	bne.w	8004fca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3728      	adds	r7, #40	; 0x28
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	00010004 	.word	0x00010004

08005270 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005298:	4618      	mov	r0, r3
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b088      	sub	sp, #32
 80052a8:	af02      	add	r7, sp, #8
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	4608      	mov	r0, r1
 80052ae:	4611      	mov	r1, r2
 80052b0:	461a      	mov	r2, r3
 80052b2:	4603      	mov	r3, r0
 80052b4:	817b      	strh	r3, [r7, #10]
 80052b6:	460b      	mov	r3, r1
 80052b8:	813b      	strh	r3, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 f960 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00d      	beq.n	8005302 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f4:	d103      	bne.n	80052fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e05f      	b.n	80053c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005302:	897b      	ldrh	r3, [r7, #10]
 8005304:	b2db      	uxtb	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005310:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	492d      	ldr	r1, [pc, #180]	; (80053cc <I2C_RequestMemoryWrite+0x128>)
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 f998 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e04c      	b.n	80053c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005328:	2300      	movs	r3, #0
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005340:	6a39      	ldr	r1, [r7, #32]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa02 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00d      	beq.n	800536a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	2b04      	cmp	r3, #4
 8005354:	d107      	bne.n	8005366 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005364:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e02b      	b.n	80053c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d105      	bne.n	800537c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005370:	893b      	ldrh	r3, [r7, #8]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	611a      	str	r2, [r3, #16]
 800537a:	e021      	b.n	80053c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800537c:	893b      	ldrh	r3, [r7, #8]
 800537e:	0a1b      	lsrs	r3, r3, #8
 8005380:	b29b      	uxth	r3, r3
 8005382:	b2da      	uxtb	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	6a39      	ldr	r1, [r7, #32]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 f9dc 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00d      	beq.n	80053b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d107      	bne.n	80053b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e005      	b.n	80053c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b6:	893b      	ldrh	r3, [r7, #8]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	00010002 	.word	0x00010002

080053d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	4608      	mov	r0, r1
 80053da:	4611      	mov	r1, r2
 80053dc:	461a      	mov	r2, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	817b      	strh	r3, [r7, #10]
 80053e2:	460b      	mov	r3, r1
 80053e4:	813b      	strh	r3, [r7, #8]
 80053e6:	4613      	mov	r3, r2
 80053e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005408:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	2200      	movs	r2, #0
 8005412:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f8c2 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005430:	d103      	bne.n	800543a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e0aa      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800543e:	897b      	ldrh	r3, [r7, #10]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461a      	mov	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800544c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	4952      	ldr	r1, [pc, #328]	; (800559c <I2C_RequestMemoryRead+0x1cc>)
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f8fa 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e097      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	6a39      	ldr	r1, [r7, #32]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f964 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	2b04      	cmp	r3, #4
 8005490:	d107      	bne.n	80054a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e076      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d105      	bne.n	80054b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054ac:	893b      	ldrh	r3, [r7, #8]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]
 80054b6:	e021      	b.n	80054fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054b8:	893b      	ldrh	r3, [r7, #8]
 80054ba:	0a1b      	lsrs	r3, r3, #8
 80054bc:	b29b      	uxth	r3, r3
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c8:	6a39      	ldr	r1, [r7, #32]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 f93e 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00d      	beq.n	80054f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b04      	cmp	r3, #4
 80054dc:	d107      	bne.n	80054ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e050      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054f2:	893b      	ldrh	r3, [r7, #8]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fe:	6a39      	ldr	r1, [r7, #32]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 f923 	bl	800574c <I2C_WaitOnTXEFlagUntilTimeout>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00d      	beq.n	8005528 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	2b04      	cmp	r3, #4
 8005512:	d107      	bne.n	8005524 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e035      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005536:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	2200      	movs	r2, #0
 8005540:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f82b 	bl	80055a0 <I2C_WaitOnFlagUntilTimeout>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00d      	beq.n	800556c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d103      	bne.n	8005568 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e013      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	b2da      	uxtb	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	4906      	ldr	r1, [pc, #24]	; (800559c <I2C_RequestMemoryRead+0x1cc>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f863 	bl	800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	00010002 	.word	0x00010002

080055a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055b0:	e025      	b.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d021      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ba:	f7fe fd43 	bl	8004044 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d302      	bcc.n	80055d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d116      	bne.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f043 0220 	orr.w	r2, r3, #32
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e023      	b.n	8005646 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	b2db      	uxtb	r3, r3
 8005604:	2b01      	cmp	r3, #1
 8005606:	d10d      	bne.n	8005624 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	43da      	mvns	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	4013      	ands	r3, r2
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	bf0c      	ite	eq
 800561a:	2301      	moveq	r3, #1
 800561c:	2300      	movne	r3, #0
 800561e:	b2db      	uxtb	r3, r3
 8005620:	461a      	mov	r2, r3
 8005622:	e00c      	b.n	800563e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	43da      	mvns	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4013      	ands	r3, r2
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	461a      	mov	r2, r3
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	429a      	cmp	r2, r3
 8005642:	d0b6      	beq.n	80055b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	60f8      	str	r0, [r7, #12]
 8005656:	60b9      	str	r1, [r7, #8]
 8005658:	607a      	str	r2, [r7, #4]
 800565a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800565c:	e051      	b.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d123      	bne.n	80056b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800567c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005686:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a2:	f043 0204 	orr.w	r2, r3, #4
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e046      	b.n	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d021      	beq.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056be:	f7fe fcc1 	bl	8004044 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d302      	bcc.n	80056d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d116      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e020      	b.n	8005744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	0c1b      	lsrs	r3, r3, #16
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b01      	cmp	r3, #1
 800570a:	d10c      	bne.n	8005726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	43da      	mvns	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4013      	ands	r3, r2
 8005718:	b29b      	uxth	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	bf14      	ite	ne
 800571e:	2301      	movne	r3, #1
 8005720:	2300      	moveq	r3, #0
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e00b      	b.n	800573e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	43da      	mvns	r2, r3
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	4013      	ands	r3, r2
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d18d      	bne.n	800565e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005758:	e02d      	b.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 f8ce 	bl	80058fc <I2C_IsAcknowledgeFailed>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e02d      	b.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005770:	d021      	beq.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fe fc67 	bl	8004044 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e007      	b.n	80057c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d1ca      	bne.n	800575a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b084      	sub	sp, #16
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057da:	e02d      	b.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f88d 	bl	80058fc <I2C_IsAcknowledgeFailed>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e02d      	b.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d021      	beq.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fe fc26 	bl	8004044 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d116      	bne.n	8005838 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e007      	b.n	8005848 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d1ca      	bne.n	80057dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800585c:	e042      	b.n	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b10      	cmp	r3, #16
 800586a:	d119      	bne.n	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0210 	mvn.w	r2, #16
 8005874:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e029      	b.n	80058f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a0:	f7fe fbd0 	bl	8004044 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	68ba      	ldr	r2, [r7, #8]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d302      	bcc.n	80058b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d116      	bne.n	80058e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	f043 0220 	orr.w	r2, r3, #32
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e007      	b.n	80058f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d1b5      	bne.n	800585e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005912:	d11b      	bne.n	800594c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800591c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	f043 0204 	orr.w	r2, r3, #4
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
	...

0800595c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b086      	sub	sp, #24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e267      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d075      	beq.n	8005a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800597a:	4b88      	ldr	r3, [pc, #544]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f003 030c 	and.w	r3, r3, #12
 8005982:	2b04      	cmp	r3, #4
 8005984:	d00c      	beq.n	80059a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005986:	4b85      	ldr	r3, [pc, #532]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800598e:	2b08      	cmp	r3, #8
 8005990:	d112      	bne.n	80059b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005992:	4b82      	ldr	r3, [pc, #520]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800599a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800599e:	d10b      	bne.n	80059b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a0:	4b7e      	ldr	r3, [pc, #504]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d05b      	beq.n	8005a64 <HAL_RCC_OscConfig+0x108>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d157      	bne.n	8005a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e242      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c0:	d106      	bne.n	80059d0 <HAL_RCC_OscConfig+0x74>
 80059c2:	4b76      	ldr	r3, [pc, #472]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a75      	ldr	r2, [pc, #468]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e01d      	b.n	8005a0c <HAL_RCC_OscConfig+0xb0>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCC_OscConfig+0x98>
 80059da:	4b70      	ldr	r3, [pc, #448]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a6f      	ldr	r2, [pc, #444]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	4b6d      	ldr	r3, [pc, #436]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a6c      	ldr	r2, [pc, #432]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e00b      	b.n	8005a0c <HAL_RCC_OscConfig+0xb0>
 80059f4:	4b69      	ldr	r3, [pc, #420]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a68      	ldr	r2, [pc, #416]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 80059fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	4b66      	ldr	r3, [pc, #408]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a65      	ldr	r2, [pc, #404]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d013      	beq.n	8005a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a14:	f7fe fb16 	bl	8004044 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a1c:	f7fe fb12 	bl	8004044 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b64      	cmp	r3, #100	; 0x64
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e207      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a2e:	4b5b      	ldr	r3, [pc, #364]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0xc0>
 8005a3a:	e014      	b.n	8005a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a3c:	f7fe fb02 	bl	8004044 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a44:	f7fe fafe 	bl	8004044 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e1f3      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a56:	4b51      	ldr	r3, [pc, #324]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d1f0      	bne.n	8005a44 <HAL_RCC_OscConfig+0xe8>
 8005a62:	e000      	b.n	8005a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d063      	beq.n	8005b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a72:	4b4a      	ldr	r3, [pc, #296]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a7e:	4b47      	ldr	r3, [pc, #284]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d11c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a8a:	4b44      	ldr	r3, [pc, #272]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d116      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a96:	4b41      	ldr	r3, [pc, #260]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_RCC_OscConfig+0x152>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d001      	beq.n	8005aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e1c7      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aae:	4b3b      	ldr	r3, [pc, #236]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	4937      	ldr	r1, [pc, #220]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac2:	e03a      	b.n	8005b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d020      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005acc:	4b34      	ldr	r3, [pc, #208]	; (8005ba0 <HAL_RCC_OscConfig+0x244>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad2:	f7fe fab7 	bl	8004044 <HAL_GetTick>
 8005ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ada:	f7fe fab3 	bl	8004044 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e1a8      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aec:	4b2b      	ldr	r3, [pc, #172]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0302 	and.w	r3, r3, #2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0f0      	beq.n	8005ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af8:	4b28      	ldr	r3, [pc, #160]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	4925      	ldr	r1, [pc, #148]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]
 8005b0c:	e015      	b.n	8005b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b0e:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <HAL_RCC_OscConfig+0x244>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b14:	f7fe fa96 	bl	8004044 <HAL_GetTick>
 8005b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b1c:	f7fe fa92 	bl	8004044 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e187      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f0      	bne.n	8005b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0308 	and.w	r3, r3, #8
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d036      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d016      	beq.n	8005b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <HAL_RCC_OscConfig+0x248>)
 8005b50:	2201      	movs	r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b54:	f7fe fa76 	bl	8004044 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b5c:	f7fe fa72 	bl	8004044 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e167      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_RCC_OscConfig+0x240>)
 8005b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0f0      	beq.n	8005b5c <HAL_RCC_OscConfig+0x200>
 8005b7a:	e01b      	b.n	8005bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <HAL_RCC_OscConfig+0x248>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b82:	f7fe fa5f 	bl	8004044 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b88:	e00e      	b.n	8005ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b8a:	f7fe fa5b 	bl	8004044 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d907      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e150      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
 8005b9c:	40023800 	.word	0x40023800
 8005ba0:	42470000 	.word	0x42470000
 8005ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ba8:	4b88      	ldr	r3, [pc, #544]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1ea      	bne.n	8005b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0304 	and.w	r3, r3, #4
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8097 	beq.w	8005cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc6:	4b81      	ldr	r3, [pc, #516]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60bb      	str	r3, [r7, #8]
 8005bd6:	4b7d      	ldr	r3, [pc, #500]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	4a7c      	ldr	r2, [pc, #496]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005be0:	6413      	str	r3, [r2, #64]	; 0x40
 8005be2:	4b7a      	ldr	r3, [pc, #488]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b77      	ldr	r3, [pc, #476]	; (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d118      	bne.n	8005c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfe:	4b74      	ldr	r3, [pc, #464]	; (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a73      	ldr	r2, [pc, #460]	; (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0a:	f7fe fa1b 	bl	8004044 <HAL_GetTick>
 8005c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c10:	e008      	b.n	8005c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c12:	f7fe fa17 	bl	8004044 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	d901      	bls.n	8005c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e10c      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c24:	4b6a      	ldr	r3, [pc, #424]	; (8005dd0 <HAL_RCC_OscConfig+0x474>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f0      	beq.n	8005c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d106      	bne.n	8005c46 <HAL_RCC_OscConfig+0x2ea>
 8005c38:	4b64      	ldr	r3, [pc, #400]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3c:	4a63      	ldr	r2, [pc, #396]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	6713      	str	r3, [r2, #112]	; 0x70
 8005c44:	e01c      	b.n	8005c80 <HAL_RCC_OscConfig+0x324>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d10c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x30c>
 8005c4e:	4b5f      	ldr	r3, [pc, #380]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c52:	4a5e      	ldr	r2, [pc, #376]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	6713      	str	r3, [r2, #112]	; 0x70
 8005c5a:	4b5c      	ldr	r3, [pc, #368]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5e:	4a5b      	ldr	r2, [pc, #364]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6713      	str	r3, [r2, #112]	; 0x70
 8005c66:	e00b      	b.n	8005c80 <HAL_RCC_OscConfig+0x324>
 8005c68:	4b58      	ldr	r3, [pc, #352]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c6c:	4a57      	ldr	r2, [pc, #348]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6713      	str	r3, [r2, #112]	; 0x70
 8005c74:	4b55      	ldr	r3, [pc, #340]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c78:	4a54      	ldr	r2, [pc, #336]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005c7a:	f023 0304 	bic.w	r3, r3, #4
 8005c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fe f9dc 	bl	8004044 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fe f9d8 	bl	8004044 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e0cb      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca6:	4b49      	ldr	r3, [pc, #292]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ee      	beq.n	8005c90 <HAL_RCC_OscConfig+0x334>
 8005cb2:	e014      	b.n	8005cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cb4:	f7fe f9c6 	bl	8004044 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cbc:	f7fe f9c2 	bl	8004044 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e0b5      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cd2:	4b3e      	ldr	r3, [pc, #248]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ee      	bne.n	8005cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce4:	4b39      	ldr	r3, [pc, #228]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	4a38      	ldr	r2, [pc, #224]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 80a1 	beq.w	8005e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cfa:	4b34      	ldr	r3, [pc, #208]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	2b08      	cmp	r3, #8
 8005d04:	d05c      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d141      	bne.n	8005d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d0e:	4b31      	ldr	r3, [pc, #196]	; (8005dd4 <HAL_RCC_OscConfig+0x478>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d14:	f7fe f996 	bl	8004044 <HAL_GetTick>
 8005d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d1a:	e008      	b.n	8005d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d1c:	f7fe f992 	bl	8004044 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e087      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2e:	4b27      	ldr	r3, [pc, #156]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f0      	bne.n	8005d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69da      	ldr	r2, [r3, #28]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d48:	019b      	lsls	r3, r3, #6
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	3b01      	subs	r3, #1
 8005d54:	041b      	lsls	r3, r3, #16
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	061b      	lsls	r3, r3, #24
 8005d5e:	491b      	ldr	r1, [pc, #108]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d64:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <HAL_RCC_OscConfig+0x478>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6a:	f7fe f96b 	bl	8004044 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d72:	f7fe f967 	bl	8004044 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e05c      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d84:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0x416>
 8005d90:	e054      	b.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d92:	4b10      	ldr	r3, [pc, #64]	; (8005dd4 <HAL_RCC_OscConfig+0x478>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d98:	f7fe f954 	bl	8004044 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fe f950 	bl	8004044 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e045      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005db2:	4b06      	ldr	r3, [pc, #24]	; (8005dcc <HAL_RCC_OscConfig+0x470>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f0      	bne.n	8005da0 <HAL_RCC_OscConfig+0x444>
 8005dbe:	e03d      	b.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e038      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
 8005dcc:	40023800 	.word	0x40023800
 8005dd0:	40007000 	.word	0x40007000
 8005dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <HAL_RCC_OscConfig+0x4ec>)
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	699b      	ldr	r3, [r3, #24]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d028      	beq.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d121      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d11a      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e08:	4013      	ands	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d111      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	3b01      	subs	r3, #1
 8005e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d107      	bne.n	8005e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d001      	beq.n	8005e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e000      	b.n	8005e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023800 	.word	0x40023800

08005e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0cc      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e60:	4b68      	ldr	r3, [pc, #416]	; (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d90c      	bls.n	8005e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e6e:	4b65      	ldr	r3, [pc, #404]	; (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e76:	4b63      	ldr	r3, [pc, #396]	; (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	683a      	ldr	r2, [r7, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d001      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0b8      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d020      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ea0:	4b59      	ldr	r3, [pc, #356]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4a58      	ldr	r2, [pc, #352]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d005      	beq.n	8005ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005eb8:	4b53      	ldr	r3, [pc, #332]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4a52      	ldr	r2, [pc, #328]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ec4:	4b50      	ldr	r3, [pc, #320]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	494d      	ldr	r1, [pc, #308]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d044      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d107      	bne.n	8005efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eea:	4b47      	ldr	r3, [pc, #284]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d119      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e07f      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d003      	beq.n	8005f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d107      	bne.n	8005f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f0a:	4b3f      	ldr	r3, [pc, #252]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d109      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e06f      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f1a:	4b3b      	ldr	r3, [pc, #236]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e067      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f2a:	4b37      	ldr	r3, [pc, #220]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	f023 0203 	bic.w	r2, r3, #3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	4934      	ldr	r1, [pc, #208]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f3c:	f7fe f882 	bl	8004044 <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	e00a      	b.n	8005f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f44:	f7fe f87e 	bl	8004044 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e04f      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f5a:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 020c 	and.w	r2, r3, #12
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d1eb      	bne.n	8005f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f6c:	4b25      	ldr	r3, [pc, #148]	; (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d20c      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f7a:	4b22      	ldr	r3, [pc, #136]	; (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f82:	4b20      	ldr	r3, [pc, #128]	; (8006004 <HAL_RCC_ClockConfig+0x1b8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e032      	b.n	8005ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fa0:	4b19      	ldr	r3, [pc, #100]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	4916      	ldr	r1, [pc, #88]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d009      	beq.n	8005fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	490e      	ldr	r1, [pc, #56]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fd2:	f000 f821 	bl	8006018 <HAL_RCC_GetSysClockFreq>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	4b0b      	ldr	r3, [pc, #44]	; (8006008 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	490a      	ldr	r1, [pc, #40]	; (800600c <HAL_RCC_ClockConfig+0x1c0>)
 8005fe4:	5ccb      	ldrb	r3, [r1, r3]
 8005fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8005fea:	4a09      	ldr	r2, [pc, #36]	; (8006010 <HAL_RCC_ClockConfig+0x1c4>)
 8005fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005fee:	4b09      	ldr	r3, [pc, #36]	; (8006014 <HAL_RCC_ClockConfig+0x1c8>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fd ffe2 	bl	8003fbc <HAL_InitTick>

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40023c00 	.word	0x40023c00
 8006008:	40023800 	.word	0x40023800
 800600c:	08009450 	.word	0x08009450
 8006010:	20000000 	.word	0x20000000
 8006014:	20000040 	.word	0x20000040

08006018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800601c:	b090      	sub	sp, #64	; 0x40
 800601e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
 8006024:	2300      	movs	r3, #0
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006028:	2300      	movs	r3, #0
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006030:	4b59      	ldr	r3, [pc, #356]	; (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 030c 	and.w	r3, r3, #12
 8006038:	2b08      	cmp	r3, #8
 800603a:	d00d      	beq.n	8006058 <HAL_RCC_GetSysClockFreq+0x40>
 800603c:	2b08      	cmp	r3, #8
 800603e:	f200 80a1 	bhi.w	8006184 <HAL_RCC_GetSysClockFreq+0x16c>
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <HAL_RCC_GetSysClockFreq+0x34>
 8006046:	2b04      	cmp	r3, #4
 8006048:	d003      	beq.n	8006052 <HAL_RCC_GetSysClockFreq+0x3a>
 800604a:	e09b      	b.n	8006184 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800604c:	4b53      	ldr	r3, [pc, #332]	; (800619c <HAL_RCC_GetSysClockFreq+0x184>)
 800604e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006050:	e09b      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006052:	4b53      	ldr	r3, [pc, #332]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006054:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006056:	e098      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006058:	4b4f      	ldr	r3, [pc, #316]	; (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006062:	4b4d      	ldr	r3, [pc, #308]	; (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d028      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606e:	4b4a      	ldr	r3, [pc, #296]	; (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	099b      	lsrs	r3, r3, #6
 8006074:	2200      	movs	r2, #0
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	627a      	str	r2, [r7, #36]	; 0x24
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006080:	2100      	movs	r1, #0
 8006082:	4b47      	ldr	r3, [pc, #284]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006084:	fb03 f201 	mul.w	r2, r3, r1
 8006088:	2300      	movs	r3, #0
 800608a:	fb00 f303 	mul.w	r3, r0, r3
 800608e:	4413      	add	r3, r2
 8006090:	4a43      	ldr	r2, [pc, #268]	; (80061a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006092:	fba0 1202 	umull	r1, r2, r0, r2
 8006096:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006098:	460a      	mov	r2, r1
 800609a:	62ba      	str	r2, [r7, #40]	; 0x28
 800609c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609e:	4413      	add	r3, r2
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a4:	2200      	movs	r2, #0
 80060a6:	61bb      	str	r3, [r7, #24]
 80060a8:	61fa      	str	r2, [r7, #28]
 80060aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80060b2:	f7fa f8e5 	bl	8000280 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4613      	mov	r3, r2
 80060bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060be:	e053      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c0:	4b35      	ldr	r3, [pc, #212]	; (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	099b      	lsrs	r3, r3, #6
 80060c6:	2200      	movs	r2, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	617a      	str	r2, [r7, #20]
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060d2:	f04f 0b00 	mov.w	fp, #0
 80060d6:	4652      	mov	r2, sl
 80060d8:	465b      	mov	r3, fp
 80060da:	f04f 0000 	mov.w	r0, #0
 80060de:	f04f 0100 	mov.w	r1, #0
 80060e2:	0159      	lsls	r1, r3, #5
 80060e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e8:	0150      	lsls	r0, r2, #5
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	ebb2 080a 	subs.w	r8, r2, sl
 80060f2:	eb63 090b 	sbc.w	r9, r3, fp
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006102:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006106:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800610a:	ebb2 0408 	subs.w	r4, r2, r8
 800610e:	eb63 0509 	sbc.w	r5, r3, r9
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	00eb      	lsls	r3, r5, #3
 800611c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006120:	00e2      	lsls	r2, r4, #3
 8006122:	4614      	mov	r4, r2
 8006124:	461d      	mov	r5, r3
 8006126:	eb14 030a 	adds.w	r3, r4, sl
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	eb45 030b 	adc.w	r3, r5, fp
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	f04f 0300 	mov.w	r3, #0
 800613a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800613e:	4629      	mov	r1, r5
 8006140:	028b      	lsls	r3, r1, #10
 8006142:	4621      	mov	r1, r4
 8006144:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006148:	4621      	mov	r1, r4
 800614a:	028a      	lsls	r2, r1, #10
 800614c:	4610      	mov	r0, r2
 800614e:	4619      	mov	r1, r3
 8006150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006152:	2200      	movs	r2, #0
 8006154:	60bb      	str	r3, [r7, #8]
 8006156:	60fa      	str	r2, [r7, #12]
 8006158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800615c:	f7fa f890 	bl	8000280 <__aeabi_uldivmod>
 8006160:	4602      	mov	r2, r0
 8006162:	460b      	mov	r3, r1
 8006164:	4613      	mov	r3, r2
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCC_GetSysClockFreq+0x180>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	3301      	adds	r3, #1
 8006174:	005b      	lsls	r3, r3, #1
 8006176:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006180:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006182:	e002      	b.n	800618a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <HAL_RCC_GetSysClockFreq+0x184>)
 8006186:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800618a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800618c:	4618      	mov	r0, r3
 800618e:	3740      	adds	r7, #64	; 0x40
 8006190:	46bd      	mov	sp, r7
 8006192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800
 800619c:	00f42400 	.word	0x00f42400
 80061a0:	017d7840 	.word	0x017d7840

080061a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061a4:	b480      	push	{r7}
 80061a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061a8:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061aa:	681b      	ldr	r3, [r3, #0]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000000 	.word	0x20000000

080061bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061c0:	f7ff fff0 	bl	80061a4 <HAL_RCC_GetHCLKFreq>
 80061c4:	4602      	mov	r2, r0
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	0a9b      	lsrs	r3, r3, #10
 80061cc:	f003 0307 	and.w	r3, r3, #7
 80061d0:	4903      	ldr	r1, [pc, #12]	; (80061e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061d2:	5ccb      	ldrb	r3, [r1, r3]
 80061d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061d8:	4618      	mov	r0, r3
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40023800 	.word	0x40023800
 80061e0:	08009460 	.word	0x08009460

080061e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061e8:	f7ff ffdc 	bl	80061a4 <HAL_RCC_GetHCLKFreq>
 80061ec:	4602      	mov	r2, r0
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	0b5b      	lsrs	r3, r3, #13
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	4903      	ldr	r1, [pc, #12]	; (8006208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061fa:	5ccb      	ldrb	r3, [r1, r3]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40023800 	.word	0x40023800
 8006208:	08009460 	.word	0x08009460

0800620c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d101      	bne.n	800621e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e03f      	b.n	800629e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d106      	bne.n	8006238 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f837 	bl	80062a6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2224      	movs	r2, #36	; 0x24
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800624e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 fe27 	bl	8006ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006264:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695a      	ldr	r2, [r3, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006274:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006284:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2220      	movs	r2, #32
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08a      	sub	sp, #40	; 0x28
 80062be:	af02      	add	r7, sp, #8
 80062c0:	60f8      	str	r0, [r7, #12]
 80062c2:	60b9      	str	r1, [r7, #8]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d17c      	bne.n	80063d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_UART_Transmit+0x2c>
 80062e0:	88fb      	ldrh	r3, [r7, #6]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e075      	b.n	80063d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Transmit+0x3e>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e06e      	b.n	80063d6 <HAL_UART_Transmit+0x11c>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2221      	movs	r2, #33	; 0x21
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800630e:	f7fd fe99 	bl	8004044 <HAL_GetTick>
 8006312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006328:	d108      	bne.n	800633c <HAL_UART_Transmit+0x82>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d104      	bne.n	800633c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006332:	2300      	movs	r3, #0
 8006334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	61bb      	str	r3, [r7, #24]
 800633a:	e003      	b.n	8006344 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800634c:	e02a      	b.n	80063a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2200      	movs	r2, #0
 8006356:	2180      	movs	r1, #128	; 0x80
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 fb9b 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e036      	b.n	80063d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800637c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	3302      	adds	r3, #2
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	e007      	b.n	8006396 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3301      	adds	r3, #1
 8006394:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1cf      	bne.n	800634e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	2140      	movs	r1, #64	; 0x40
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fb6b 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e006      	b.n	80063d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e000      	b.n	80063d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063d4:	2302      	movs	r3, #2
  }
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3720      	adds	r7, #32
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b08a      	sub	sp, #40	; 0x28
 80063e2:	af02      	add	r7, sp, #8
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b20      	cmp	r3, #32
 80063fc:	f040 808c 	bne.w	8006518 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_UART_Receive+0x2e>
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e084      	b.n	800651a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UART_Receive+0x40>
 800641a:	2302      	movs	r3, #2
 800641c:	e07d      	b.n	800651a <HAL_UART_Receive+0x13c>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2222      	movs	r2, #34	; 0x22
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800643a:	f7fd fe03 	bl	8004044 <HAL_GetTick>
 800643e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006454:	d108      	bne.n	8006468 <HAL_UART_Receive+0x8a>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d104      	bne.n	8006468 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800645e:	2300      	movs	r3, #0
 8006460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	e003      	b.n	8006470 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800646c:	2300      	movs	r3, #0
 800646e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006478:	e043      	b.n	8006502 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2200      	movs	r2, #0
 8006482:	2120      	movs	r1, #32
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 fb05 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e042      	b.n	800651a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	3302      	adds	r3, #2
 80064b0:	61bb      	str	r3, [r7, #24]
 80064b2:	e01f      	b.n	80064f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d007      	beq.n	80064ce <HAL_UART_Receive+0xf0>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10a      	bne.n	80064dc <HAL_UART_Receive+0xfe>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	e008      	b.n	80064ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064e8:	b2da      	uxtb	r2, r3
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	3301      	adds	r3, #1
 80064f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	3b01      	subs	r3, #1
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1b6      	bne.n	800647a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	e000      	b.n	800651a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006518:	2302      	movs	r3, #2
  }
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b0ba      	sub	sp, #232	; 0xe8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800654a:	2300      	movs	r3, #0
 800654c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006550:	2300      	movs	r3, #0
 8006552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	f003 030f 	and.w	r3, r3, #15
 800655e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800656a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <HAL_UART_IRQHandler+0x66>
 8006576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fbd3 	bl	8006d2e <UART_Receive_IT>
      return;
 8006588:	e256      	b.n	8006a38 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800658a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80de 	beq.w	8006750 <HAL_UART_IRQHandler+0x22c>
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006598:	f003 0301 	and.w	r3, r3, #1
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 80d1 	beq.w	8006750 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00b      	beq.n	80065d2 <HAL_UART_IRQHandler+0xae>
 80065ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ca:	f043 0201 	orr.w	r2, r3, #1
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00b      	beq.n	80065f6 <HAL_UART_IRQHandler+0xd2>
 80065de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	f043 0202 	orr.w	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <HAL_UART_IRQHandler+0xf6>
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f043 0204 	orr.w	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800661a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d011      	beq.n	800664a <HAL_UART_IRQHandler+0x126>
 8006626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d105      	bne.n	800663e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0208 	orr.w	r2, r3, #8
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 81ed 	beq.w	8006a2e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d008      	beq.n	8006672 <HAL_UART_IRQHandler+0x14e>
 8006660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb5e 	bl	8006d2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b40      	cmp	r3, #64	; 0x40
 800667e:	bf0c      	ite	eq
 8006680:	2301      	moveq	r3, #1
 8006682:	2300      	movne	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d103      	bne.n	800669e <HAL_UART_IRQHandler+0x17a>
 8006696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800669a:	2b00      	cmp	r3, #0
 800669c:	d04f      	beq.n	800673e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa66 	bl	8006b70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b40      	cmp	r3, #64	; 0x40
 80066b0:	d141      	bne.n	8006736 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3314      	adds	r3, #20
 80066b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3314      	adds	r3, #20
 80066da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1d9      	bne.n	80066b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	2b00      	cmp	r3, #0
 8006704:	d013      	beq.n	800672e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	4a7d      	ldr	r2, [pc, #500]	; (8006900 <HAL_UART_IRQHandler+0x3dc>)
 800670c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	4618      	mov	r0, r3
 8006714:	f7fd fe47 	bl	80043a6 <HAL_DMA_Abort_IT>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d016      	beq.n	800674c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006728:	4610      	mov	r0, r2
 800672a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672c:	e00e      	b.n	800674c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f99a 	bl	8006a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006734:	e00a      	b.n	800674c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f996 	bl	8006a68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800673c:	e006      	b.n	800674c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f992 	bl	8006a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800674a:	e170      	b.n	8006a2e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800674c:	bf00      	nop
    return;
 800674e:	e16e      	b.n	8006a2e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006754:	2b01      	cmp	r3, #1
 8006756:	f040 814a 	bne.w	80069ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 8143 	beq.w	80069ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 813c 	beq.w	80069ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006776:	2300      	movs	r3, #0
 8006778:	60bb      	str	r3, [r7, #8]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	60bb      	str	r3, [r7, #8]
 800678a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006796:	2b40      	cmp	r3, #64	; 0x40
 8006798:	f040 80b4 	bne.w	8006904 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80067a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8140 	beq.w	8006a32 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067ba:	429a      	cmp	r2, r3
 80067bc:	f080 8139 	bcs.w	8006a32 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d2:	f000 8088 	beq.w	80068e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	330c      	adds	r3, #12
 80067fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006806:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800680e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800681a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1d9      	bne.n	80067d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006832:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3314      	adds	r3, #20
 8006842:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006846:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800684a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800684e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e1      	bne.n	8006822 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800686e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3314      	adds	r3, #20
 800687e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006882:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006884:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006888:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e3      	bne.n	800685e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	330c      	adds	r3, #12
 80068aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b6:	f023 0310 	bic.w	r3, r3, #16
 80068ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	330c      	adds	r3, #12
 80068c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80068c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80068ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068d0:	e841 2300 	strex	r3, r2, [r1]
 80068d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1e3      	bne.n	80068a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7fd fcf0 	bl	80042c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8c0 	bl	8006a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068fc:	e099      	b.n	8006a32 <HAL_UART_IRQHandler+0x50e>
 80068fe:	bf00      	nop
 8006900:	08006c37 	.word	0x08006c37
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800690c:	b29b      	uxth	r3, r3
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006918:	b29b      	uxth	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	f000 808b 	beq.w	8006a36 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8086 	beq.w	8006a36 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800693a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006940:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	330c      	adds	r3, #12
 800694a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800694e:	647a      	str	r2, [r7, #68]	; 0x44
 8006950:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006954:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800695c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e3      	bne.n	800692a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3314      	adds	r3, #20
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	623b      	str	r3, [r7, #32]
   return(result);
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006986:	633a      	str	r2, [r7, #48]	; 0x30
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e3      	bne.n	8006962 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0310 	bic.w	r3, r3, #16
 80069be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	330c      	adds	r3, #12
 80069c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80069cc:	61fa      	str	r2, [r7, #28]
 80069ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	69b9      	ldr	r1, [r7, #24]
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	617b      	str	r3, [r7, #20]
   return(result);
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e3      	bne.n	80069a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f848 	bl	8006a7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069ec:	e023      	b.n	8006a36 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d009      	beq.n	8006a0e <HAL_UART_IRQHandler+0x4ea>
 80069fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f929 	bl	8006c5e <UART_Transmit_IT>
    return;
 8006a0c:	e014      	b.n	8006a38 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00e      	beq.n	8006a38 <HAL_UART_IRQHandler+0x514>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f969 	bl	8006cfe <UART_EndTransmit_IT>
    return;
 8006a2c:	e004      	b.n	8006a38 <HAL_UART_IRQHandler+0x514>
    return;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <HAL_UART_IRQHandler+0x514>
      return;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_UART_IRQHandler+0x514>
      return;
 8006a36:	bf00      	nop
  }
}
 8006a38:	37e8      	adds	r7, #232	; 0xe8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop

08006a40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	460b      	mov	r3, r1
 8006a86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b090      	sub	sp, #64	; 0x40
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa4:	e050      	b.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d04c      	beq.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d007      	beq.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ab4:	f7fd fac6 	bl	8004044 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d241      	bcs.n	8006b48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ae4:	637a      	str	r2, [r7, #52]	; 0x34
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3314      	adds	r3, #20
 8006afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	e853 3f00 	ldrex	r3, [r3]
 8006b06:	613b      	str	r3, [r7, #16]
   return(result);
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3314      	adds	r3, #20
 8006b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b18:	623a      	str	r2, [r7, #32]
 8006b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1c:	69f9      	ldr	r1, [r7, #28]
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	e841 2300 	strex	r3, r2, [r1]
 8006b24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e5      	bne.n	8006af8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2220      	movs	r2, #32
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e00f      	b.n	8006b68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	4013      	ands	r3, r2
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	bf0c      	ite	eq
 8006b58:	2301      	moveq	r3, #1
 8006b5a:	2300      	movne	r3, #0
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d09f      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3740      	adds	r7, #64	; 0x40
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b095      	sub	sp, #84	; 0x54
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	330c      	adds	r3, #12
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b82:	e853 3f00 	ldrex	r3, [r3]
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	330c      	adds	r3, #12
 8006b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b98:	643a      	str	r2, [r7, #64]	; 0x40
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e5      	bne.n	8006b78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	3314      	adds	r3, #20
 8006bb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	f023 0301 	bic.w	r3, r3, #1
 8006bc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3314      	adds	r3, #20
 8006bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e5      	bne.n	8006bac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d119      	bne.n	8006c1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	330c      	adds	r3, #12
 8006bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	e853 3f00 	ldrex	r3, [r3]
 8006bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f023 0310 	bic.w	r3, r3, #16
 8006bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c08:	61ba      	str	r2, [r7, #24]
 8006c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c0c:	6979      	ldr	r1, [r7, #20]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	e841 2300 	strex	r3, r2, [r1]
 8006c14:	613b      	str	r3, [r7, #16]
   return(result);
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e5      	bne.n	8006be8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2220      	movs	r2, #32
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	; 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b084      	sub	sp, #16
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff ff09 	bl	8006a68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c56:	bf00      	nop
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b085      	sub	sp, #20
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b21      	cmp	r3, #33	; 0x21
 8006c70:	d13e      	bne.n	8006cf0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7a:	d114      	bne.n	8006ca6 <UART_Transmit_IT+0x48>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d110      	bne.n	8006ca6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	1c9a      	adds	r2, r3, #2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	621a      	str	r2, [r3, #32]
 8006ca4:	e008      	b.n	8006cb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	1c59      	adds	r1, r3, #1
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6211      	str	r1, [r2, #32]
 8006cb0:	781a      	ldrb	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d10f      	bne.n	8006cec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	e000      	b.n	8006cf2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cf0:	2302      	movs	r3, #2
  }
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68da      	ldr	r2, [r3, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fe8e 	bl	8006a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b08c      	sub	sp, #48	; 0x30
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b22      	cmp	r3, #34	; 0x22
 8006d40:	f040 80ab 	bne.w	8006e9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d4c:	d117      	bne.n	8006d7e <UART_Receive_IT+0x50>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d113      	bne.n	8006d7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	1c9a      	adds	r2, r3, #2
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d7c:	e026      	b.n	8006dcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d90:	d007      	beq.n	8006da2 <UART_Receive_IT+0x74>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <UART_Receive_IT+0x82>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dac:	701a      	strb	r2, [r3, #0]
 8006dae:	e008      	b.n	8006dc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d15a      	bne.n	8006e96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f022 0220 	bic.w	r2, r2, #32
 8006dee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dfe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
 8006e0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d135      	bne.n	8006e8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	613b      	str	r3, [r7, #16]
   return(result);
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f023 0310 	bic.w	r3, r3, #16
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e46:	623a      	str	r2, [r7, #32]
 8006e48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	69f9      	ldr	r1, [r7, #28]
 8006e4c:	6a3a      	ldr	r2, [r7, #32]
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d10a      	bne.n	8006e7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fdf9 	bl	8006a7c <HAL_UARTEx_RxEventCallback>
 8006e8a:	e002      	b.n	8006e92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fde1 	bl	8006a54 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e002      	b.n	8006e9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e9a:	2302      	movs	r3, #2
  }
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3730      	adds	r7, #48	; 0x30
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ea8:	b0c0      	sub	sp, #256	; 0x100
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	68d9      	ldr	r1, [r3, #12]
 8006ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	ea40 0301 	orr.w	r3, r0, r1
 8006ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	431a      	orrs	r2, r3
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006efc:	f021 010c 	bic.w	r1, r1, #12
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f1e:	6999      	ldr	r1, [r3, #24]
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	ea40 0301 	orr.w	r3, r0, r1
 8006f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b8f      	ldr	r3, [pc, #572]	; (8007170 <UART_SetConfig+0x2cc>)
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d005      	beq.n	8006f44 <UART_SetConfig+0xa0>
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b8d      	ldr	r3, [pc, #564]	; (8007174 <UART_SetConfig+0x2d0>)
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d104      	bne.n	8006f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f44:	f7ff f94e 	bl	80061e4 <HAL_RCC_GetPCLK2Freq>
 8006f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f4c:	e003      	b.n	8006f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f4e:	f7ff f935 	bl	80061bc <HAL_RCC_GetPCLK1Freq>
 8006f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f60:	f040 810c 	bne.w	800717c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f76:	4622      	mov	r2, r4
 8006f78:	462b      	mov	r3, r5
 8006f7a:	1891      	adds	r1, r2, r2
 8006f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f7e:	415b      	adcs	r3, r3
 8006f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f86:	4621      	mov	r1, r4
 8006f88:	eb12 0801 	adds.w	r8, r2, r1
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	eb43 0901 	adc.w	r9, r3, r1
 8006f92:	f04f 0200 	mov.w	r2, #0
 8006f96:	f04f 0300 	mov.w	r3, #0
 8006f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fa6:	4690      	mov	r8, r2
 8006fa8:	4699      	mov	r9, r3
 8006faa:	4623      	mov	r3, r4
 8006fac:	eb18 0303 	adds.w	r3, r8, r3
 8006fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fb4:	462b      	mov	r3, r5
 8006fb6:	eb49 0303 	adc.w	r3, r9, r3
 8006fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	18db      	adds	r3, r3, r3
 8006fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fd8:	4613      	mov	r3, r2
 8006fda:	eb42 0303 	adc.w	r3, r2, r3
 8006fde:	657b      	str	r3, [r7, #84]	; 0x54
 8006fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fe8:	f7f9 f94a 	bl	8000280 <__aeabi_uldivmod>
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	4b61      	ldr	r3, [pc, #388]	; (8007178 <UART_SetConfig+0x2d4>)
 8006ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ff6:	095b      	lsrs	r3, r3, #5
 8006ff8:	011c      	lsls	r4, r3, #4
 8006ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800700c:	4642      	mov	r2, r8
 800700e:	464b      	mov	r3, r9
 8007010:	1891      	adds	r1, r2, r2
 8007012:	64b9      	str	r1, [r7, #72]	; 0x48
 8007014:	415b      	adcs	r3, r3
 8007016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800701c:	4641      	mov	r1, r8
 800701e:	eb12 0a01 	adds.w	sl, r2, r1
 8007022:	4649      	mov	r1, r9
 8007024:	eb43 0b01 	adc.w	fp, r3, r1
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800703c:	4692      	mov	sl, r2
 800703e:	469b      	mov	fp, r3
 8007040:	4643      	mov	r3, r8
 8007042:	eb1a 0303 	adds.w	r3, sl, r3
 8007046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800704a:	464b      	mov	r3, r9
 800704c:	eb4b 0303 	adc.w	r3, fp, r3
 8007050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007068:	460b      	mov	r3, r1
 800706a:	18db      	adds	r3, r3, r3
 800706c:	643b      	str	r3, [r7, #64]	; 0x40
 800706e:	4613      	mov	r3, r2
 8007070:	eb42 0303 	adc.w	r3, r2, r3
 8007074:	647b      	str	r3, [r7, #68]	; 0x44
 8007076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800707a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800707e:	f7f9 f8ff 	bl	8000280 <__aeabi_uldivmod>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4611      	mov	r1, r2
 8007088:	4b3b      	ldr	r3, [pc, #236]	; (8007178 <UART_SetConfig+0x2d4>)
 800708a:	fba3 2301 	umull	r2, r3, r3, r1
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	2264      	movs	r2, #100	; 0x64
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	1acb      	subs	r3, r1, r3
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800709e:	4b36      	ldr	r3, [pc, #216]	; (8007178 <UART_SetConfig+0x2d4>)
 80070a0:	fba3 2302 	umull	r2, r3, r3, r2
 80070a4:	095b      	lsrs	r3, r3, #5
 80070a6:	005b      	lsls	r3, r3, #1
 80070a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070ac:	441c      	add	r4, r3
 80070ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	1891      	adds	r1, r2, r2
 80070c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80070c8:	415b      	adcs	r3, r3
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070d0:	4641      	mov	r1, r8
 80070d2:	1851      	adds	r1, r2, r1
 80070d4:	6339      	str	r1, [r7, #48]	; 0x30
 80070d6:	4649      	mov	r1, r9
 80070d8:	414b      	adcs	r3, r1
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070e8:	4659      	mov	r1, fp
 80070ea:	00cb      	lsls	r3, r1, #3
 80070ec:	4651      	mov	r1, sl
 80070ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f2:	4651      	mov	r1, sl
 80070f4:	00ca      	lsls	r2, r1, #3
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	4642      	mov	r2, r8
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007104:	464b      	mov	r3, r9
 8007106:	460a      	mov	r2, r1
 8007108:	eb42 0303 	adc.w	r3, r2, r3
 800710c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800711c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007124:	460b      	mov	r3, r1
 8007126:	18db      	adds	r3, r3, r3
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
 800712a:	4613      	mov	r3, r2
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800713a:	f7f9 f8a1 	bl	8000280 <__aeabi_uldivmod>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <UART_SetConfig+0x2d4>)
 8007144:	fba3 1302 	umull	r1, r3, r3, r2
 8007148:	095b      	lsrs	r3, r3, #5
 800714a:	2164      	movs	r1, #100	; 0x64
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	1ad3      	subs	r3, r2, r3
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	3332      	adds	r3, #50	; 0x32
 8007156:	4a08      	ldr	r2, [pc, #32]	; (8007178 <UART_SetConfig+0x2d4>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	095b      	lsrs	r3, r3, #5
 800715e:	f003 0207 	and.w	r2, r3, #7
 8007162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4422      	add	r2, r4
 800716a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800716c:	e105      	b.n	800737a <UART_SetConfig+0x4d6>
 800716e:	bf00      	nop
 8007170:	40011000 	.word	0x40011000
 8007174:	40011400 	.word	0x40011400
 8007178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800717c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007180:	2200      	movs	r2, #0
 8007182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800718a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800718e:	4642      	mov	r2, r8
 8007190:	464b      	mov	r3, r9
 8007192:	1891      	adds	r1, r2, r2
 8007194:	6239      	str	r1, [r7, #32]
 8007196:	415b      	adcs	r3, r3
 8007198:	627b      	str	r3, [r7, #36]	; 0x24
 800719a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800719e:	4641      	mov	r1, r8
 80071a0:	1854      	adds	r4, r2, r1
 80071a2:	4649      	mov	r1, r9
 80071a4:	eb43 0501 	adc.w	r5, r3, r1
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	00eb      	lsls	r3, r5, #3
 80071b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071b6:	00e2      	lsls	r2, r4, #3
 80071b8:	4614      	mov	r4, r2
 80071ba:	461d      	mov	r5, r3
 80071bc:	4643      	mov	r3, r8
 80071be:	18e3      	adds	r3, r4, r3
 80071c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071c4:	464b      	mov	r3, r9
 80071c6:	eb45 0303 	adc.w	r3, r5, r3
 80071ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	f04f 0300 	mov.w	r3, #0
 80071e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071ea:	4629      	mov	r1, r5
 80071ec:	008b      	lsls	r3, r1, #2
 80071ee:	4621      	mov	r1, r4
 80071f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071f4:	4621      	mov	r1, r4
 80071f6:	008a      	lsls	r2, r1, #2
 80071f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071fc:	f7f9 f840 	bl	8000280 <__aeabi_uldivmod>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4b60      	ldr	r3, [pc, #384]	; (8007388 <UART_SetConfig+0x4e4>)
 8007206:	fba3 2302 	umull	r2, r3, r3, r2
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	011c      	lsls	r4, r3, #4
 800720e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007212:	2200      	movs	r2, #0
 8007214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800721c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007220:	4642      	mov	r2, r8
 8007222:	464b      	mov	r3, r9
 8007224:	1891      	adds	r1, r2, r2
 8007226:	61b9      	str	r1, [r7, #24]
 8007228:	415b      	adcs	r3, r3
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007230:	4641      	mov	r1, r8
 8007232:	1851      	adds	r1, r2, r1
 8007234:	6139      	str	r1, [r7, #16]
 8007236:	4649      	mov	r1, r9
 8007238:	414b      	adcs	r3, r1
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	f04f 0200 	mov.w	r2, #0
 8007240:	f04f 0300 	mov.w	r3, #0
 8007244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007248:	4659      	mov	r1, fp
 800724a:	00cb      	lsls	r3, r1, #3
 800724c:	4651      	mov	r1, sl
 800724e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007252:	4651      	mov	r1, sl
 8007254:	00ca      	lsls	r2, r1, #3
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	4603      	mov	r3, r0
 800725c:	4642      	mov	r2, r8
 800725e:	189b      	adds	r3, r3, r2
 8007260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007264:	464b      	mov	r3, r9
 8007266:	460a      	mov	r2, r1
 8007268:	eb42 0303 	adc.w	r3, r2, r3
 800726c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	67bb      	str	r3, [r7, #120]	; 0x78
 800727a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800727c:	f04f 0200 	mov.w	r2, #0
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007288:	4649      	mov	r1, r9
 800728a:	008b      	lsls	r3, r1, #2
 800728c:	4641      	mov	r1, r8
 800728e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007292:	4641      	mov	r1, r8
 8007294:	008a      	lsls	r2, r1, #2
 8007296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800729a:	f7f8 fff1 	bl	8000280 <__aeabi_uldivmod>
 800729e:	4602      	mov	r2, r0
 80072a0:	460b      	mov	r3, r1
 80072a2:	4b39      	ldr	r3, [pc, #228]	; (8007388 <UART_SetConfig+0x4e4>)
 80072a4:	fba3 1302 	umull	r1, r3, r3, r2
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	2164      	movs	r1, #100	; 0x64
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	3332      	adds	r3, #50	; 0x32
 80072b6:	4a34      	ldr	r2, [pc, #208]	; (8007388 <UART_SetConfig+0x4e4>)
 80072b8:	fba2 2303 	umull	r2, r3, r2, r3
 80072bc:	095b      	lsrs	r3, r3, #5
 80072be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072c2:	441c      	add	r4, r3
 80072c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c8:	2200      	movs	r2, #0
 80072ca:	673b      	str	r3, [r7, #112]	; 0x70
 80072cc:	677a      	str	r2, [r7, #116]	; 0x74
 80072ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072d2:	4642      	mov	r2, r8
 80072d4:	464b      	mov	r3, r9
 80072d6:	1891      	adds	r1, r2, r2
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	415b      	adcs	r3, r3
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072e2:	4641      	mov	r1, r8
 80072e4:	1851      	adds	r1, r2, r1
 80072e6:	6039      	str	r1, [r7, #0]
 80072e8:	4649      	mov	r1, r9
 80072ea:	414b      	adcs	r3, r1
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	f04f 0200 	mov.w	r2, #0
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072fa:	4659      	mov	r1, fp
 80072fc:	00cb      	lsls	r3, r1, #3
 80072fe:	4651      	mov	r1, sl
 8007300:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007304:	4651      	mov	r1, sl
 8007306:	00ca      	lsls	r2, r1, #3
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	4603      	mov	r3, r0
 800730e:	4642      	mov	r2, r8
 8007310:	189b      	adds	r3, r3, r2
 8007312:	66bb      	str	r3, [r7, #104]	; 0x68
 8007314:	464b      	mov	r3, r9
 8007316:	460a      	mov	r2, r1
 8007318:	eb42 0303 	adc.w	r3, r2, r3
 800731c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800731e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	663b      	str	r3, [r7, #96]	; 0x60
 8007328:	667a      	str	r2, [r7, #100]	; 0x64
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007336:	4649      	mov	r1, r9
 8007338:	008b      	lsls	r3, r1, #2
 800733a:	4641      	mov	r1, r8
 800733c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007340:	4641      	mov	r1, r8
 8007342:	008a      	lsls	r2, r1, #2
 8007344:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007348:	f7f8 ff9a 	bl	8000280 <__aeabi_uldivmod>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4b0d      	ldr	r3, [pc, #52]	; (8007388 <UART_SetConfig+0x4e4>)
 8007352:	fba3 1302 	umull	r1, r3, r3, r2
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	2164      	movs	r1, #100	; 0x64
 800735a:	fb01 f303 	mul.w	r3, r1, r3
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	3332      	adds	r3, #50	; 0x32
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <UART_SetConfig+0x4e4>)
 8007366:	fba2 2303 	umull	r2, r3, r2, r3
 800736a:	095b      	lsrs	r3, r3, #5
 800736c:	f003 020f 	and.w	r2, r3, #15
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4422      	add	r2, r4
 8007378:	609a      	str	r2, [r3, #8]
}
 800737a:	bf00      	nop
 800737c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007380:	46bd      	mov	sp, r7
 8007382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007386:	bf00      	nop
 8007388:	51eb851f 	.word	0x51eb851f

0800738c <MX_TOF_Init>:
static uint8_t get_key(void);
static uint32_t com_has_data(void);
static uint8_t zone_determine(uint8_t c);

void MX_TOF_Init(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0

  /* USER CODE END TOF_Init_PreTreatment */

  /* Initialize the peripherals and the TOF components */

  MX_VL53L5CX_SimpleRanging_Init();
 8007390:	f000 f808 	bl	80073a4 <MX_VL53L5CX_SimpleRanging_Init>

  /* USER CODE BEGIN TOF_Init_PostTreatment */

  /* USER CODE END TOF_Init_PostTreatment */
}
 8007394:	bf00      	nop
 8007396:	bd80      	pop	{r7, pc}

08007398 <MX_TOF_Process>:

/*
 * LM background task
 */
void MX_TOF_Process(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TOF_Process_PreTreatment */

  /* USER CODE END TOF_Process_PreTreatment */

  MX_VL53L5CX_SimpleRanging_Process();
 800739c:	f000 f81c 	bl	80073d8 <MX_VL53L5CX_SimpleRanging_Process>

  /* USER CODE BEGIN TOF_Process_PostTreatment */

  /* USER CODE END TOF_Process_PostTreatment */
}
 80073a0:	bf00      	nop
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <MX_VL53L5CX_SimpleRanging_Init>:

static void MX_VL53L5CX_SimpleRanging_Init(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80073a8:	2000      	movs	r0, #0
 80073aa:	f7fc fd0b 	bl	8003dc4 <BSP_COM_Init>

  status = CUSTOM_RANGING_SENSOR_Init(CUSTOM_VL53L5CX);
 80073ae:	2000      	movs	r0, #0
 80073b0:	f000 fc20 	bl	8007bf4 <CUSTOM_RANGING_SENSOR_Init>
 80073b4:	4603      	mov	r3, r0
 80073b6:	4a06      	ldr	r2, [pc, #24]	; (80073d0 <MX_VL53L5CX_SimpleRanging_Init+0x2c>)
 80073b8:	6013      	str	r3, [r2, #0]

  if (status != BSP_ERROR_NONE)
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <MX_VL53L5CX_SimpleRanging_Init+0x2c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <MX_VL53L5CX_SimpleRanging_Init+0x26>
  {
    printf("CUSTOM_RANGING_SENSOR_Init failed\n");
 80073c2:	4804      	ldr	r0, [pc, #16]	; (80073d4 <MX_VL53L5CX_SimpleRanging_Init+0x30>)
 80073c4:	f000 fef2 	bl	80081ac <puts>
    while(1);
 80073c8:	e7fe      	b.n	80073c8 <MX_VL53L5CX_SimpleRanging_Init+0x24>
  }
}
 80073ca:	bf00      	nop
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000498 	.word	0x20000498
 80073d4:	080091cc 	.word	0x080091cc

080073d8 <MX_VL53L5CX_SimpleRanging_Process>:
    HAL_Delay(POLLING_PERIOD);
  }
}
#else
static void MX_VL53L5CX_SimpleRanging_Process(void)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 80073de:	af00      	add	r7, sp, #0
  uint32_t Id;
  RANGING_SENSOR_Result_t Result;

  CUSTOM_RANGING_SENSOR_ReadID(CUSTOM_VL53L5CX, &Id);
 80073e0:	f207 5304 	addw	r3, r7, #1284	; 0x504
 80073e4:	4619      	mov	r1, r3
 80073e6:	2000      	movs	r0, #0
 80073e8:	f000 fc30 	bl	8007c4c <CUSTOM_RANGING_SENSOR_ReadID>
  CUSTOM_RANGING_SENSOR_GetCapabilities(CUSTOM_VL53L5CX, &Cap);
 80073ec:	491e      	ldr	r1, [pc, #120]	; (8007468 <MX_VL53L5CX_SimpleRanging_Process+0x90>)
 80073ee:	2000      	movs	r0, #0
 80073f0:	f000 fc56 	bl	8007ca0 <CUSTOM_RANGING_SENSOR_GetCapabilities>

  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80073f4:	4b1d      	ldr	r3, [pc, #116]	; (800746c <MX_VL53L5CX_SimpleRanging_Process+0x94>)
 80073f6:	2203      	movs	r2, #3
 80073f8:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = TIMING_BUDGET; /* 5 ms < TimingBudget < 100 ms */
 80073fa:	4b1c      	ldr	r3, [pc, #112]	; (800746c <MX_VL53L5CX_SimpleRanging_Process+0x94>)
 80073fc:	221e      	movs	r2, #30
 80073fe:	605a      	str	r2, [r3, #4]
  Profile.Frequency = RANGING_FREQUENCY; /* Ranging frequency Hz (shall be consistent with TimingBudget value) */
 8007400:	4b1a      	ldr	r3, [pc, #104]	; (800746c <MX_VL53L5CX_SimpleRanging_Process+0x94>)
 8007402:	2205      	movs	r2, #5
 8007404:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 8007406:	4b19      	ldr	r3, [pc, #100]	; (800746c <MX_VL53L5CX_SimpleRanging_Process+0x94>)
 8007408:	2200      	movs	r2, #0
 800740a:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 800740c:	4b17      	ldr	r3, [pc, #92]	; (800746c <MX_VL53L5CX_SimpleRanging_Process+0x94>)
 800740e:	2200      	movs	r2, #0
 8007410:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L5CX, &Profile);
 8007412:	4916      	ldr	r1, [pc, #88]	; (800746c <MX_VL53L5CX_SimpleRanging_Process+0x94>)
 8007414:	2000      	movs	r0, #0
 8007416:	f000 fc6d 	bl	8007cf4 <CUSTOM_RANGING_SENSOR_ConfigProfile>

  status = CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L5CX, RS_MODE_BLOCKING_CONTINUOUS);
 800741a:	2101      	movs	r1, #1
 800741c:	2000      	movs	r0, #0
 800741e:	f000 fcbd 	bl	8007d9c <CUSTOM_RANGING_SENSOR_Start>
 8007422:	4603      	mov	r3, r0
 8007424:	4a12      	ldr	r2, [pc, #72]	; (8007470 <MX_VL53L5CX_SimpleRanging_Process+0x98>)
 8007426:	6013      	str	r3, [r2, #0]

  while (1)
  {
    /* polling mode */

    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L5CX, &Result);
 8007428:	463b      	mov	r3, r7
 800742a:	4619      	mov	r1, r3
 800742c:	2000      	movs	r0, #0
 800742e:	f000 fc8b 	bl	8007d48 <CUSTOM_RANGING_SENSOR_GetDistance>
 8007432:	4603      	mov	r3, r0
 8007434:	4a0e      	ldr	r2, [pc, #56]	; (8007470 <MX_VL53L5CX_SimpleRanging_Process+0x98>)
 8007436:	6013      	str	r3, [r2, #0]

    if (status == BSP_ERROR_NONE)
 8007438:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <MX_VL53L5CX_SimpleRanging_Process+0x98>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <MX_VL53L5CX_SimpleRanging_Process+0x70>
    {
      print_result(&Result);
 8007440:	463b      	mov	r3, r7
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f816 	bl	8007474 <print_result>
    }

    if (com_has_data())
 8007448:	f000 fb8e 	bl	8007b68 <com_has_data>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <MX_VL53L5CX_SimpleRanging_Process+0x86>
    {
      handle_cmd(get_key());
 8007452:	f000 fb75 	bl	8007b40 <get_key>
 8007456:	4603      	mov	r3, r0
 8007458:	4618      	mov	r0, r3
 800745a:	f000 fb1b 	bl	8007a94 <handle_cmd>
    }

    HAL_Delay(POLLING_PERIOD);
 800745e:	20c8      	movs	r0, #200	; 0xc8
 8007460:	f7fc fdfc 	bl	800405c <HAL_Delay>
    status = CUSTOM_RANGING_SENSOR_GetDistance(CUSTOM_VL53L5CX, &Result);
 8007464:	e7e0      	b.n	8007428 <MX_VL53L5CX_SimpleRanging_Process+0x50>
 8007466:	bf00      	nop
 8007468:	20000474 	.word	0x20000474
 800746c:	20000484 	.word	0x20000484
 8007470:	20000498 	.word	0x20000498

08007474 <print_result>:
  }
}
#endif /* USE_BARE_DRIVER */

static void print_result(RANGING_SENSOR_Result_t *Result)
{
 8007474:	b590      	push	{r4, r7, lr}
 8007476:	b08b      	sub	sp, #44	; 0x2c
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  int8_t i, j, k, l,temp;
  uint8_t zones_per_line;
  uint8_t NB_object_detection_zone[3] = {0,0,0}, object_detection[3]= {0,0,0};
 800747c:	4ac1      	ldr	r2, [pc, #772]	; (8007784 <print_result+0x310>)
 800747e:	f107 031c 	add.w	r3, r7, #28
 8007482:	6812      	ldr	r2, [r2, #0]
 8007484:	4611      	mov	r1, r2
 8007486:	8019      	strh	r1, [r3, #0]
 8007488:	3302      	adds	r3, #2
 800748a:	0c12      	lsrs	r2, r2, #16
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	4abd      	ldr	r2, [pc, #756]	; (8007784 <print_result+0x310>)
 8007490:	f107 0318 	add.w	r3, r7, #24
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	4611      	mov	r1, r2
 8007498:	8019      	strh	r1, [r3, #0]
 800749a:	3302      	adds	r3, #2
 800749c:	0c12      	lsrs	r2, r2, #16
 800749e:	701a      	strb	r2, [r3, #0]
  uint32_t distance[3] = {0,0,0};
 80074a0:	2300      	movs	r3, #0
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	2300      	movs	r3, #0
 80074aa:	617b      	str	r3, [r7, #20]

  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80074ac:	4bb6      	ldr	r3, [pc, #728]	; (8007788 <print_result+0x314>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d003      	beq.n	80074bc <print_result+0x48>
         (Profile.RangingProfile == RS_PROFILE_8x8_CONTINUOUS)) ? 8 : 4;
 80074b4:	4bb4      	ldr	r3, [pc, #720]	; (8007788 <print_result+0x314>)
 80074b6:	681b      	ldr	r3, [r3, #0]
  zones_per_line = ((Profile.RangingProfile == RS_PROFILE_8x8_AUTONOMOUS) ||
 80074b8:	2b03      	cmp	r3, #3
 80074ba:	d101      	bne.n	80074c0 <print_result+0x4c>
 80074bc:	2308      	movs	r3, #8
 80074be:	e000      	b.n	80074c2 <print_result+0x4e>
 80074c0:	2304      	movs	r3, #4
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  display_commands_banner();
 80074c6:	f000 fab5 	bl	8007a34 <display_commands_banner>

  printf("Cell Format :\n\n");
 80074ca:	48b0      	ldr	r0, [pc, #704]	; (800778c <print_result+0x318>)
 80074cc:	f000 fe6e 	bl	80081ac <puts>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80074d6:	e018      	b.n	800750a <print_result+0x96>
  {
    printf(" \033[38;5;10m%20s\033[0m : %20s\n", "Distance [mm]", "Status");
 80074d8:	4aad      	ldr	r2, [pc, #692]	; (8007790 <print_result+0x31c>)
 80074da:	49ae      	ldr	r1, [pc, #696]	; (8007794 <print_result+0x320>)
 80074dc:	48ae      	ldr	r0, [pc, #696]	; (8007798 <print_result+0x324>)
 80074de:	f000 fdc9 	bl	8008074 <iprintf>
    if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 80074e2:	4ba9      	ldr	r3, [pc, #676]	; (8007788 <print_result+0x314>)
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d103      	bne.n	80074f2 <print_result+0x7e>
 80074ea:	4ba7      	ldr	r3, [pc, #668]	; (8007788 <print_result+0x314>)
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <print_result+0x88>
    {
      printf(" %20s : %20s\n", "Signal [kcps/spad]", "Ambient [kcps/spad]");
 80074f2:	4aaa      	ldr	r2, [pc, #680]	; (800779c <print_result+0x328>)
 80074f4:	49aa      	ldr	r1, [pc, #680]	; (80077a0 <print_result+0x32c>)
 80074f6:	48ab      	ldr	r0, [pc, #684]	; (80077a4 <print_result+0x330>)
 80074f8:	f000 fdbc 	bl	8008074 <iprintf>
  for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 80074fc:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8007500:	b2db      	uxtb	r3, r3
 8007502:	3301      	adds	r3, #1
 8007504:	b2db      	uxtb	r3, r3
 8007506:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800750a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0e2      	beq.n	80074d8 <print_result+0x64>
    }
  }

  printf("\n\n");
 8007512:	48a5      	ldr	r0, [pc, #660]	; (80077a8 <print_result+0x334>)
 8007514:	f000 fe4a 	bl	80081ac <puts>

  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 8007518:	2300      	movs	r3, #0
 800751a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800751e:	e1a4      	b.n	800786a <print_result+0x3f6>
    {
      for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 8007520:	2300      	movs	r3, #0
 8007522:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007526:	e009      	b.n	800753c <print_result+0xc8>
        printf(" -----------------");
 8007528:	48a0      	ldr	r0, [pc, #640]	; (80077ac <print_result+0x338>)
 800752a:	f000 fda3 	bl	8008074 <iprintf>
      for (i = 0; i < zones_per_line; i++) /* number of zones per line */
 800752e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007532:	b2db      	uxtb	r3, r3
 8007534:	3301      	adds	r3, #1
 8007536:	b2db      	uxtb	r3, r3
 8007538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800753c:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8007540:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007544:	429a      	cmp	r2, r3
 8007546:	dbef      	blt.n	8007528 <print_result+0xb4>
      printf("\n");
 8007548:	200a      	movs	r0, #10
 800754a:	f000 fdab 	bl	80080a4 <putchar>

      for (i = 0; i < zones_per_line; i++)
 800754e:	2300      	movs	r3, #0
 8007550:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007554:	e009      	b.n	800756a <print_result+0xf6>
        printf("|                 ");
 8007556:	4896      	ldr	r0, [pc, #600]	; (80077b0 <print_result+0x33c>)
 8007558:	f000 fd8c 	bl	8008074 <iprintf>
      for (i = 0; i < zones_per_line; i++)
 800755c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007560:	b2db      	uxtb	r3, r3
 8007562:	3301      	adds	r3, #1
 8007564:	b2db      	uxtb	r3, r3
 8007566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800756a:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 800756e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007572:	429a      	cmp	r2, r3
 8007574:	dbef      	blt.n	8007556 <print_result+0xe2>
      printf("|\n");
 8007576:	488f      	ldr	r0, [pc, #572]	; (80077b4 <print_result+0x340>)
 8007578:	f000 fe18 	bl	80081ac <puts>

      for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800757c:	2300      	movs	r3, #0
 800757e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007582:	e165      	b.n	8007850 <print_result+0x3dc>
      {
        /* Print distance and status */
        for (k = (zones_per_line - 1); k >= 0; k--)
 8007584:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007588:	3b01      	subs	r3, #1
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007590:	e0b3      	b.n	80076fa <print_result+0x286>
        {
          if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 8007592:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8007596:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800759a:	441a      	add	r2, r3
 800759c:	6879      	ldr	r1, [r7, #4]
 800759e:	4613      	mov	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	440b      	add	r3, r1
 80075a8:	3304      	adds	r3, #4
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 8098 	beq.w	80076e2 <print_result+0x26e>
          {
            if ((long)Result->ZoneResult[j+k].Distance[l] < 500)
 80075b2:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 80075b6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075ba:	441a      	add	r2, r3
 80075bc:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 80075c0:	6879      	ldr	r1, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	4403      	add	r3, r0
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80075d4:	da5f      	bge.n	8007696 <print_result+0x222>
            {
              printf("| \033[38;5;9m%5ld\033[0m  :  %5ld ",
                (long)Result->ZoneResult[j+k].Distance[l],
 80075d6:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 80075da:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075de:	441a      	add	r2, r3
 80075e0:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	4403      	add	r3, r0
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	689b      	ldr	r3, [r3, #8]
              printf("| \033[38;5;9m%5ld\033[0m  :  %5ld ",
 80075f4:	461c      	mov	r4, r3
  			    Result->ZoneResult[j+k].Status[l]);
 80075f6:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 80075fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80075fe:	441a      	add	r2, r3
              printf("| \033[38;5;9m%5ld\033[0m  :  %5ld ",
 8007600:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	4403      	add	r3, r0
 800760e:	3302      	adds	r3, #2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	461a      	mov	r2, r3
 8007618:	4621      	mov	r1, r4
 800761a:	4867      	ldr	r0, [pc, #412]	; (80077b8 <print_result+0x344>)
 800761c:	f000 fd2a 	bl	8008074 <iprintf>
				  temp = zone_determine(k);
 8007620:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007624:	4618      	mov	r0, r3
 8007626:	f000 fab3 	bl	8007b90 <zone_determine>
 800762a:	4603      	mov	r3, r0
 800762c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				  object_detection[temp] = 1;
 8007630:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8007634:	3328      	adds	r3, #40	; 0x28
 8007636:	443b      	add	r3, r7
 8007638:	2201      	movs	r2, #1
 800763a:	f803 2c10 	strb.w	r2, [r3, #-16]
				  NB_object_detection_zone[temp] ++;
 800763e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8007642:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8007646:	443a      	add	r2, r7
 8007648:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800764c:	3201      	adds	r2, #1
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	3328      	adds	r3, #40	; 0x28
 8007652:	443b      	add	r3, r7
 8007654:	f803 2c0c 	strb.w	r2, [r3, #-12]
				  distance[temp] += Result->ZoneResult[j+k].Distance[l];
 8007658:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	3328      	adds	r3, #40	; 0x28
 8007660:	443b      	add	r3, r7
 8007662:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8007666:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 800766a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800766e:	441a      	add	r2, r3
 8007670:	f997 4024 	ldrsb.w	r4, [r7, #36]	; 0x24
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	4423      	add	r3, r4
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4403      	add	r3, r0
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8007688:	440a      	add	r2, r1
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	3328      	adds	r3, #40	; 0x28
 800768e:	443b      	add	r3, r7
 8007690:	f843 2c1c 	str.w	r2, [r3, #-28]
 8007694:	e02a      	b.n	80076ec <print_result+0x278>
            } else
            {
              printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
                (long)Result->ZoneResult[j+k].Distance[l],
 8007696:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 800769a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800769e:	441a      	add	r2, r3
 80076a0:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	4403      	add	r3, r0
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	689b      	ldr	r3, [r3, #8]
              printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 80076b4:	461c      	mov	r4, r3
  			  Result->ZoneResult[j+k].Status[l]);
 80076b6:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 80076ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80076be:	441a      	add	r2, r3
              printf("| \033[38;5;10m%5ld\033[0m  :  %5ld ",
 80076c0:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	4403      	add	r3, r0
 80076ce:	3302      	adds	r3, #2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	461a      	mov	r2, r3
 80076d8:	4621      	mov	r1, r4
 80076da:	4838      	ldr	r0, [pc, #224]	; (80077bc <print_result+0x348>)
 80076dc:	f000 fcca 	bl	8008074 <iprintf>
 80076e0:	e004      	b.n	80076ec <print_result+0x278>
            }
          }
          else
            printf("| %5s  :  %5s ", "X", "X");
 80076e2:	4a37      	ldr	r2, [pc, #220]	; (80077c0 <print_result+0x34c>)
 80076e4:	4936      	ldr	r1, [pc, #216]	; (80077c0 <print_result+0x34c>)
 80076e6:	4837      	ldr	r0, [pc, #220]	; (80077c4 <print_result+0x350>)
 80076e8:	f000 fcc4 	bl	8008074 <iprintf>
        for (k = (zones_per_line - 1); k >= 0; k--)
 80076ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	3b01      	subs	r3, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80076fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f6bf af47 	bge.w	8007592 <print_result+0x11e>
        }
        printf("|\n");
 8007704:	482b      	ldr	r0, [pc, #172]	; (80077b4 <print_result+0x340>)
 8007706:	f000 fd51 	bl	80081ac <puts>

        if ((Profile.EnableAmbient != 0) || (Profile.EnableSignal != 0))
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <print_result+0x314>)
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d104      	bne.n	800771c <print_result+0x2a8>
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <print_result+0x314>)
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8093 	beq.w	8007842 <print_result+0x3ce>
        {
          /* Print Signal and Ambient */
          for (k = (zones_per_line - 1); k >= 0; k--)
 800771c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007720:	3b01      	subs	r3, #1
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007728:	e083      	b.n	8007832 <print_result+0x3be>
          {
            if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 800772a:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 800772e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007732:	441a      	add	r2, r3
 8007734:	6879      	ldr	r1, [r7, #4]
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	440b      	add	r3, r1
 8007740:	3304      	adds	r3, #4
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d068      	beq.n	800781a <print_result+0x3a6>
            {
              if (Profile.EnableSignal != 0)
 8007748:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <print_result+0x314>)
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d03d      	beq.n	80077cc <print_result+0x358>
                printf("| %5ld  :  ", (long)Result->ZoneResult[j+k].Signal[l]);
 8007750:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8007754:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007758:	441a      	add	r2, r3
 800775a:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 800775e:	6879      	ldr	r1, [r7, #4]
 8007760:	4613      	mov	r3, r2
 8007762:	009b      	lsls	r3, r3, #2
 8007764:	4413      	add	r3, r2
 8007766:	4403      	add	r3, r0
 8007768:	3304      	adds	r3, #4
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	3304      	adds	r3, #4
 8007770:	edd3 7a00 	vldr	s15, [r3]
 8007774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007778:	ee17 1a90 	vmov	r1, s15
 800777c:	4812      	ldr	r0, [pc, #72]	; (80077c8 <print_result+0x354>)
 800777e:	f000 fc79 	bl	8008074 <iprintf>
 8007782:	e027      	b.n	80077d4 <print_result+0x360>
 8007784:	08009350 	.word	0x08009350
 8007788:	20000484 	.word	0x20000484
 800778c:	080091f0 	.word	0x080091f0
 8007790:	08009200 	.word	0x08009200
 8007794:	08009208 	.word	0x08009208
 8007798:	08009218 	.word	0x08009218
 800779c:	08009234 	.word	0x08009234
 80077a0:	08009248 	.word	0x08009248
 80077a4:	0800925c 	.word	0x0800925c
 80077a8:	0800926c 	.word	0x0800926c
 80077ac:	08009270 	.word	0x08009270
 80077b0:	08009284 	.word	0x08009284
 80077b4:	08009298 	.word	0x08009298
 80077b8:	0800929c 	.word	0x0800929c
 80077bc:	080092bc 	.word	0x080092bc
 80077c0:	080092dc 	.word	0x080092dc
 80077c4:	080092e0 	.word	0x080092e0
 80077c8:	080092f0 	.word	0x080092f0
              else
                printf("| %5s  :  ", "X");
 80077cc:	495c      	ldr	r1, [pc, #368]	; (8007940 <print_result+0x4cc>)
 80077ce:	485d      	ldr	r0, [pc, #372]	; (8007944 <print_result+0x4d0>)
 80077d0:	f000 fc50 	bl	8008074 <iprintf>

              if (Profile.EnableAmbient != 0)
 80077d4:	4b5c      	ldr	r3, [pc, #368]	; (8007948 <print_result+0x4d4>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d019      	beq.n	8007810 <print_result+0x39c>
                printf("%5ld ", (long)Result->ZoneResult[j+k].Ambient[l]);
 80077dc:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 80077e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80077e4:	441a      	add	r2, r3
 80077e6:	f997 0024 	ldrsb.w	r0, [r7, #36]	; 0x24
 80077ea:	6879      	ldr	r1, [r7, #4]
 80077ec:	4613      	mov	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	4403      	add	r3, r0
 80077f4:	3302      	adds	r3, #2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	3308      	adds	r3, #8
 80077fc:	edd3 7a00 	vldr	s15, [r3]
 8007800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007804:	ee17 1a90 	vmov	r1, s15
 8007808:	4850      	ldr	r0, [pc, #320]	; (800794c <print_result+0x4d8>)
 800780a:	f000 fc33 	bl	8008074 <iprintf>
 800780e:	e009      	b.n	8007824 <print_result+0x3b0>
              else
                printf("%5s ", "X");
 8007810:	494b      	ldr	r1, [pc, #300]	; (8007940 <print_result+0x4cc>)
 8007812:	484f      	ldr	r0, [pc, #316]	; (8007950 <print_result+0x4dc>)
 8007814:	f000 fc2e 	bl	8008074 <iprintf>
 8007818:	e004      	b.n	8007824 <print_result+0x3b0>
            }
            else
              printf("| %5s  :  %5s ", "X", "X");
 800781a:	4a49      	ldr	r2, [pc, #292]	; (8007940 <print_result+0x4cc>)
 800781c:	4948      	ldr	r1, [pc, #288]	; (8007940 <print_result+0x4cc>)
 800781e:	484d      	ldr	r0, [pc, #308]	; (8007954 <print_result+0x4e0>)
 8007820:	f000 fc28 	bl	8008074 <iprintf>
          for (k = (zones_per_line - 1); k >= 0; k--)
 8007824:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007828:	b2db      	uxtb	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007832:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007836:	2b00      	cmp	r3, #0
 8007838:	f6bf af77 	bge.w	800772a <print_result+0x2b6>
          }
          printf("|\n");
 800783c:	4846      	ldr	r0, [pc, #280]	; (8007958 <print_result+0x4e4>)
 800783e:	f000 fcb5 	bl	80081ac <puts>
      for (l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 8007842:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8007846:	b2db      	uxtb	r3, r3
 8007848:	3301      	adds	r3, #1
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8007850:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	f43f ae95 	beq.w	8007584 <print_result+0x110>
  for (j = 0; j < Result->NumberOfZones; j += zones_per_line)
 800785a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800785e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007862:	4413      	add	r3, r2
 8007864:	b2db      	uxtb	r3, r3
 8007866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800786a:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	429a      	cmp	r2, r3
 8007874:	f4ff ae54 	bcc.w	8007520 <print_result+0xac>
          }
        }
    }

    for (i = 0; i < zones_per_line; i++)
 8007878:	2300      	movs	r3, #0
 800787a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800787e:	e009      	b.n	8007894 <print_result+0x420>
      printf(" -----------------");
 8007880:	4836      	ldr	r0, [pc, #216]	; (800795c <print_result+0x4e8>)
 8007882:	f000 fbf7 	bl	8008074 <iprintf>
    for (i = 0; i < zones_per_line; i++)
 8007886:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800788a:	b2db      	uxtb	r3, r3
 800788c:	3301      	adds	r3, #1
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007894:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8007898:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800789c:	429a      	cmp	r2, r3
 800789e:	dbef      	blt.n	8007880 <print_result+0x40c>
    printf("\n");
 80078a0:	200a      	movs	r0, #10
 80078a2:	f000 fbff 	bl	80080a4 <putchar>
  	for (i = 0; i < 3; i++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078ac:	e03f      	b.n	800792e <print_result+0x4ba>
  	{
  		if((object_detection[i] == 1) &&(set_alert[i])==1 )
 80078ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078b2:	3328      	adds	r3, #40	; 0x28
 80078b4:	443b      	add	r3, r7
 80078b6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d130      	bne.n	8007920 <print_result+0x4ac>
 80078be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078c2:	4a27      	ldr	r2, [pc, #156]	; (8007960 <print_result+0x4ec>)
 80078c4:	5cd3      	ldrb	r3, [r2, r3]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d12a      	bne.n	8007920 <print_result+0x4ac>
  		{
  			distance[i] = distance[i]/NB_object_detection_zone[i];
 80078ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	3328      	adds	r3, #40	; 0x28
 80078d2:	443b      	add	r3, r7
 80078d4:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80078d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078dc:	3328      	adds	r3, #40	; 0x28
 80078de:	443b      	add	r3, r7
 80078e0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80078e4:	4619      	mov	r1, r3
 80078e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078ea:	fbb2 f2f1 	udiv	r2, r2, r1
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	3328      	adds	r3, #40	; 0x28
 80078f2:	443b      	add	r3, r7
 80078f4:	f843 2c1c 	str.w	r2, [r3, #-28]
  			printf ( " Phat hien vat the o vung: %d ;  khoang cach: %ld mm\n",i+1,distance[i]);
 80078f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078fc:	1c59      	adds	r1, r3, #1
 80078fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	3328      	adds	r3, #40	; 0x28
 8007906:	443b      	add	r3, r7
 8007908:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800790c:	461a      	mov	r2, r3
 800790e:	4815      	ldr	r0, [pc, #84]	; (8007964 <print_result+0x4f0>)
 8007910:	f000 fbb0 	bl	8008074 <iprintf>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8007914:	2201      	movs	r2, #1
 8007916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800791a:	4813      	ldr	r0, [pc, #76]	; (8007968 <print_result+0x4f4>)
 800791c:	f7fc ffce 	bl	80048bc <HAL_GPIO_WritePin>
  	for (i = 0; i < 3; i++)
 8007920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007924:	b2db      	uxtb	r3, r3
 8007926:	3301      	adds	r3, #1
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800792e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007932:	2b02      	cmp	r3, #2
 8007934:	ddbb      	ble.n	80078ae <print_result+0x43a>
  		}
	}
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	372c      	adds	r7, #44	; 0x2c
 800793c:	46bd      	mov	sp, r7
 800793e:	bd90      	pop	{r4, r7, pc}
 8007940:	080092dc 	.word	0x080092dc
 8007944:	080092fc 	.word	0x080092fc
 8007948:	20000484 	.word	0x20000484
 800794c:	08009308 	.word	0x08009308
 8007950:	08009310 	.word	0x08009310
 8007954:	080092e0 	.word	0x080092e0
 8007958:	08009298 	.word	0x08009298
 800795c:	08009270 	.word	0x08009270
 8007960:	20000048 	.word	0x20000048
 8007964:	08009318 	.word	0x08009318
 8007968:	40020800 	.word	0x40020800

0800796c <toggle_resolution>:

static void toggle_resolution(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L5CX);
 8007970:	2000      	movs	r0, #0
 8007972:	f000 fa3f 	bl	8007df4 <CUSTOM_RANGING_SENSOR_Stop>

  switch (Profile.RangingProfile)
 8007976:	4b16      	ldr	r3, [pc, #88]	; (80079d0 <toggle_resolution+0x64>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	3b01      	subs	r3, #1
 800797c:	2b03      	cmp	r3, #3
 800797e:	d81b      	bhi.n	80079b8 <toggle_resolution+0x4c>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <toggle_resolution+0x1c>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079a1 	.word	0x080079a1
 800798c:	08007999 	.word	0x08007999
 8007990:	080079b1 	.word	0x080079b1
 8007994:	080079a9 	.word	0x080079a9
  {
    case RS_PROFILE_4x4_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8007998:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <toggle_resolution+0x64>)
 800799a:	2204      	movs	r2, #4
 800799c:	601a      	str	r2, [r3, #0]
      break;
 800799e:	e00c      	b.n	80079ba <toggle_resolution+0x4e>

    case RS_PROFILE_4x4_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80079a0:	4b0b      	ldr	r3, [pc, #44]	; (80079d0 <toggle_resolution+0x64>)
 80079a2:	2203      	movs	r2, #3
 80079a4:	601a      	str	r2, [r3, #0]
      break;
 80079a6:	e008      	b.n	80079ba <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_AUTONOMOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 80079a8:	4b09      	ldr	r3, [pc, #36]	; (80079d0 <toggle_resolution+0x64>)
 80079aa:	2202      	movs	r2, #2
 80079ac:	601a      	str	r2, [r3, #0]
      break;
 80079ae:	e004      	b.n	80079ba <toggle_resolution+0x4e>

    case RS_PROFILE_8x8_CONTINUOUS:
      Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 80079b0:	4b07      	ldr	r3, [pc, #28]	; (80079d0 <toggle_resolution+0x64>)
 80079b2:	2201      	movs	r2, #1
 80079b4:	601a      	str	r2, [r3, #0]
      break;
 80079b6:	e000      	b.n	80079ba <toggle_resolution+0x4e>

    default:
      break;
 80079b8:	bf00      	nop
  }

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L5CX, &Profile);
 80079ba:	4905      	ldr	r1, [pc, #20]	; (80079d0 <toggle_resolution+0x64>)
 80079bc:	2000      	movs	r0, #0
 80079be:	f000 f999 	bl	8007cf4 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L5CX, RS_MODE_BLOCKING_CONTINUOUS);
 80079c2:	2101      	movs	r1, #1
 80079c4:	2000      	movs	r0, #0
 80079c6:	f000 f9e9 	bl	8007d9c <CUSTOM_RANGING_SENSOR_Start>
}
 80079ca:	bf00      	nop
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000484 	.word	0x20000484

080079d4 <toggle_signal_and_ambient>:

static void toggle_signal_and_ambient(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  CUSTOM_RANGING_SENSOR_Stop(CUSTOM_VL53L5CX);
 80079d8:	2000      	movs	r0, #0
 80079da:	f000 fa0b 	bl	8007df4 <CUSTOM_RANGING_SENSOR_Stop>

  Profile.EnableAmbient = (Profile.EnableAmbient) ? 0U : 1U;
 80079de:	4b0f      	ldr	r3, [pc, #60]	; (8007a1c <toggle_signal_and_ambient+0x48>)
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf0c      	ite	eq
 80079e6:	2301      	moveq	r3, #1
 80079e8:	2300      	movne	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	4b0b      	ldr	r3, [pc, #44]	; (8007a1c <toggle_signal_and_ambient+0x48>)
 80079f0:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = (Profile.EnableSignal) ? 0U : 1U;
 80079f2:	4b0a      	ldr	r3, [pc, #40]	; (8007a1c <toggle_signal_and_ambient+0x48>)
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	bf0c      	ite	eq
 80079fa:	2301      	moveq	r3, #1
 80079fc:	2300      	movne	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	4b06      	ldr	r3, [pc, #24]	; (8007a1c <toggle_signal_and_ambient+0x48>)
 8007a04:	611a      	str	r2, [r3, #16]

  CUSTOM_RANGING_SENSOR_ConfigProfile(CUSTOM_VL53L5CX, &Profile);
 8007a06:	4905      	ldr	r1, [pc, #20]	; (8007a1c <toggle_signal_and_ambient+0x48>)
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f000 f973 	bl	8007cf4 <CUSTOM_RANGING_SENSOR_ConfigProfile>
  CUSTOM_RANGING_SENSOR_Start(CUSTOM_VL53L5CX, RS_MODE_BLOCKING_CONTINUOUS);
 8007a0e:	2101      	movs	r1, #1
 8007a10:	2000      	movs	r0, #0
 8007a12:	f000 f9c3 	bl	8007d9c <CUSTOM_RANGING_SENSOR_Start>
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000484 	.word	0x20000484

08007a20 <clear_screen>:

static void clear_screen(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* clear Screen : 27 is ESC command */
  printf("%c[2J", 27);
 8007a24:	211b      	movs	r1, #27
 8007a26:	4802      	ldr	r0, [pc, #8]	; (8007a30 <clear_screen+0x10>)
 8007a28:	f000 fb24 	bl	8008074 <iprintf>
}
 8007a2c:	bf00      	nop
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	08009354 	.word	0x08009354

08007a34 <display_commands_banner>:

static void display_commands_banner(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* clear screen */
  printf("%c[2H", 27);
 8007a38:	211b      	movs	r1, #27
 8007a3a:	480e      	ldr	r0, [pc, #56]	; (8007a74 <display_commands_banner+0x40>)
 8007a3c:	f000 fb1a 	bl	8008074 <iprintf>

  printf("VL53L5CX Simple Ranging demo application\n");
 8007a40:	480d      	ldr	r0, [pc, #52]	; (8007a78 <display_commands_banner+0x44>)
 8007a42:	f000 fbb3 	bl	80081ac <puts>
#ifdef USE_BARE_DRIVER
  printf("Using direct calls to VL53L5CX bare driver API\n");
#endif
  printf("Polling mode\n");
 8007a46:	480d      	ldr	r0, [pc, #52]	; (8007a7c <display_commands_banner+0x48>)
 8007a48:	f000 fbb0 	bl	80081ac <puts>
  printf("----------------------------------------\n\n");
 8007a4c:	480c      	ldr	r0, [pc, #48]	; (8007a80 <display_commands_banner+0x4c>)
 8007a4e:	f000 fbad 	bl	80081ac <puts>

  printf("Use the following keys to control application\n");
 8007a52:	480c      	ldr	r0, [pc, #48]	; (8007a84 <display_commands_banner+0x50>)
 8007a54:	f000 fbaa 	bl	80081ac <puts>
  printf(" 'r' : change resolution\n");
 8007a58:	480b      	ldr	r0, [pc, #44]	; (8007a88 <display_commands_banner+0x54>)
 8007a5a:	f000 fba7 	bl	80081ac <puts>
  printf(" 's' : enable signal and ambient\n");
 8007a5e:	480b      	ldr	r0, [pc, #44]	; (8007a8c <display_commands_banner+0x58>)
 8007a60:	f000 fba4 	bl	80081ac <puts>
  printf(" 'c' : clear screen\n");
 8007a64:	480a      	ldr	r0, [pc, #40]	; (8007a90 <display_commands_banner+0x5c>)
 8007a66:	f000 fba1 	bl	80081ac <puts>
  printf("\n");
 8007a6a:	200a      	movs	r0, #10
 8007a6c:	f000 fb1a 	bl	80080a4 <putchar>
}
 8007a70:	bf00      	nop
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	0800935c 	.word	0x0800935c
 8007a78:	08009364 	.word	0x08009364
 8007a7c:	08009390 	.word	0x08009390
 8007a80:	080093a0 	.word	0x080093a0
 8007a84:	080093cc 	.word	0x080093cc
 8007a88:	080093fc 	.word	0x080093fc
 8007a8c:	08009418 	.word	0x08009418
 8007a90:	0800943c 	.word	0x0800943c

08007a94 <handle_cmd>:

static void handle_cmd(uint8_t cmd)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	71fb      	strb	r3, [r7, #7]
  switch (cmd)
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
 8007aa0:	2b73      	cmp	r3, #115	; 0x73
 8007aa2:	d017      	beq.n	8007ad4 <handle_cmd+0x40>
 8007aa4:	2b73      	cmp	r3, #115	; 0x73
 8007aa6:	dc44      	bgt.n	8007b32 <handle_cmd+0x9e>
 8007aa8:	2b72      	cmp	r3, #114	; 0x72
 8007aaa:	d00e      	beq.n	8007aca <handle_cmd+0x36>
 8007aac:	2b72      	cmp	r3, #114	; 0x72
 8007aae:	dc40      	bgt.n	8007b32 <handle_cmd+0x9e>
 8007ab0:	2b63      	cmp	r3, #99	; 0x63
 8007ab2:	d014      	beq.n	8007ade <handle_cmd+0x4a>
 8007ab4:	2b63      	cmp	r3, #99	; 0x63
 8007ab6:	dc3c      	bgt.n	8007b32 <handle_cmd+0x9e>
 8007ab8:	2b33      	cmp	r3, #51	; 0x33
 8007aba:	d02d      	beq.n	8007b18 <handle_cmd+0x84>
 8007abc:	2b33      	cmp	r3, #51	; 0x33
 8007abe:	dc38      	bgt.n	8007b32 <handle_cmd+0x9e>
 8007ac0:	2b31      	cmp	r3, #49	; 0x31
 8007ac2:	d00f      	beq.n	8007ae4 <handle_cmd+0x50>
 8007ac4:	2b32      	cmp	r3, #50	; 0x32
 8007ac6:	d01a      	beq.n	8007afe <handle_cmd+0x6a>
      set_alert[2] = !set_alert[2];
      clear_screen();
      break;

    default:
      break;
 8007ac8:	e033      	b.n	8007b32 <handle_cmd+0x9e>
      toggle_resolution();
 8007aca:	f7ff ff4f 	bl	800796c <toggle_resolution>
      clear_screen();
 8007ace:	f7ff ffa7 	bl	8007a20 <clear_screen>
      break;
 8007ad2:	e02f      	b.n	8007b34 <handle_cmd+0xa0>
      toggle_signal_and_ambient();
 8007ad4:	f7ff ff7e 	bl	80079d4 <toggle_signal_and_ambient>
      clear_screen();
 8007ad8:	f7ff ffa2 	bl	8007a20 <clear_screen>
      break;
 8007adc:	e02a      	b.n	8007b34 <handle_cmd+0xa0>
      clear_screen();
 8007ade:	f7ff ff9f 	bl	8007a20 <clear_screen>
      break;
 8007ae2:	e027      	b.n	8007b34 <handle_cmd+0xa0>
      set_alert[0] = !set_alert[0];
 8007ae4:	4b15      	ldr	r3, [pc, #84]	; (8007b3c <handle_cmd+0xa8>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	bf0c      	ite	eq
 8007aec:	2301      	moveq	r3, #1
 8007aee:	2300      	movne	r3, #0
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	461a      	mov	r2, r3
 8007af4:	4b11      	ldr	r3, [pc, #68]	; (8007b3c <handle_cmd+0xa8>)
 8007af6:	701a      	strb	r2, [r3, #0]
      clear_screen();
 8007af8:	f7ff ff92 	bl	8007a20 <clear_screen>
      break;
 8007afc:	e01a      	b.n	8007b34 <handle_cmd+0xa0>
      set_alert[1] = !set_alert[1];
 8007afe:	4b0f      	ldr	r3, [pc, #60]	; (8007b3c <handle_cmd+0xa8>)
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	bf0c      	ite	eq
 8007b06:	2301      	moveq	r3, #1
 8007b08:	2300      	movne	r3, #0
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	4b0b      	ldr	r3, [pc, #44]	; (8007b3c <handle_cmd+0xa8>)
 8007b10:	705a      	strb	r2, [r3, #1]
      clear_screen();
 8007b12:	f7ff ff85 	bl	8007a20 <clear_screen>
      break;
 8007b16:	e00d      	b.n	8007b34 <handle_cmd+0xa0>
      set_alert[2] = !set_alert[2];
 8007b18:	4b08      	ldr	r3, [pc, #32]	; (8007b3c <handle_cmd+0xa8>)
 8007b1a:	789b      	ldrb	r3, [r3, #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf0c      	ite	eq
 8007b20:	2301      	moveq	r3, #1
 8007b22:	2300      	movne	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	4b04      	ldr	r3, [pc, #16]	; (8007b3c <handle_cmd+0xa8>)
 8007b2a:	709a      	strb	r2, [r3, #2]
      clear_screen();
 8007b2c:	f7ff ff78 	bl	8007a20 <clear_screen>
      break;
 8007b30:	e000      	b.n	8007b34 <handle_cmd+0xa0>
      break;
 8007b32:	bf00      	nop
  }
}
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000048 	.word	0x20000048

08007b40 <get_key>:

static uint8_t get_key(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
  uint8_t cmd = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	71fb      	strb	r3, [r7, #7]

  HAL_UART_Receive(&hcom_uart[COM1], &cmd, 1, HAL_MAX_DELAY);
 8007b4a:	1df9      	adds	r1, r7, #7
 8007b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b50:	2201      	movs	r2, #1
 8007b52:	4804      	ldr	r0, [pc, #16]	; (8007b64 <get_key+0x24>)
 8007b54:	f7fe fc43 	bl	80063de <HAL_UART_Receive>

  return cmd;
 8007b58:	79fb      	ldrb	r3, [r7, #7]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	20000428 	.word	0x20000428

08007b68 <com_has_data>:

static uint32_t com_has_data(void)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
  return __HAL_UART_GET_FLAG(&hcom_uart[COM1], UART_FLAG_RXNE);;
 8007b6c:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <com_has_data+0x24>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0320 	and.w	r3, r3, #32
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	bf0c      	ite	eq
 8007b7a:	2301      	moveq	r3, #1
 8007b7c:	2300      	movne	r3, #0
 8007b7e:	b2db      	uxtb	r3, r3
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000428 	.word	0x20000428

08007b90 <zone_determine>:

static uint8_t zone_determine(uint8_t c)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
	uint8_t zone;
	if((c > 4)) zone = 0;
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d901      	bls.n	8007ba4 <zone_determine+0x14>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]
	if((c < 5)&&( c > 2)) zone = 1;
 8007ba4:	79fb      	ldrb	r3, [r7, #7]
 8007ba6:	2b04      	cmp	r3, #4
 8007ba8:	d804      	bhi.n	8007bb4 <zone_determine+0x24>
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <zone_determine+0x24>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	73fb      	strb	r3, [r7, #15]
	if((c < 3)) zone = 2;
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d801      	bhi.n	8007bbe <zone_determine+0x2e>
 8007bba:	2302      	movs	r3, #2
 8007bbc:	73fb      	strb	r3, [r7, #15]
	return zone;
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3714      	adds	r7, #20
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_GPIO_EXTI_Callback>:
#include "app_tof_pin_conf.h"

extern volatile uint8_t ToF_EventDetected;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TOF_INT_EXTI_PIN)
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d102      	bne.n	8007be2 <HAL_GPIO_EXTI_Callback+0x16>
  {
    ToF_EventDetected = 1;
 8007bdc:	4b04      	ldr	r3, [pc, #16]	; (8007bf0 <HAL_GPIO_EXTI_Callback+0x24>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	701a      	strb	r2, [r3, #0]
  }
}
 8007be2:	bf00      	nop
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	2000049c 	.word	0x2000049c

08007bf4 <CUSTOM_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Init(uint32_t Instance)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <CUSTOM_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c02:	f06f 0301 	mvn.w	r3, #1
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	e01b      	b.n	8007c42 <CUSTOM_RANGING_SENSOR_Init+0x4e>
  }
  else
  {
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_OFF);
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f919 	bl	8007e44 <CUSTOM_RANGING_SENSOR_SetPowerMode>
    CUSTOM_RANGING_SENSOR_SetPowerMode(Instance, CUSTOM_RANGING_POWERMODE_ON);
 8007c12:	2100      	movs	r1, #0
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f915 	bl	8007e44 <CUSTOM_RANGING_SENSOR_SetPowerMode>

    switch (Instance)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10c      	bne.n	8007c3a <CUSTOM_RANGING_SENSOR_Init+0x46>
    {
#if (USE_CUSTOM_RANGING_VL53L5CX == 1U)
      case CUSTOM_VL53L5CX:
          if (VL53L5CX_Probe(Instance) != BSP_ERROR_NONE)
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 f967 	bl	8007ef4 <VL53L5CX_Probe>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d003      	beq.n	8007c34 <CUSTOM_RANGING_SENSOR_Init+0x40>
          {
            ret = BSP_ERROR_NO_INIT;
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c30:	60fb      	str	r3, [r7, #12]
          }
          else
          {
            ret = BSP_ERROR_NONE;
          }
          break;
 8007c32:	e006      	b.n	8007c42 <CUSTOM_RANGING_SENSOR_Init+0x4e>
            ret = BSP_ERROR_NONE;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
          break;
 8007c38:	e003      	b.n	8007c42 <CUSTOM_RANGING_SENSOR_Init+0x4e>
#endif
      default:
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007c3a:	f06f 0306 	mvn.w	r3, #6
 8007c3e:	60fb      	str	r3, [r7, #12]
          break;
 8007c40:	bf00      	nop
    }
  }

  return ret;
 8007c42:	68fb      	ldr	r3, [r7, #12]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3710      	adds	r7, #16
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <CUSTOM_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <CUSTOM_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c5c:	f06f 0301 	mvn.w	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
 8007c62:	e014      	b.n	8007c8e <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ReadID(CUSTOM_RANGING_CompObj[Instance], pId) < 0)
 8007c64:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <CUSTOM_RANGING_SENSOR_ReadID+0x4c>)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	490b      	ldr	r1, [pc, #44]	; (8007c9c <CUSTOM_RANGING_SENSOR_ReadID+0x50>)
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4798      	blx	r3
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da03      	bge.n	8007c8a <CUSTOM_RANGING_SENSOR_ReadID+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c82:	f06f 0304 	mvn.w	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e001      	b.n	8007c8e <CUSTOM_RANGING_SENSOR_ReadID+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	200004a4 	.word	0x200004a4
 8007c9c:	200004a0 	.word	0x200004a0

08007ca0 <CUSTOM_RANGING_SENSOR_GetCapabilities>:
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @note This function should be called after the init.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
    int32_t ret;

    if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x18>
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007cb0:	f06f 0301 	mvn.w	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
 8007cb6:	e014      	b.n	8007ce2 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance], pCapabilities) < 0)
 8007cb8:	4a0c      	ldr	r2, [pc, #48]	; (8007cec <CUSTOM_RANGING_SENSOR_GetCapabilities+0x4c>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	490b      	ldr	r1, [pc, #44]	; (8007cf0 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x50>)
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	da03      	bge.n	8007cde <CUSTOM_RANGING_SENSOR_GetCapabilities+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cd6:	f06f 0304 	mvn.w	r3, #4
 8007cda:	60fb      	str	r3, [r7, #12]
 8007cdc:	e001      	b.n	8007ce2 <CUSTOM_RANGING_SENSOR_GetCapabilities+0x42>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
    }

    return ret;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200004a4 	.word	0x200004a4
 8007cf0:	200004a0 	.word	0x200004a0

08007cf4 <CUSTOM_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <CUSTOM_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d04:	f06f 0301 	mvn.w	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
 8007d0a:	e014      	b.n	8007d36 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->ConfigProfile(CUSTOM_RANGING_CompObj[Instance], pConfig) < 0)
 8007d0c:	4a0c      	ldr	r2, [pc, #48]	; (8007d40 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x4c>)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	490b      	ldr	r1, [pc, #44]	; (8007d44 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x50>)
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	da03      	bge.n	8007d32 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d2a:	f06f 0304 	mvn.w	r3, #4
 8007d2e:	60fb      	str	r3, [r7, #12]
 8007d30:	e001      	b.n	8007d36 <CUSTOM_RANGING_SENSOR_ConfigProfile+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007d32:	2300      	movs	r3, #0
 8007d34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	200004a4 	.word	0x200004a4
 8007d44:	200004a0 	.word	0x200004a0

08007d48 <CUSTOM_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_GetDistance(uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d003      	beq.n	8007d60 <CUSTOM_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d58:	f06f 0301 	mvn.w	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	e014      	b.n	8007d8a <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->GetDistance(CUSTOM_RANGING_CompObj[Instance], pResult) < 0)
 8007d60:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <CUSTOM_RANGING_SENSOR_GetDistance+0x4c>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d68:	69db      	ldr	r3, [r3, #28]
 8007d6a:	490b      	ldr	r1, [pc, #44]	; (8007d98 <CUSTOM_RANGING_SENSOR_GetDistance+0x50>)
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	4610      	mov	r0, r2
 8007d76:	4798      	blx	r3
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	da03      	bge.n	8007d86 <CUSTOM_RANGING_SENSOR_GetDistance+0x3e>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d7e:	f06f 0304 	mvn.w	r3, #4
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e001      	b.n	8007d8a <CUSTOM_RANGING_SENSOR_GetDistance+0x42>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	200004a4 	.word	0x200004a4
 8007d98:	200004a0 	.word	0x200004a0

08007d9c <CUSTOM_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Start(uint32_t Instance, uint8_t Mode)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	70fb      	strb	r3, [r7, #3]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d003      	beq.n	8007db6 <CUSTOM_RANGING_SENSOR_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007dae:	f06f 0301 	mvn.w	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e014      	b.n	8007de0 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Start(CUSTOM_RANGING_CompObj[Instance], Mode) < 0)
 8007db6:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <CUSTOM_RANGING_SENSOR_Start+0x50>)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	490b      	ldr	r1, [pc, #44]	; (8007df0 <CUSTOM_RANGING_SENSOR_Start+0x54>)
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007dc8:	78f9      	ldrb	r1, [r7, #3]
 8007dca:	4610      	mov	r0, r2
 8007dcc:	4798      	blx	r3
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da03      	bge.n	8007ddc <CUSTOM_RANGING_SENSOR_Start+0x40>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007dd4:	f06f 0304 	mvn.w	r3, #4
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e001      	b.n	8007de0 <CUSTOM_RANGING_SENSOR_Start+0x44>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007de0:	68fb      	ldr	r3, [r7, #12]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	200004a4 	.word	0x200004a4
 8007df0:	200004a0 	.word	0x200004a0

08007df4 <CUSTOM_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <CUSTOM_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e02:	f06f 0301 	mvn.w	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	e013      	b.n	8007e32 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else if (CUSTOM_RANGING_Drv[Instance]->Stop(CUSTOM_RANGING_CompObj[Instance]) < 0)
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <CUSTOM_RANGING_SENSOR_Stop+0x48>)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	490a      	ldr	r1, [pc, #40]	; (8007e40 <CUSTOM_RANGING_SENSOR_Stop+0x4c>)
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da03      	bge.n	8007e2e <CUSTOM_RANGING_SENSOR_Stop+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e26:	f06f 0304 	mvn.w	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e001      	b.n	8007e32 <CUSTOM_RANGING_SENSOR_Stop+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	200004a4 	.word	0x200004a4
 8007e40:	200004a0 	.word	0x200004a0

08007e44 <CUSTOM_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t CUSTOM_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_RANGING_INSTANCES_NBR)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <CUSTOM_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e54:	f06f 0301 	mvn.w	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	e042      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_ON)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d11c      	bne.n	8007e9c <CUSTOM_RANGING_SENSOR_SetPowerMode+0x58>
  {
       switch (Instance)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d115      	bne.n	8007e94 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x50>
        {
#if (USE_CUSTOM_RANGING_VL53L5CX == 1U)
          case CUSTOM_VL53L5CX:
            if (CUSTOM_RANGING_Drv[Instance]->SetPowerMode(CUSTOM_RANGING_CompObj[Instance], VL53L5CX_POWER_MODE_WAKEUP) < 0)
 8007e68:	4a20      	ldr	r2, [pc, #128]	; (8007eec <CUSTOM_RANGING_SENSOR_SetPowerMode+0xa8>)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e72:	491f      	ldr	r1, [pc, #124]	; (8007ef0 <CUSTOM_RANGING_SENSOR_SetPowerMode+0xac>)
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	da03      	bge.n	8007e8e <CUSTOM_RANGING_SENSOR_SetPowerMode+0x4a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e86:	f06f 0304 	mvn.w	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
            else
            {
              ret = BSP_ERROR_NONE;
            }

            break;
 8007e8c:	e029      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
              ret = BSP_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
            break;
 8007e92:	e026      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
#endif
          default:
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007e94:	f06f 0306 	mvn.w	r3, #6
 8007e98:	60fb      	str	r3, [r7, #12]
              break;
 8007e9a:	e022      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
    }
  }
  else if (PowerMode == CUSTOM_RANGING_POWERMODE_OFF)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d11c      	bne.n	8007edc <CUSTOM_RANGING_SENSOR_SetPowerMode+0x98>
  {
        switch (Instance)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d115      	bne.n	8007ed4 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x90>
        {
#if (USE_CUSTOM_RANGING_VL53L5CX == 1U)
          case CUSTOM_VL53L5CX:
            if (CUSTOM_RANGING_Drv[Instance]->SetPowerMode(CUSTOM_RANGING_CompObj[Instance], VL53L5CX_POWER_MODE_SLEEP) < 0)
 8007ea8:	4a10      	ldr	r2, [pc, #64]	; (8007eec <CUSTOM_RANGING_SENSOR_SetPowerMode+0xa8>)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb2:	490f      	ldr	r1, [pc, #60]	; (8007ef0 <CUSTOM_RANGING_SENSOR_SetPowerMode+0xac>)
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da03      	bge.n	8007ece <CUSTOM_RANGING_SENSOR_SetPowerMode+0x8a>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ec6:	f06f 0304 	mvn.w	r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]
            else
            {
              ret = BSP_ERROR_NONE;
            }

            break;
 8007ecc:	e009      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
              ret = BSP_ERROR_NONE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
            break;
 8007ed2:	e006      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
#endif
          default:
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007ed4:	f06f 0306 	mvn.w	r3, #6
 8007ed8:	60fb      	str	r3, [r7, #12]
              break;
 8007eda:	e002      	b.n	8007ee2 <CUSTOM_RANGING_SENSOR_SetPowerMode+0x9e>
    }
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007edc:	f06f 0301 	mvn.w	r3, #1
 8007ee0:	60fb      	str	r3, [r7, #12]
  }

    return ret;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	200004a4 	.word	0x200004a4
 8007ef0:	200004a0 	.word	0x200004a0

08007ef4 <VL53L5CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L5CX_Probe(uint32_t Instance)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b08a      	sub	sp, #40	; 0x28
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  VL53L5CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L5CX_Object_t   VL53L5CXObj;

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L5CX_ADDRESS;
 8007efc:	2352      	movs	r3, #82	; 0x52
 8007efe:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = CUSTOM_VL53L5CX_I2C_Init;
 8007f00:	4b32      	ldr	r3, [pc, #200]	; (8007fcc <VL53L5CX_Probe+0xd8>)
 8007f02:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = CUSTOM_VL53L5CX_I2C_DeInit;
 8007f04:	4b32      	ldr	r3, [pc, #200]	; (8007fd0 <VL53L5CX_Probe+0xdc>)
 8007f06:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = CUSTOM_VL53L5CX_I2C_WriteReg;
 8007f08:	4b32      	ldr	r3, [pc, #200]	; (8007fd4 <VL53L5CX_Probe+0xe0>)
 8007f0a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = CUSTOM_VL53L5CX_I2C_ReadReg;
 8007f0c:	4b32      	ldr	r3, [pc, #200]	; (8007fd8 <VL53L5CX_Probe+0xe4>)
 8007f0e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8007f10:	4b32      	ldr	r3, [pc, #200]	; (8007fdc <VL53L5CX_Probe+0xe8>)
 8007f12:	623b      	str	r3, [r7, #32]

  if (VL53L5CX_RegisterBusIO(&VL53L5CXObj, &IOCtx) != VL53L5CX_OK)
 8007f14:	f107 030c 	add.w	r3, r7, #12
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4831      	ldr	r0, [pc, #196]	; (8007fe0 <VL53L5CX_Probe+0xec>)
 8007f1c:	f7fb f9ab 	bl	8003276 <VL53L5CX_RegisterBusIO>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d003      	beq.n	8007f2e <VL53L5CX_Probe+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f26:	f06f 0304 	mvn.w	r3, #4
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f2c:	e049      	b.n	8007fc2 <VL53L5CX_Probe+0xce>
  }
  else
  {
    CUSTOM_RANGING_Drv[Instance] = (RANGING_SENSOR_Drv_t *) &VL53L5CX_RANGING_SENSOR_Driver;
 8007f2e:	4a2d      	ldr	r2, [pc, #180]	; (8007fe4 <VL53L5CX_Probe+0xf0>)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	492d      	ldr	r1, [pc, #180]	; (8007fe8 <VL53L5CX_Probe+0xf4>)
 8007f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    CUSTOM_RANGING_CompObj[Instance] = &VL53L5CXObj;
 8007f38:	4a2c      	ldr	r2, [pc, #176]	; (8007fec <VL53L5CX_Probe+0xf8>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4928      	ldr	r1, [pc, #160]	; (8007fe0 <VL53L5CX_Probe+0xec>)
 8007f3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    if (VL53L5CX_ReadID(&VL53L5CXObj, &id) != VL53L5CX_OK)
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	4619      	mov	r1, r3
 8007f48:	4825      	ldr	r0, [pc, #148]	; (8007fe0 <VL53L5CX_Probe+0xec>)
 8007f4a:	f7fb fa44 	bl	80033d6 <VL53L5CX_ReadID>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d003      	beq.n	8007f5c <VL53L5CX_Probe+0x68>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f54:	f06f 0304 	mvn.w	r3, #4
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
 8007f5a:	e032      	b.n	8007fc2 <VL53L5CX_Probe+0xce>
    }
    else if (id != VL53L5CX_ID)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f24f 0202 	movw	r2, #61442	; 0xf002
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d003      	beq.n	8007f6e <VL53L5CX_Probe+0x7a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007f66:	f06f 0306 	mvn.w	r3, #6
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6c:	e029      	b.n	8007fc2 <VL53L5CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->Init(CUSTOM_RANGING_CompObj[Instance]) != VL53L5CX_OK)
 8007f6e:	4a1d      	ldr	r2, [pc, #116]	; (8007fe4 <VL53L5CX_Probe+0xf0>)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	491c      	ldr	r1, [pc, #112]	; (8007fec <VL53L5CX_Probe+0xf8>)
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <VL53L5CX_Probe+0x9e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f8a:	f06f 0304 	mvn.w	r3, #4
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f90:	e017      	b.n	8007fc2 <VL53L5CX_Probe+0xce>
    }
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8007f92:	4a14      	ldr	r2, [pc, #80]	; (8007fe4 <VL53L5CX_Probe+0xf0>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	4913      	ldr	r1, [pc, #76]	; (8007fec <VL53L5CX_Probe+0xf8>)
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
              &RANGING_SENSOR_Cap[Instance]) != VL53L5CX_OK)
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	0112      	lsls	r2, r2, #4
 8007fa8:	4911      	ldr	r1, [pc, #68]	; (8007ff0 <VL53L5CX_Probe+0xfc>)
 8007faa:	440a      	add	r2, r1
    else if (CUSTOM_RANGING_Drv[Instance]->GetCapabilities(CUSTOM_RANGING_CompObj[Instance],
 8007fac:	4611      	mov	r1, r2
 8007fae:	4798      	blx	r3
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <VL53L5CX_Probe+0xca>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fb6:	f06f 0304 	mvn.w	r3, #4
 8007fba:	627b      	str	r3, [r7, #36]	; 0x24
 8007fbc:	e001      	b.n	8007fc2 <VL53L5CX_Probe+0xce>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3728      	adds	r7, #40	; 0x28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	08000585 	.word	0x08000585
 8007fd0:	080005e9 	.word	0x080005e9
 8007fd4:	08000639 	.word	0x08000639
 8007fd8:	0800069d 	.word	0x0800069d
 8007fdc:	08000701 	.word	0x08000701
 8007fe0:	200004b8 	.word	0x200004b8
 8007fe4:	200004a4 	.word	0x200004a4
 8007fe8:	20000004 	.word	0x20000004
 8007fec:	200004a0 	.word	0x200004a0
 8007ff0:	200004a8 	.word	0x200004a8

08007ff4 <__errno>:
 8007ff4:	4b01      	ldr	r3, [pc, #4]	; (8007ffc <__errno+0x8>)
 8007ff6:	6818      	ldr	r0, [r3, #0]
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	2000004c 	.word	0x2000004c

08008000 <__libc_init_array>:
 8008000:	b570      	push	{r4, r5, r6, lr}
 8008002:	4d0d      	ldr	r5, [pc, #52]	; (8008038 <__libc_init_array+0x38>)
 8008004:	4c0d      	ldr	r4, [pc, #52]	; (800803c <__libc_init_array+0x3c>)
 8008006:	1b64      	subs	r4, r4, r5
 8008008:	10a4      	asrs	r4, r4, #2
 800800a:	2600      	movs	r6, #0
 800800c:	42a6      	cmp	r6, r4
 800800e:	d109      	bne.n	8008024 <__libc_init_array+0x24>
 8008010:	4d0b      	ldr	r5, [pc, #44]	; (8008040 <__libc_init_array+0x40>)
 8008012:	4c0c      	ldr	r4, [pc, #48]	; (8008044 <__libc_init_array+0x44>)
 8008014:	f001 f890 	bl	8009138 <_init>
 8008018:	1b64      	subs	r4, r4, r5
 800801a:	10a4      	asrs	r4, r4, #2
 800801c:	2600      	movs	r6, #0
 800801e:	42a6      	cmp	r6, r4
 8008020:	d105      	bne.n	800802e <__libc_init_array+0x2e>
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	f855 3b04 	ldr.w	r3, [r5], #4
 8008028:	4798      	blx	r3
 800802a:	3601      	adds	r6, #1
 800802c:	e7ee      	b.n	800800c <__libc_init_array+0xc>
 800802e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008032:	4798      	blx	r3
 8008034:	3601      	adds	r6, #1
 8008036:	e7f2      	b.n	800801e <__libc_init_array+0x1e>
 8008038:	0801ec04 	.word	0x0801ec04
 800803c:	0801ec04 	.word	0x0801ec04
 8008040:	0801ec04 	.word	0x0801ec04
 8008044:	0801ec08 	.word	0x0801ec08

08008048 <memcpy>:
 8008048:	440a      	add	r2, r1
 800804a:	4291      	cmp	r1, r2
 800804c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008050:	d100      	bne.n	8008054 <memcpy+0xc>
 8008052:	4770      	bx	lr
 8008054:	b510      	push	{r4, lr}
 8008056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800805a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800805e:	4291      	cmp	r1, r2
 8008060:	d1f9      	bne.n	8008056 <memcpy+0xe>
 8008062:	bd10      	pop	{r4, pc}

08008064 <memset>:
 8008064:	4402      	add	r2, r0
 8008066:	4603      	mov	r3, r0
 8008068:	4293      	cmp	r3, r2
 800806a:	d100      	bne.n	800806e <memset+0xa>
 800806c:	4770      	bx	lr
 800806e:	f803 1b01 	strb.w	r1, [r3], #1
 8008072:	e7f9      	b.n	8008068 <memset+0x4>

08008074 <iprintf>:
 8008074:	b40f      	push	{r0, r1, r2, r3}
 8008076:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <iprintf+0x2c>)
 8008078:	b513      	push	{r0, r1, r4, lr}
 800807a:	681c      	ldr	r4, [r3, #0]
 800807c:	b124      	cbz	r4, 8008088 <iprintf+0x14>
 800807e:	69a3      	ldr	r3, [r4, #24]
 8008080:	b913      	cbnz	r3, 8008088 <iprintf+0x14>
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fa74 	bl	8008570 <__sinit>
 8008088:	ab05      	add	r3, sp, #20
 800808a:	9a04      	ldr	r2, [sp, #16]
 800808c:	68a1      	ldr	r1, [r4, #8]
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fc7d 	bl	8008990 <_vfiprintf_r>
 8008096:	b002      	add	sp, #8
 8008098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809c:	b004      	add	sp, #16
 800809e:	4770      	bx	lr
 80080a0:	2000004c 	.word	0x2000004c

080080a4 <putchar>:
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <putchar+0x28>)
 80080a6:	b513      	push	{r0, r1, r4, lr}
 80080a8:	681c      	ldr	r4, [r3, #0]
 80080aa:	4601      	mov	r1, r0
 80080ac:	b134      	cbz	r4, 80080bc <putchar+0x18>
 80080ae:	69a3      	ldr	r3, [r4, #24]
 80080b0:	b923      	cbnz	r3, 80080bc <putchar+0x18>
 80080b2:	9001      	str	r0, [sp, #4]
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fa5b 	bl	8008570 <__sinit>
 80080ba:	9901      	ldr	r1, [sp, #4]
 80080bc:	68a2      	ldr	r2, [r4, #8]
 80080be:	4620      	mov	r0, r4
 80080c0:	b002      	add	sp, #8
 80080c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c6:	f000 bf27 	b.w	8008f18 <_putc_r>
 80080ca:	bf00      	nop
 80080cc:	2000004c 	.word	0x2000004c

080080d0 <_puts_r>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	460e      	mov	r6, r1
 80080d4:	4605      	mov	r5, r0
 80080d6:	b118      	cbz	r0, 80080e0 <_puts_r+0x10>
 80080d8:	6983      	ldr	r3, [r0, #24]
 80080da:	b90b      	cbnz	r3, 80080e0 <_puts_r+0x10>
 80080dc:	f000 fa48 	bl	8008570 <__sinit>
 80080e0:	69ab      	ldr	r3, [r5, #24]
 80080e2:	68ac      	ldr	r4, [r5, #8]
 80080e4:	b913      	cbnz	r3, 80080ec <_puts_r+0x1c>
 80080e6:	4628      	mov	r0, r5
 80080e8:	f000 fa42 	bl	8008570 <__sinit>
 80080ec:	4b2c      	ldr	r3, [pc, #176]	; (80081a0 <_puts_r+0xd0>)
 80080ee:	429c      	cmp	r4, r3
 80080f0:	d120      	bne.n	8008134 <_puts_r+0x64>
 80080f2:	686c      	ldr	r4, [r5, #4]
 80080f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f6:	07db      	lsls	r3, r3, #31
 80080f8:	d405      	bmi.n	8008106 <_puts_r+0x36>
 80080fa:	89a3      	ldrh	r3, [r4, #12]
 80080fc:	0598      	lsls	r0, r3, #22
 80080fe:	d402      	bmi.n	8008106 <_puts_r+0x36>
 8008100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008102:	f000 fad3 	bl	80086ac <__retarget_lock_acquire_recursive>
 8008106:	89a3      	ldrh	r3, [r4, #12]
 8008108:	0719      	lsls	r1, r3, #28
 800810a:	d51d      	bpl.n	8008148 <_puts_r+0x78>
 800810c:	6923      	ldr	r3, [r4, #16]
 800810e:	b1db      	cbz	r3, 8008148 <_puts_r+0x78>
 8008110:	3e01      	subs	r6, #1
 8008112:	68a3      	ldr	r3, [r4, #8]
 8008114:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008118:	3b01      	subs	r3, #1
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	bb39      	cbnz	r1, 800816e <_puts_r+0x9e>
 800811e:	2b00      	cmp	r3, #0
 8008120:	da38      	bge.n	8008194 <_puts_r+0xc4>
 8008122:	4622      	mov	r2, r4
 8008124:	210a      	movs	r1, #10
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f848 	bl	80081bc <__swbuf_r>
 800812c:	3001      	adds	r0, #1
 800812e:	d011      	beq.n	8008154 <_puts_r+0x84>
 8008130:	250a      	movs	r5, #10
 8008132:	e011      	b.n	8008158 <_puts_r+0x88>
 8008134:	4b1b      	ldr	r3, [pc, #108]	; (80081a4 <_puts_r+0xd4>)
 8008136:	429c      	cmp	r4, r3
 8008138:	d101      	bne.n	800813e <_puts_r+0x6e>
 800813a:	68ac      	ldr	r4, [r5, #8]
 800813c:	e7da      	b.n	80080f4 <_puts_r+0x24>
 800813e:	4b1a      	ldr	r3, [pc, #104]	; (80081a8 <_puts_r+0xd8>)
 8008140:	429c      	cmp	r4, r3
 8008142:	bf08      	it	eq
 8008144:	68ec      	ldreq	r4, [r5, #12]
 8008146:	e7d5      	b.n	80080f4 <_puts_r+0x24>
 8008148:	4621      	mov	r1, r4
 800814a:	4628      	mov	r0, r5
 800814c:	f000 f888 	bl	8008260 <__swsetup_r>
 8008150:	2800      	cmp	r0, #0
 8008152:	d0dd      	beq.n	8008110 <_puts_r+0x40>
 8008154:	f04f 35ff 	mov.w	r5, #4294967295
 8008158:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800815a:	07da      	lsls	r2, r3, #31
 800815c:	d405      	bmi.n	800816a <_puts_r+0x9a>
 800815e:	89a3      	ldrh	r3, [r4, #12]
 8008160:	059b      	lsls	r3, r3, #22
 8008162:	d402      	bmi.n	800816a <_puts_r+0x9a>
 8008164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008166:	f000 faa2 	bl	80086ae <__retarget_lock_release_recursive>
 800816a:	4628      	mov	r0, r5
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	2b00      	cmp	r3, #0
 8008170:	da04      	bge.n	800817c <_puts_r+0xac>
 8008172:	69a2      	ldr	r2, [r4, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	dc06      	bgt.n	8008186 <_puts_r+0xb6>
 8008178:	290a      	cmp	r1, #10
 800817a:	d004      	beq.n	8008186 <_puts_r+0xb6>
 800817c:	6823      	ldr	r3, [r4, #0]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	6022      	str	r2, [r4, #0]
 8008182:	7019      	strb	r1, [r3, #0]
 8008184:	e7c5      	b.n	8008112 <_puts_r+0x42>
 8008186:	4622      	mov	r2, r4
 8008188:	4628      	mov	r0, r5
 800818a:	f000 f817 	bl	80081bc <__swbuf_r>
 800818e:	3001      	adds	r0, #1
 8008190:	d1bf      	bne.n	8008112 <_puts_r+0x42>
 8008192:	e7df      	b.n	8008154 <_puts_r+0x84>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	250a      	movs	r5, #10
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	6022      	str	r2, [r4, #0]
 800819c:	701d      	strb	r5, [r3, #0]
 800819e:	e7db      	b.n	8008158 <_puts_r+0x88>
 80081a0:	0801eb88 	.word	0x0801eb88
 80081a4:	0801eba8 	.word	0x0801eba8
 80081a8:	0801eb68 	.word	0x0801eb68

080081ac <puts>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <puts+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f7ff bf8d 	b.w	80080d0 <_puts_r>
 80081b6:	bf00      	nop
 80081b8:	2000004c 	.word	0x2000004c

080081bc <__swbuf_r>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	460e      	mov	r6, r1
 80081c0:	4614      	mov	r4, r2
 80081c2:	4605      	mov	r5, r0
 80081c4:	b118      	cbz	r0, 80081ce <__swbuf_r+0x12>
 80081c6:	6983      	ldr	r3, [r0, #24]
 80081c8:	b90b      	cbnz	r3, 80081ce <__swbuf_r+0x12>
 80081ca:	f000 f9d1 	bl	8008570 <__sinit>
 80081ce:	4b21      	ldr	r3, [pc, #132]	; (8008254 <__swbuf_r+0x98>)
 80081d0:	429c      	cmp	r4, r3
 80081d2:	d12b      	bne.n	800822c <__swbuf_r+0x70>
 80081d4:	686c      	ldr	r4, [r5, #4]
 80081d6:	69a3      	ldr	r3, [r4, #24]
 80081d8:	60a3      	str	r3, [r4, #8]
 80081da:	89a3      	ldrh	r3, [r4, #12]
 80081dc:	071a      	lsls	r2, r3, #28
 80081de:	d52f      	bpl.n	8008240 <__swbuf_r+0x84>
 80081e0:	6923      	ldr	r3, [r4, #16]
 80081e2:	b36b      	cbz	r3, 8008240 <__swbuf_r+0x84>
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	6820      	ldr	r0, [r4, #0]
 80081e8:	1ac0      	subs	r0, r0, r3
 80081ea:	6963      	ldr	r3, [r4, #20]
 80081ec:	b2f6      	uxtb	r6, r6
 80081ee:	4283      	cmp	r3, r0
 80081f0:	4637      	mov	r7, r6
 80081f2:	dc04      	bgt.n	80081fe <__swbuf_r+0x42>
 80081f4:	4621      	mov	r1, r4
 80081f6:	4628      	mov	r0, r5
 80081f8:	f000 f926 	bl	8008448 <_fflush_r>
 80081fc:	bb30      	cbnz	r0, 800824c <__swbuf_r+0x90>
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	3b01      	subs	r3, #1
 8008202:	60a3      	str	r3, [r4, #8]
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	6022      	str	r2, [r4, #0]
 800820a:	701e      	strb	r6, [r3, #0]
 800820c:	6963      	ldr	r3, [r4, #20]
 800820e:	3001      	adds	r0, #1
 8008210:	4283      	cmp	r3, r0
 8008212:	d004      	beq.n	800821e <__swbuf_r+0x62>
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	07db      	lsls	r3, r3, #31
 8008218:	d506      	bpl.n	8008228 <__swbuf_r+0x6c>
 800821a:	2e0a      	cmp	r6, #10
 800821c:	d104      	bne.n	8008228 <__swbuf_r+0x6c>
 800821e:	4621      	mov	r1, r4
 8008220:	4628      	mov	r0, r5
 8008222:	f000 f911 	bl	8008448 <_fflush_r>
 8008226:	b988      	cbnz	r0, 800824c <__swbuf_r+0x90>
 8008228:	4638      	mov	r0, r7
 800822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800822c:	4b0a      	ldr	r3, [pc, #40]	; (8008258 <__swbuf_r+0x9c>)
 800822e:	429c      	cmp	r4, r3
 8008230:	d101      	bne.n	8008236 <__swbuf_r+0x7a>
 8008232:	68ac      	ldr	r4, [r5, #8]
 8008234:	e7cf      	b.n	80081d6 <__swbuf_r+0x1a>
 8008236:	4b09      	ldr	r3, [pc, #36]	; (800825c <__swbuf_r+0xa0>)
 8008238:	429c      	cmp	r4, r3
 800823a:	bf08      	it	eq
 800823c:	68ec      	ldreq	r4, [r5, #12]
 800823e:	e7ca      	b.n	80081d6 <__swbuf_r+0x1a>
 8008240:	4621      	mov	r1, r4
 8008242:	4628      	mov	r0, r5
 8008244:	f000 f80c 	bl	8008260 <__swsetup_r>
 8008248:	2800      	cmp	r0, #0
 800824a:	d0cb      	beq.n	80081e4 <__swbuf_r+0x28>
 800824c:	f04f 37ff 	mov.w	r7, #4294967295
 8008250:	e7ea      	b.n	8008228 <__swbuf_r+0x6c>
 8008252:	bf00      	nop
 8008254:	0801eb88 	.word	0x0801eb88
 8008258:	0801eba8 	.word	0x0801eba8
 800825c:	0801eb68 	.word	0x0801eb68

08008260 <__swsetup_r>:
 8008260:	4b32      	ldr	r3, [pc, #200]	; (800832c <__swsetup_r+0xcc>)
 8008262:	b570      	push	{r4, r5, r6, lr}
 8008264:	681d      	ldr	r5, [r3, #0]
 8008266:	4606      	mov	r6, r0
 8008268:	460c      	mov	r4, r1
 800826a:	b125      	cbz	r5, 8008276 <__swsetup_r+0x16>
 800826c:	69ab      	ldr	r3, [r5, #24]
 800826e:	b913      	cbnz	r3, 8008276 <__swsetup_r+0x16>
 8008270:	4628      	mov	r0, r5
 8008272:	f000 f97d 	bl	8008570 <__sinit>
 8008276:	4b2e      	ldr	r3, [pc, #184]	; (8008330 <__swsetup_r+0xd0>)
 8008278:	429c      	cmp	r4, r3
 800827a:	d10f      	bne.n	800829c <__swsetup_r+0x3c>
 800827c:	686c      	ldr	r4, [r5, #4]
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008284:	0719      	lsls	r1, r3, #28
 8008286:	d42c      	bmi.n	80082e2 <__swsetup_r+0x82>
 8008288:	06dd      	lsls	r5, r3, #27
 800828a:	d411      	bmi.n	80082b0 <__swsetup_r+0x50>
 800828c:	2309      	movs	r3, #9
 800828e:	6033      	str	r3, [r6, #0]
 8008290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	f04f 30ff 	mov.w	r0, #4294967295
 800829a:	e03e      	b.n	800831a <__swsetup_r+0xba>
 800829c:	4b25      	ldr	r3, [pc, #148]	; (8008334 <__swsetup_r+0xd4>)
 800829e:	429c      	cmp	r4, r3
 80082a0:	d101      	bne.n	80082a6 <__swsetup_r+0x46>
 80082a2:	68ac      	ldr	r4, [r5, #8]
 80082a4:	e7eb      	b.n	800827e <__swsetup_r+0x1e>
 80082a6:	4b24      	ldr	r3, [pc, #144]	; (8008338 <__swsetup_r+0xd8>)
 80082a8:	429c      	cmp	r4, r3
 80082aa:	bf08      	it	eq
 80082ac:	68ec      	ldreq	r4, [r5, #12]
 80082ae:	e7e6      	b.n	800827e <__swsetup_r+0x1e>
 80082b0:	0758      	lsls	r0, r3, #29
 80082b2:	d512      	bpl.n	80082da <__swsetup_r+0x7a>
 80082b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082b6:	b141      	cbz	r1, 80082ca <__swsetup_r+0x6a>
 80082b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082bc:	4299      	cmp	r1, r3
 80082be:	d002      	beq.n	80082c6 <__swsetup_r+0x66>
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 fa5b 	bl	800877c <_free_r>
 80082c6:	2300      	movs	r3, #0
 80082c8:	6363      	str	r3, [r4, #52]	; 0x34
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	2300      	movs	r3, #0
 80082d4:	6063      	str	r3, [r4, #4]
 80082d6:	6923      	ldr	r3, [r4, #16]
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	81a3      	strh	r3, [r4, #12]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	b94b      	cbnz	r3, 80082fa <__swsetup_r+0x9a>
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f0:	d003      	beq.n	80082fa <__swsetup_r+0x9a>
 80082f2:	4621      	mov	r1, r4
 80082f4:	4630      	mov	r0, r6
 80082f6:	f000 fa01 	bl	80086fc <__smakebuf_r>
 80082fa:	89a0      	ldrh	r0, [r4, #12]
 80082fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008300:	f010 0301 	ands.w	r3, r0, #1
 8008304:	d00a      	beq.n	800831c <__swsetup_r+0xbc>
 8008306:	2300      	movs	r3, #0
 8008308:	60a3      	str	r3, [r4, #8]
 800830a:	6963      	ldr	r3, [r4, #20]
 800830c:	425b      	negs	r3, r3
 800830e:	61a3      	str	r3, [r4, #24]
 8008310:	6923      	ldr	r3, [r4, #16]
 8008312:	b943      	cbnz	r3, 8008326 <__swsetup_r+0xc6>
 8008314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008318:	d1ba      	bne.n	8008290 <__swsetup_r+0x30>
 800831a:	bd70      	pop	{r4, r5, r6, pc}
 800831c:	0781      	lsls	r1, r0, #30
 800831e:	bf58      	it	pl
 8008320:	6963      	ldrpl	r3, [r4, #20]
 8008322:	60a3      	str	r3, [r4, #8]
 8008324:	e7f4      	b.n	8008310 <__swsetup_r+0xb0>
 8008326:	2000      	movs	r0, #0
 8008328:	e7f7      	b.n	800831a <__swsetup_r+0xba>
 800832a:	bf00      	nop
 800832c:	2000004c 	.word	0x2000004c
 8008330:	0801eb88 	.word	0x0801eb88
 8008334:	0801eba8 	.word	0x0801eba8
 8008338:	0801eb68 	.word	0x0801eb68

0800833c <__sflush_r>:
 800833c:	898a      	ldrh	r2, [r1, #12]
 800833e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008342:	4605      	mov	r5, r0
 8008344:	0710      	lsls	r0, r2, #28
 8008346:	460c      	mov	r4, r1
 8008348:	d458      	bmi.n	80083fc <__sflush_r+0xc0>
 800834a:	684b      	ldr	r3, [r1, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	dc05      	bgt.n	800835c <__sflush_r+0x20>
 8008350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	dc02      	bgt.n	800835c <__sflush_r+0x20>
 8008356:	2000      	movs	r0, #0
 8008358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800835c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835e:	2e00      	cmp	r6, #0
 8008360:	d0f9      	beq.n	8008356 <__sflush_r+0x1a>
 8008362:	2300      	movs	r3, #0
 8008364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008368:	682f      	ldr	r7, [r5, #0]
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	d032      	beq.n	80083d4 <__sflush_r+0x98>
 800836e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	075a      	lsls	r2, r3, #29
 8008374:	d505      	bpl.n	8008382 <__sflush_r+0x46>
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	1ac0      	subs	r0, r0, r3
 800837a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800837c:	b10b      	cbz	r3, 8008382 <__sflush_r+0x46>
 800837e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008380:	1ac0      	subs	r0, r0, r3
 8008382:	2300      	movs	r3, #0
 8008384:	4602      	mov	r2, r0
 8008386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008388:	6a21      	ldr	r1, [r4, #32]
 800838a:	4628      	mov	r0, r5
 800838c:	47b0      	blx	r6
 800838e:	1c43      	adds	r3, r0, #1
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	d106      	bne.n	80083a2 <__sflush_r+0x66>
 8008394:	6829      	ldr	r1, [r5, #0]
 8008396:	291d      	cmp	r1, #29
 8008398:	d82c      	bhi.n	80083f4 <__sflush_r+0xb8>
 800839a:	4a2a      	ldr	r2, [pc, #168]	; (8008444 <__sflush_r+0x108>)
 800839c:	40ca      	lsrs	r2, r1
 800839e:	07d6      	lsls	r6, r2, #31
 80083a0:	d528      	bpl.n	80083f4 <__sflush_r+0xb8>
 80083a2:	2200      	movs	r2, #0
 80083a4:	6062      	str	r2, [r4, #4]
 80083a6:	04d9      	lsls	r1, r3, #19
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	6022      	str	r2, [r4, #0]
 80083ac:	d504      	bpl.n	80083b8 <__sflush_r+0x7c>
 80083ae:	1c42      	adds	r2, r0, #1
 80083b0:	d101      	bne.n	80083b6 <__sflush_r+0x7a>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	b903      	cbnz	r3, 80083b8 <__sflush_r+0x7c>
 80083b6:	6560      	str	r0, [r4, #84]	; 0x54
 80083b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083ba:	602f      	str	r7, [r5, #0]
 80083bc:	2900      	cmp	r1, #0
 80083be:	d0ca      	beq.n	8008356 <__sflush_r+0x1a>
 80083c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c4:	4299      	cmp	r1, r3
 80083c6:	d002      	beq.n	80083ce <__sflush_r+0x92>
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f9d7 	bl	800877c <_free_r>
 80083ce:	2000      	movs	r0, #0
 80083d0:	6360      	str	r0, [r4, #52]	; 0x34
 80083d2:	e7c1      	b.n	8008358 <__sflush_r+0x1c>
 80083d4:	6a21      	ldr	r1, [r4, #32]
 80083d6:	2301      	movs	r3, #1
 80083d8:	4628      	mov	r0, r5
 80083da:	47b0      	blx	r6
 80083dc:	1c41      	adds	r1, r0, #1
 80083de:	d1c7      	bne.n	8008370 <__sflush_r+0x34>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0c4      	beq.n	8008370 <__sflush_r+0x34>
 80083e6:	2b1d      	cmp	r3, #29
 80083e8:	d001      	beq.n	80083ee <__sflush_r+0xb2>
 80083ea:	2b16      	cmp	r3, #22
 80083ec:	d101      	bne.n	80083f2 <__sflush_r+0xb6>
 80083ee:	602f      	str	r7, [r5, #0]
 80083f0:	e7b1      	b.n	8008356 <__sflush_r+0x1a>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	e7ad      	b.n	8008358 <__sflush_r+0x1c>
 80083fc:	690f      	ldr	r7, [r1, #16]
 80083fe:	2f00      	cmp	r7, #0
 8008400:	d0a9      	beq.n	8008356 <__sflush_r+0x1a>
 8008402:	0793      	lsls	r3, r2, #30
 8008404:	680e      	ldr	r6, [r1, #0]
 8008406:	bf08      	it	eq
 8008408:	694b      	ldreq	r3, [r1, #20]
 800840a:	600f      	str	r7, [r1, #0]
 800840c:	bf18      	it	ne
 800840e:	2300      	movne	r3, #0
 8008410:	eba6 0807 	sub.w	r8, r6, r7
 8008414:	608b      	str	r3, [r1, #8]
 8008416:	f1b8 0f00 	cmp.w	r8, #0
 800841a:	dd9c      	ble.n	8008356 <__sflush_r+0x1a>
 800841c:	6a21      	ldr	r1, [r4, #32]
 800841e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008420:	4643      	mov	r3, r8
 8008422:	463a      	mov	r2, r7
 8008424:	4628      	mov	r0, r5
 8008426:	47b0      	blx	r6
 8008428:	2800      	cmp	r0, #0
 800842a:	dc06      	bgt.n	800843a <__sflush_r+0xfe>
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e78e      	b.n	8008358 <__sflush_r+0x1c>
 800843a:	4407      	add	r7, r0
 800843c:	eba8 0800 	sub.w	r8, r8, r0
 8008440:	e7e9      	b.n	8008416 <__sflush_r+0xda>
 8008442:	bf00      	nop
 8008444:	20400001 	.word	0x20400001

08008448 <_fflush_r>:
 8008448:	b538      	push	{r3, r4, r5, lr}
 800844a:	690b      	ldr	r3, [r1, #16]
 800844c:	4605      	mov	r5, r0
 800844e:	460c      	mov	r4, r1
 8008450:	b913      	cbnz	r3, 8008458 <_fflush_r+0x10>
 8008452:	2500      	movs	r5, #0
 8008454:	4628      	mov	r0, r5
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	b118      	cbz	r0, 8008462 <_fflush_r+0x1a>
 800845a:	6983      	ldr	r3, [r0, #24]
 800845c:	b90b      	cbnz	r3, 8008462 <_fflush_r+0x1a>
 800845e:	f000 f887 	bl	8008570 <__sinit>
 8008462:	4b14      	ldr	r3, [pc, #80]	; (80084b4 <_fflush_r+0x6c>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d11b      	bne.n	80084a0 <_fflush_r+0x58>
 8008468:	686c      	ldr	r4, [r5, #4]
 800846a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0ef      	beq.n	8008452 <_fflush_r+0xa>
 8008472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008474:	07d0      	lsls	r0, r2, #31
 8008476:	d404      	bmi.n	8008482 <_fflush_r+0x3a>
 8008478:	0599      	lsls	r1, r3, #22
 800847a:	d402      	bmi.n	8008482 <_fflush_r+0x3a>
 800847c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800847e:	f000 f915 	bl	80086ac <__retarget_lock_acquire_recursive>
 8008482:	4628      	mov	r0, r5
 8008484:	4621      	mov	r1, r4
 8008486:	f7ff ff59 	bl	800833c <__sflush_r>
 800848a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800848c:	07da      	lsls	r2, r3, #31
 800848e:	4605      	mov	r5, r0
 8008490:	d4e0      	bmi.n	8008454 <_fflush_r+0xc>
 8008492:	89a3      	ldrh	r3, [r4, #12]
 8008494:	059b      	lsls	r3, r3, #22
 8008496:	d4dd      	bmi.n	8008454 <_fflush_r+0xc>
 8008498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800849a:	f000 f908 	bl	80086ae <__retarget_lock_release_recursive>
 800849e:	e7d9      	b.n	8008454 <_fflush_r+0xc>
 80084a0:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <_fflush_r+0x70>)
 80084a2:	429c      	cmp	r4, r3
 80084a4:	d101      	bne.n	80084aa <_fflush_r+0x62>
 80084a6:	68ac      	ldr	r4, [r5, #8]
 80084a8:	e7df      	b.n	800846a <_fflush_r+0x22>
 80084aa:	4b04      	ldr	r3, [pc, #16]	; (80084bc <_fflush_r+0x74>)
 80084ac:	429c      	cmp	r4, r3
 80084ae:	bf08      	it	eq
 80084b0:	68ec      	ldreq	r4, [r5, #12]
 80084b2:	e7da      	b.n	800846a <_fflush_r+0x22>
 80084b4:	0801eb88 	.word	0x0801eb88
 80084b8:	0801eba8 	.word	0x0801eba8
 80084bc:	0801eb68 	.word	0x0801eb68

080084c0 <std>:
 80084c0:	2300      	movs	r3, #0
 80084c2:	b510      	push	{r4, lr}
 80084c4:	4604      	mov	r4, r0
 80084c6:	e9c0 3300 	strd	r3, r3, [r0]
 80084ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ce:	6083      	str	r3, [r0, #8]
 80084d0:	8181      	strh	r1, [r0, #12]
 80084d2:	6643      	str	r3, [r0, #100]	; 0x64
 80084d4:	81c2      	strh	r2, [r0, #14]
 80084d6:	6183      	str	r3, [r0, #24]
 80084d8:	4619      	mov	r1, r3
 80084da:	2208      	movs	r2, #8
 80084dc:	305c      	adds	r0, #92	; 0x5c
 80084de:	f7ff fdc1 	bl	8008064 <memset>
 80084e2:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <std+0x38>)
 80084e4:	6263      	str	r3, [r4, #36]	; 0x24
 80084e6:	4b05      	ldr	r3, [pc, #20]	; (80084fc <std+0x3c>)
 80084e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80084ea:	4b05      	ldr	r3, [pc, #20]	; (8008500 <std+0x40>)
 80084ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <std+0x44>)
 80084f0:	6224      	str	r4, [r4, #32]
 80084f2:	6323      	str	r3, [r4, #48]	; 0x30
 80084f4:	bd10      	pop	{r4, pc}
 80084f6:	bf00      	nop
 80084f8:	08008fc9 	.word	0x08008fc9
 80084fc:	08008feb 	.word	0x08008feb
 8008500:	08009023 	.word	0x08009023
 8008504:	08009047 	.word	0x08009047

08008508 <_cleanup_r>:
 8008508:	4901      	ldr	r1, [pc, #4]	; (8008510 <_cleanup_r+0x8>)
 800850a:	f000 b8af 	b.w	800866c <_fwalk_reent>
 800850e:	bf00      	nop
 8008510:	08008449 	.word	0x08008449

08008514 <__sfmoreglue>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	2268      	movs	r2, #104	; 0x68
 8008518:	1e4d      	subs	r5, r1, #1
 800851a:	4355      	muls	r5, r2
 800851c:	460e      	mov	r6, r1
 800851e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008522:	f000 f997 	bl	8008854 <_malloc_r>
 8008526:	4604      	mov	r4, r0
 8008528:	b140      	cbz	r0, 800853c <__sfmoreglue+0x28>
 800852a:	2100      	movs	r1, #0
 800852c:	e9c0 1600 	strd	r1, r6, [r0]
 8008530:	300c      	adds	r0, #12
 8008532:	60a0      	str	r0, [r4, #8]
 8008534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008538:	f7ff fd94 	bl	8008064 <memset>
 800853c:	4620      	mov	r0, r4
 800853e:	bd70      	pop	{r4, r5, r6, pc}

08008540 <__sfp_lock_acquire>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__sfp_lock_acquire+0x8>)
 8008542:	f000 b8b3 	b.w	80086ac <__retarget_lock_acquire_recursive>
 8008546:	bf00      	nop
 8008548:	20000e0d 	.word	0x20000e0d

0800854c <__sfp_lock_release>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__sfp_lock_release+0x8>)
 800854e:	f000 b8ae 	b.w	80086ae <__retarget_lock_release_recursive>
 8008552:	bf00      	nop
 8008554:	20000e0d 	.word	0x20000e0d

08008558 <__sinit_lock_acquire>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__sinit_lock_acquire+0x8>)
 800855a:	f000 b8a7 	b.w	80086ac <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	20000e0e 	.word	0x20000e0e

08008564 <__sinit_lock_release>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__sinit_lock_release+0x8>)
 8008566:	f000 b8a2 	b.w	80086ae <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	20000e0e 	.word	0x20000e0e

08008570 <__sinit>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4604      	mov	r4, r0
 8008574:	f7ff fff0 	bl	8008558 <__sinit_lock_acquire>
 8008578:	69a3      	ldr	r3, [r4, #24]
 800857a:	b11b      	cbz	r3, 8008584 <__sinit+0x14>
 800857c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008580:	f7ff bff0 	b.w	8008564 <__sinit_lock_release>
 8008584:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008588:	6523      	str	r3, [r4, #80]	; 0x50
 800858a:	4b13      	ldr	r3, [pc, #76]	; (80085d8 <__sinit+0x68>)
 800858c:	4a13      	ldr	r2, [pc, #76]	; (80085dc <__sinit+0x6c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	62a2      	str	r2, [r4, #40]	; 0x28
 8008592:	42a3      	cmp	r3, r4
 8008594:	bf04      	itt	eq
 8008596:	2301      	moveq	r3, #1
 8008598:	61a3      	streq	r3, [r4, #24]
 800859a:	4620      	mov	r0, r4
 800859c:	f000 f820 	bl	80085e0 <__sfp>
 80085a0:	6060      	str	r0, [r4, #4]
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 f81c 	bl	80085e0 <__sfp>
 80085a8:	60a0      	str	r0, [r4, #8]
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f818 	bl	80085e0 <__sfp>
 80085b0:	2200      	movs	r2, #0
 80085b2:	60e0      	str	r0, [r4, #12]
 80085b4:	2104      	movs	r1, #4
 80085b6:	6860      	ldr	r0, [r4, #4]
 80085b8:	f7ff ff82 	bl	80084c0 <std>
 80085bc:	68a0      	ldr	r0, [r4, #8]
 80085be:	2201      	movs	r2, #1
 80085c0:	2109      	movs	r1, #9
 80085c2:	f7ff ff7d 	bl	80084c0 <std>
 80085c6:	68e0      	ldr	r0, [r4, #12]
 80085c8:	2202      	movs	r2, #2
 80085ca:	2112      	movs	r1, #18
 80085cc:	f7ff ff78 	bl	80084c0 <std>
 80085d0:	2301      	movs	r3, #1
 80085d2:	61a3      	str	r3, [r4, #24]
 80085d4:	e7d2      	b.n	800857c <__sinit+0xc>
 80085d6:	bf00      	nop
 80085d8:	0801eb64 	.word	0x0801eb64
 80085dc:	08008509 	.word	0x08008509

080085e0 <__sfp>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	4607      	mov	r7, r0
 80085e4:	f7ff ffac 	bl	8008540 <__sfp_lock_acquire>
 80085e8:	4b1e      	ldr	r3, [pc, #120]	; (8008664 <__sfp+0x84>)
 80085ea:	681e      	ldr	r6, [r3, #0]
 80085ec:	69b3      	ldr	r3, [r6, #24]
 80085ee:	b913      	cbnz	r3, 80085f6 <__sfp+0x16>
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff ffbd 	bl	8008570 <__sinit>
 80085f6:	3648      	adds	r6, #72	; 0x48
 80085f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085fc:	3b01      	subs	r3, #1
 80085fe:	d503      	bpl.n	8008608 <__sfp+0x28>
 8008600:	6833      	ldr	r3, [r6, #0]
 8008602:	b30b      	cbz	r3, 8008648 <__sfp+0x68>
 8008604:	6836      	ldr	r6, [r6, #0]
 8008606:	e7f7      	b.n	80085f8 <__sfp+0x18>
 8008608:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800860c:	b9d5      	cbnz	r5, 8008644 <__sfp+0x64>
 800860e:	4b16      	ldr	r3, [pc, #88]	; (8008668 <__sfp+0x88>)
 8008610:	60e3      	str	r3, [r4, #12]
 8008612:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008616:	6665      	str	r5, [r4, #100]	; 0x64
 8008618:	f000 f847 	bl	80086aa <__retarget_lock_init_recursive>
 800861c:	f7ff ff96 	bl	800854c <__sfp_lock_release>
 8008620:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008624:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008628:	6025      	str	r5, [r4, #0]
 800862a:	61a5      	str	r5, [r4, #24]
 800862c:	2208      	movs	r2, #8
 800862e:	4629      	mov	r1, r5
 8008630:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008634:	f7ff fd16 	bl	8008064 <memset>
 8008638:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800863c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008640:	4620      	mov	r0, r4
 8008642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008644:	3468      	adds	r4, #104	; 0x68
 8008646:	e7d9      	b.n	80085fc <__sfp+0x1c>
 8008648:	2104      	movs	r1, #4
 800864a:	4638      	mov	r0, r7
 800864c:	f7ff ff62 	bl	8008514 <__sfmoreglue>
 8008650:	4604      	mov	r4, r0
 8008652:	6030      	str	r0, [r6, #0]
 8008654:	2800      	cmp	r0, #0
 8008656:	d1d5      	bne.n	8008604 <__sfp+0x24>
 8008658:	f7ff ff78 	bl	800854c <__sfp_lock_release>
 800865c:	230c      	movs	r3, #12
 800865e:	603b      	str	r3, [r7, #0]
 8008660:	e7ee      	b.n	8008640 <__sfp+0x60>
 8008662:	bf00      	nop
 8008664:	0801eb64 	.word	0x0801eb64
 8008668:	ffff0001 	.word	0xffff0001

0800866c <_fwalk_reent>:
 800866c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008670:	4606      	mov	r6, r0
 8008672:	4688      	mov	r8, r1
 8008674:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008678:	2700      	movs	r7, #0
 800867a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800867e:	f1b9 0901 	subs.w	r9, r9, #1
 8008682:	d505      	bpl.n	8008690 <_fwalk_reent+0x24>
 8008684:	6824      	ldr	r4, [r4, #0]
 8008686:	2c00      	cmp	r4, #0
 8008688:	d1f7      	bne.n	800867a <_fwalk_reent+0xe>
 800868a:	4638      	mov	r0, r7
 800868c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008690:	89ab      	ldrh	r3, [r5, #12]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d907      	bls.n	80086a6 <_fwalk_reent+0x3a>
 8008696:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800869a:	3301      	adds	r3, #1
 800869c:	d003      	beq.n	80086a6 <_fwalk_reent+0x3a>
 800869e:	4629      	mov	r1, r5
 80086a0:	4630      	mov	r0, r6
 80086a2:	47c0      	blx	r8
 80086a4:	4307      	orrs	r7, r0
 80086a6:	3568      	adds	r5, #104	; 0x68
 80086a8:	e7e9      	b.n	800867e <_fwalk_reent+0x12>

080086aa <__retarget_lock_init_recursive>:
 80086aa:	4770      	bx	lr

080086ac <__retarget_lock_acquire_recursive>:
 80086ac:	4770      	bx	lr

080086ae <__retarget_lock_release_recursive>:
 80086ae:	4770      	bx	lr

080086b0 <__swhatbuf_r>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	460e      	mov	r6, r1
 80086b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b8:	2900      	cmp	r1, #0
 80086ba:	b096      	sub	sp, #88	; 0x58
 80086bc:	4614      	mov	r4, r2
 80086be:	461d      	mov	r5, r3
 80086c0:	da08      	bge.n	80086d4 <__swhatbuf_r+0x24>
 80086c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	602a      	str	r2, [r5, #0]
 80086ca:	061a      	lsls	r2, r3, #24
 80086cc:	d410      	bmi.n	80086f0 <__swhatbuf_r+0x40>
 80086ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d2:	e00e      	b.n	80086f2 <__swhatbuf_r+0x42>
 80086d4:	466a      	mov	r2, sp
 80086d6:	f000 fcdd 	bl	8009094 <_fstat_r>
 80086da:	2800      	cmp	r0, #0
 80086dc:	dbf1      	blt.n	80086c2 <__swhatbuf_r+0x12>
 80086de:	9a01      	ldr	r2, [sp, #4]
 80086e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086e8:	425a      	negs	r2, r3
 80086ea:	415a      	adcs	r2, r3
 80086ec:	602a      	str	r2, [r5, #0]
 80086ee:	e7ee      	b.n	80086ce <__swhatbuf_r+0x1e>
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	2000      	movs	r0, #0
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	b016      	add	sp, #88	; 0x58
 80086f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080086fc <__smakebuf_r>:
 80086fc:	898b      	ldrh	r3, [r1, #12]
 80086fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008700:	079d      	lsls	r5, r3, #30
 8008702:	4606      	mov	r6, r0
 8008704:	460c      	mov	r4, r1
 8008706:	d507      	bpl.n	8008718 <__smakebuf_r+0x1c>
 8008708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	6123      	str	r3, [r4, #16]
 8008710:	2301      	movs	r3, #1
 8008712:	6163      	str	r3, [r4, #20]
 8008714:	b002      	add	sp, #8
 8008716:	bd70      	pop	{r4, r5, r6, pc}
 8008718:	ab01      	add	r3, sp, #4
 800871a:	466a      	mov	r2, sp
 800871c:	f7ff ffc8 	bl	80086b0 <__swhatbuf_r>
 8008720:	9900      	ldr	r1, [sp, #0]
 8008722:	4605      	mov	r5, r0
 8008724:	4630      	mov	r0, r6
 8008726:	f000 f895 	bl	8008854 <_malloc_r>
 800872a:	b948      	cbnz	r0, 8008740 <__smakebuf_r+0x44>
 800872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008730:	059a      	lsls	r2, r3, #22
 8008732:	d4ef      	bmi.n	8008714 <__smakebuf_r+0x18>
 8008734:	f023 0303 	bic.w	r3, r3, #3
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	e7e3      	b.n	8008708 <__smakebuf_r+0xc>
 8008740:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <__smakebuf_r+0x7c>)
 8008742:	62b3      	str	r3, [r6, #40]	; 0x28
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	6020      	str	r0, [r4, #0]
 8008748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	9b00      	ldr	r3, [sp, #0]
 8008750:	6163      	str	r3, [r4, #20]
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	6120      	str	r0, [r4, #16]
 8008756:	b15b      	cbz	r3, 8008770 <__smakebuf_r+0x74>
 8008758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800875c:	4630      	mov	r0, r6
 800875e:	f000 fcab 	bl	80090b8 <_isatty_r>
 8008762:	b128      	cbz	r0, 8008770 <__smakebuf_r+0x74>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f023 0303 	bic.w	r3, r3, #3
 800876a:	f043 0301 	orr.w	r3, r3, #1
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	89a0      	ldrh	r0, [r4, #12]
 8008772:	4305      	orrs	r5, r0
 8008774:	81a5      	strh	r5, [r4, #12]
 8008776:	e7cd      	b.n	8008714 <__smakebuf_r+0x18>
 8008778:	08008509 	.word	0x08008509

0800877c <_free_r>:
 800877c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800877e:	2900      	cmp	r1, #0
 8008780:	d044      	beq.n	800880c <_free_r+0x90>
 8008782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008786:	9001      	str	r0, [sp, #4]
 8008788:	2b00      	cmp	r3, #0
 800878a:	f1a1 0404 	sub.w	r4, r1, #4
 800878e:	bfb8      	it	lt
 8008790:	18e4      	addlt	r4, r4, r3
 8008792:	f000 fcb3 	bl	80090fc <__malloc_lock>
 8008796:	4a1e      	ldr	r2, [pc, #120]	; (8008810 <_free_r+0x94>)
 8008798:	9801      	ldr	r0, [sp, #4]
 800879a:	6813      	ldr	r3, [r2, #0]
 800879c:	b933      	cbnz	r3, 80087ac <_free_r+0x30>
 800879e:	6063      	str	r3, [r4, #4]
 80087a0:	6014      	str	r4, [r2, #0]
 80087a2:	b003      	add	sp, #12
 80087a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087a8:	f000 bcae 	b.w	8009108 <__malloc_unlock>
 80087ac:	42a3      	cmp	r3, r4
 80087ae:	d908      	bls.n	80087c2 <_free_r+0x46>
 80087b0:	6825      	ldr	r5, [r4, #0]
 80087b2:	1961      	adds	r1, r4, r5
 80087b4:	428b      	cmp	r3, r1
 80087b6:	bf01      	itttt	eq
 80087b8:	6819      	ldreq	r1, [r3, #0]
 80087ba:	685b      	ldreq	r3, [r3, #4]
 80087bc:	1949      	addeq	r1, r1, r5
 80087be:	6021      	streq	r1, [r4, #0]
 80087c0:	e7ed      	b.n	800879e <_free_r+0x22>
 80087c2:	461a      	mov	r2, r3
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	b10b      	cbz	r3, 80087cc <_free_r+0x50>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d9fa      	bls.n	80087c2 <_free_r+0x46>
 80087cc:	6811      	ldr	r1, [r2, #0]
 80087ce:	1855      	adds	r5, r2, r1
 80087d0:	42a5      	cmp	r5, r4
 80087d2:	d10b      	bne.n	80087ec <_free_r+0x70>
 80087d4:	6824      	ldr	r4, [r4, #0]
 80087d6:	4421      	add	r1, r4
 80087d8:	1854      	adds	r4, r2, r1
 80087da:	42a3      	cmp	r3, r4
 80087dc:	6011      	str	r1, [r2, #0]
 80087de:	d1e0      	bne.n	80087a2 <_free_r+0x26>
 80087e0:	681c      	ldr	r4, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	6053      	str	r3, [r2, #4]
 80087e6:	4421      	add	r1, r4
 80087e8:	6011      	str	r1, [r2, #0]
 80087ea:	e7da      	b.n	80087a2 <_free_r+0x26>
 80087ec:	d902      	bls.n	80087f4 <_free_r+0x78>
 80087ee:	230c      	movs	r3, #12
 80087f0:	6003      	str	r3, [r0, #0]
 80087f2:	e7d6      	b.n	80087a2 <_free_r+0x26>
 80087f4:	6825      	ldr	r5, [r4, #0]
 80087f6:	1961      	adds	r1, r4, r5
 80087f8:	428b      	cmp	r3, r1
 80087fa:	bf04      	itt	eq
 80087fc:	6819      	ldreq	r1, [r3, #0]
 80087fe:	685b      	ldreq	r3, [r3, #4]
 8008800:	6063      	str	r3, [r4, #4]
 8008802:	bf04      	itt	eq
 8008804:	1949      	addeq	r1, r1, r5
 8008806:	6021      	streq	r1, [r4, #0]
 8008808:	6054      	str	r4, [r2, #4]
 800880a:	e7ca      	b.n	80087a2 <_free_r+0x26>
 800880c:	b003      	add	sp, #12
 800880e:	bd30      	pop	{r4, r5, pc}
 8008810:	20000e10 	.word	0x20000e10

08008814 <sbrk_aligned>:
 8008814:	b570      	push	{r4, r5, r6, lr}
 8008816:	4e0e      	ldr	r6, [pc, #56]	; (8008850 <sbrk_aligned+0x3c>)
 8008818:	460c      	mov	r4, r1
 800881a:	6831      	ldr	r1, [r6, #0]
 800881c:	4605      	mov	r5, r0
 800881e:	b911      	cbnz	r1, 8008826 <sbrk_aligned+0x12>
 8008820:	f000 fbc2 	bl	8008fa8 <_sbrk_r>
 8008824:	6030      	str	r0, [r6, #0]
 8008826:	4621      	mov	r1, r4
 8008828:	4628      	mov	r0, r5
 800882a:	f000 fbbd 	bl	8008fa8 <_sbrk_r>
 800882e:	1c43      	adds	r3, r0, #1
 8008830:	d00a      	beq.n	8008848 <sbrk_aligned+0x34>
 8008832:	1cc4      	adds	r4, r0, #3
 8008834:	f024 0403 	bic.w	r4, r4, #3
 8008838:	42a0      	cmp	r0, r4
 800883a:	d007      	beq.n	800884c <sbrk_aligned+0x38>
 800883c:	1a21      	subs	r1, r4, r0
 800883e:	4628      	mov	r0, r5
 8008840:	f000 fbb2 	bl	8008fa8 <_sbrk_r>
 8008844:	3001      	adds	r0, #1
 8008846:	d101      	bne.n	800884c <sbrk_aligned+0x38>
 8008848:	f04f 34ff 	mov.w	r4, #4294967295
 800884c:	4620      	mov	r0, r4
 800884e:	bd70      	pop	{r4, r5, r6, pc}
 8008850:	20000e14 	.word	0x20000e14

08008854 <_malloc_r>:
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	1ccd      	adds	r5, r1, #3
 800885a:	f025 0503 	bic.w	r5, r5, #3
 800885e:	3508      	adds	r5, #8
 8008860:	2d0c      	cmp	r5, #12
 8008862:	bf38      	it	cc
 8008864:	250c      	movcc	r5, #12
 8008866:	2d00      	cmp	r5, #0
 8008868:	4607      	mov	r7, r0
 800886a:	db01      	blt.n	8008870 <_malloc_r+0x1c>
 800886c:	42a9      	cmp	r1, r5
 800886e:	d905      	bls.n	800887c <_malloc_r+0x28>
 8008870:	230c      	movs	r3, #12
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	2600      	movs	r6, #0
 8008876:	4630      	mov	r0, r6
 8008878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800887c:	4e2e      	ldr	r6, [pc, #184]	; (8008938 <_malloc_r+0xe4>)
 800887e:	f000 fc3d 	bl	80090fc <__malloc_lock>
 8008882:	6833      	ldr	r3, [r6, #0]
 8008884:	461c      	mov	r4, r3
 8008886:	bb34      	cbnz	r4, 80088d6 <_malloc_r+0x82>
 8008888:	4629      	mov	r1, r5
 800888a:	4638      	mov	r0, r7
 800888c:	f7ff ffc2 	bl	8008814 <sbrk_aligned>
 8008890:	1c43      	adds	r3, r0, #1
 8008892:	4604      	mov	r4, r0
 8008894:	d14d      	bne.n	8008932 <_malloc_r+0xde>
 8008896:	6834      	ldr	r4, [r6, #0]
 8008898:	4626      	mov	r6, r4
 800889a:	2e00      	cmp	r6, #0
 800889c:	d140      	bne.n	8008920 <_malloc_r+0xcc>
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	4631      	mov	r1, r6
 80088a2:	4638      	mov	r0, r7
 80088a4:	eb04 0803 	add.w	r8, r4, r3
 80088a8:	f000 fb7e 	bl	8008fa8 <_sbrk_r>
 80088ac:	4580      	cmp	r8, r0
 80088ae:	d13a      	bne.n	8008926 <_malloc_r+0xd2>
 80088b0:	6821      	ldr	r1, [r4, #0]
 80088b2:	3503      	adds	r5, #3
 80088b4:	1a6d      	subs	r5, r5, r1
 80088b6:	f025 0503 	bic.w	r5, r5, #3
 80088ba:	3508      	adds	r5, #8
 80088bc:	2d0c      	cmp	r5, #12
 80088be:	bf38      	it	cc
 80088c0:	250c      	movcc	r5, #12
 80088c2:	4629      	mov	r1, r5
 80088c4:	4638      	mov	r0, r7
 80088c6:	f7ff ffa5 	bl	8008814 <sbrk_aligned>
 80088ca:	3001      	adds	r0, #1
 80088cc:	d02b      	beq.n	8008926 <_malloc_r+0xd2>
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	442b      	add	r3, r5
 80088d2:	6023      	str	r3, [r4, #0]
 80088d4:	e00e      	b.n	80088f4 <_malloc_r+0xa0>
 80088d6:	6822      	ldr	r2, [r4, #0]
 80088d8:	1b52      	subs	r2, r2, r5
 80088da:	d41e      	bmi.n	800891a <_malloc_r+0xc6>
 80088dc:	2a0b      	cmp	r2, #11
 80088de:	d916      	bls.n	800890e <_malloc_r+0xba>
 80088e0:	1961      	adds	r1, r4, r5
 80088e2:	42a3      	cmp	r3, r4
 80088e4:	6025      	str	r5, [r4, #0]
 80088e6:	bf18      	it	ne
 80088e8:	6059      	strne	r1, [r3, #4]
 80088ea:	6863      	ldr	r3, [r4, #4]
 80088ec:	bf08      	it	eq
 80088ee:	6031      	streq	r1, [r6, #0]
 80088f0:	5162      	str	r2, [r4, r5]
 80088f2:	604b      	str	r3, [r1, #4]
 80088f4:	4638      	mov	r0, r7
 80088f6:	f104 060b 	add.w	r6, r4, #11
 80088fa:	f000 fc05 	bl	8009108 <__malloc_unlock>
 80088fe:	f026 0607 	bic.w	r6, r6, #7
 8008902:	1d23      	adds	r3, r4, #4
 8008904:	1af2      	subs	r2, r6, r3
 8008906:	d0b6      	beq.n	8008876 <_malloc_r+0x22>
 8008908:	1b9b      	subs	r3, r3, r6
 800890a:	50a3      	str	r3, [r4, r2]
 800890c:	e7b3      	b.n	8008876 <_malloc_r+0x22>
 800890e:	6862      	ldr	r2, [r4, #4]
 8008910:	42a3      	cmp	r3, r4
 8008912:	bf0c      	ite	eq
 8008914:	6032      	streq	r2, [r6, #0]
 8008916:	605a      	strne	r2, [r3, #4]
 8008918:	e7ec      	b.n	80088f4 <_malloc_r+0xa0>
 800891a:	4623      	mov	r3, r4
 800891c:	6864      	ldr	r4, [r4, #4]
 800891e:	e7b2      	b.n	8008886 <_malloc_r+0x32>
 8008920:	4634      	mov	r4, r6
 8008922:	6876      	ldr	r6, [r6, #4]
 8008924:	e7b9      	b.n	800889a <_malloc_r+0x46>
 8008926:	230c      	movs	r3, #12
 8008928:	603b      	str	r3, [r7, #0]
 800892a:	4638      	mov	r0, r7
 800892c:	f000 fbec 	bl	8009108 <__malloc_unlock>
 8008930:	e7a1      	b.n	8008876 <_malloc_r+0x22>
 8008932:	6025      	str	r5, [r4, #0]
 8008934:	e7de      	b.n	80088f4 <_malloc_r+0xa0>
 8008936:	bf00      	nop
 8008938:	20000e10 	.word	0x20000e10

0800893c <__sfputc_r>:
 800893c:	6893      	ldr	r3, [r2, #8]
 800893e:	3b01      	subs	r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	b410      	push	{r4}
 8008944:	6093      	str	r3, [r2, #8]
 8008946:	da08      	bge.n	800895a <__sfputc_r+0x1e>
 8008948:	6994      	ldr	r4, [r2, #24]
 800894a:	42a3      	cmp	r3, r4
 800894c:	db01      	blt.n	8008952 <__sfputc_r+0x16>
 800894e:	290a      	cmp	r1, #10
 8008950:	d103      	bne.n	800895a <__sfputc_r+0x1e>
 8008952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008956:	f7ff bc31 	b.w	80081bc <__swbuf_r>
 800895a:	6813      	ldr	r3, [r2, #0]
 800895c:	1c58      	adds	r0, r3, #1
 800895e:	6010      	str	r0, [r2, #0]
 8008960:	7019      	strb	r1, [r3, #0]
 8008962:	4608      	mov	r0, r1
 8008964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008968:	4770      	bx	lr

0800896a <__sfputs_r>:
 800896a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896c:	4606      	mov	r6, r0
 800896e:	460f      	mov	r7, r1
 8008970:	4614      	mov	r4, r2
 8008972:	18d5      	adds	r5, r2, r3
 8008974:	42ac      	cmp	r4, r5
 8008976:	d101      	bne.n	800897c <__sfputs_r+0x12>
 8008978:	2000      	movs	r0, #0
 800897a:	e007      	b.n	800898c <__sfputs_r+0x22>
 800897c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008980:	463a      	mov	r2, r7
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffda 	bl	800893c <__sfputc_r>
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d1f3      	bne.n	8008974 <__sfputs_r+0xa>
 800898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008990 <_vfiprintf_r>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	460d      	mov	r5, r1
 8008996:	b09d      	sub	sp, #116	; 0x74
 8008998:	4614      	mov	r4, r2
 800899a:	4698      	mov	r8, r3
 800899c:	4606      	mov	r6, r0
 800899e:	b118      	cbz	r0, 80089a8 <_vfiprintf_r+0x18>
 80089a0:	6983      	ldr	r3, [r0, #24]
 80089a2:	b90b      	cbnz	r3, 80089a8 <_vfiprintf_r+0x18>
 80089a4:	f7ff fde4 	bl	8008570 <__sinit>
 80089a8:	4b89      	ldr	r3, [pc, #548]	; (8008bd0 <_vfiprintf_r+0x240>)
 80089aa:	429d      	cmp	r5, r3
 80089ac:	d11b      	bne.n	80089e6 <_vfiprintf_r+0x56>
 80089ae:	6875      	ldr	r5, [r6, #4]
 80089b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089b2:	07d9      	lsls	r1, r3, #31
 80089b4:	d405      	bmi.n	80089c2 <_vfiprintf_r+0x32>
 80089b6:	89ab      	ldrh	r3, [r5, #12]
 80089b8:	059a      	lsls	r2, r3, #22
 80089ba:	d402      	bmi.n	80089c2 <_vfiprintf_r+0x32>
 80089bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089be:	f7ff fe75 	bl	80086ac <__retarget_lock_acquire_recursive>
 80089c2:	89ab      	ldrh	r3, [r5, #12]
 80089c4:	071b      	lsls	r3, r3, #28
 80089c6:	d501      	bpl.n	80089cc <_vfiprintf_r+0x3c>
 80089c8:	692b      	ldr	r3, [r5, #16]
 80089ca:	b9eb      	cbnz	r3, 8008a08 <_vfiprintf_r+0x78>
 80089cc:	4629      	mov	r1, r5
 80089ce:	4630      	mov	r0, r6
 80089d0:	f7ff fc46 	bl	8008260 <__swsetup_r>
 80089d4:	b1c0      	cbz	r0, 8008a08 <_vfiprintf_r+0x78>
 80089d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089d8:	07dc      	lsls	r4, r3, #31
 80089da:	d50e      	bpl.n	80089fa <_vfiprintf_r+0x6a>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	b01d      	add	sp, #116	; 0x74
 80089e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e6:	4b7b      	ldr	r3, [pc, #492]	; (8008bd4 <_vfiprintf_r+0x244>)
 80089e8:	429d      	cmp	r5, r3
 80089ea:	d101      	bne.n	80089f0 <_vfiprintf_r+0x60>
 80089ec:	68b5      	ldr	r5, [r6, #8]
 80089ee:	e7df      	b.n	80089b0 <_vfiprintf_r+0x20>
 80089f0:	4b79      	ldr	r3, [pc, #484]	; (8008bd8 <_vfiprintf_r+0x248>)
 80089f2:	429d      	cmp	r5, r3
 80089f4:	bf08      	it	eq
 80089f6:	68f5      	ldreq	r5, [r6, #12]
 80089f8:	e7da      	b.n	80089b0 <_vfiprintf_r+0x20>
 80089fa:	89ab      	ldrh	r3, [r5, #12]
 80089fc:	0598      	lsls	r0, r3, #22
 80089fe:	d4ed      	bmi.n	80089dc <_vfiprintf_r+0x4c>
 8008a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a02:	f7ff fe54 	bl	80086ae <__retarget_lock_release_recursive>
 8008a06:	e7e9      	b.n	80089dc <_vfiprintf_r+0x4c>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a0c:	2320      	movs	r3, #32
 8008a0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a16:	2330      	movs	r3, #48	; 0x30
 8008a18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008bdc <_vfiprintf_r+0x24c>
 8008a1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a20:	f04f 0901 	mov.w	r9, #1
 8008a24:	4623      	mov	r3, r4
 8008a26:	469a      	mov	sl, r3
 8008a28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2c:	b10a      	cbz	r2, 8008a32 <_vfiprintf_r+0xa2>
 8008a2e:	2a25      	cmp	r2, #37	; 0x25
 8008a30:	d1f9      	bne.n	8008a26 <_vfiprintf_r+0x96>
 8008a32:	ebba 0b04 	subs.w	fp, sl, r4
 8008a36:	d00b      	beq.n	8008a50 <_vfiprintf_r+0xc0>
 8008a38:	465b      	mov	r3, fp
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f7ff ff93 	bl	800896a <__sfputs_r>
 8008a44:	3001      	adds	r0, #1
 8008a46:	f000 80aa 	beq.w	8008b9e <_vfiprintf_r+0x20e>
 8008a4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a4c:	445a      	add	r2, fp
 8008a4e:	9209      	str	r2, [sp, #36]	; 0x24
 8008a50:	f89a 3000 	ldrb.w	r3, [sl]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 80a2 	beq.w	8008b9e <_vfiprintf_r+0x20e>
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a64:	f10a 0a01 	add.w	sl, sl, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	9307      	str	r3, [sp, #28]
 8008a6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a70:	931a      	str	r3, [sp, #104]	; 0x68
 8008a72:	4654      	mov	r4, sl
 8008a74:	2205      	movs	r2, #5
 8008a76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a7a:	4858      	ldr	r0, [pc, #352]	; (8008bdc <_vfiprintf_r+0x24c>)
 8008a7c:	f7f7 fbb0 	bl	80001e0 <memchr>
 8008a80:	9a04      	ldr	r2, [sp, #16]
 8008a82:	b9d8      	cbnz	r0, 8008abc <_vfiprintf_r+0x12c>
 8008a84:	06d1      	lsls	r1, r2, #27
 8008a86:	bf44      	itt	mi
 8008a88:	2320      	movmi	r3, #32
 8008a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a8e:	0713      	lsls	r3, r2, #28
 8008a90:	bf44      	itt	mi
 8008a92:	232b      	movmi	r3, #43	; 0x2b
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a98:	f89a 3000 	ldrb.w	r3, [sl]
 8008a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8008a9e:	d015      	beq.n	8008acc <_vfiprintf_r+0x13c>
 8008aa0:	9a07      	ldr	r2, [sp, #28]
 8008aa2:	4654      	mov	r4, sl
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f04f 0c0a 	mov.w	ip, #10
 8008aaa:	4621      	mov	r1, r4
 8008aac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ab0:	3b30      	subs	r3, #48	; 0x30
 8008ab2:	2b09      	cmp	r3, #9
 8008ab4:	d94e      	bls.n	8008b54 <_vfiprintf_r+0x1c4>
 8008ab6:	b1b0      	cbz	r0, 8008ae6 <_vfiprintf_r+0x156>
 8008ab8:	9207      	str	r2, [sp, #28]
 8008aba:	e014      	b.n	8008ae6 <_vfiprintf_r+0x156>
 8008abc:	eba0 0308 	sub.w	r3, r0, r8
 8008ac0:	fa09 f303 	lsl.w	r3, r9, r3
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	9304      	str	r3, [sp, #16]
 8008ac8:	46a2      	mov	sl, r4
 8008aca:	e7d2      	b.n	8008a72 <_vfiprintf_r+0xe2>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	1d19      	adds	r1, r3, #4
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	9103      	str	r1, [sp, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfbb      	ittet	lt
 8008ad8:	425b      	neglt	r3, r3
 8008ada:	f042 0202 	orrlt.w	r2, r2, #2
 8008ade:	9307      	strge	r3, [sp, #28]
 8008ae0:	9307      	strlt	r3, [sp, #28]
 8008ae2:	bfb8      	it	lt
 8008ae4:	9204      	strlt	r2, [sp, #16]
 8008ae6:	7823      	ldrb	r3, [r4, #0]
 8008ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8008aea:	d10c      	bne.n	8008b06 <_vfiprintf_r+0x176>
 8008aec:	7863      	ldrb	r3, [r4, #1]
 8008aee:	2b2a      	cmp	r3, #42	; 0x2a
 8008af0:	d135      	bne.n	8008b5e <_vfiprintf_r+0x1ce>
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	1d1a      	adds	r2, r3, #4
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	9203      	str	r2, [sp, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	bfb8      	it	lt
 8008afe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b02:	3402      	adds	r4, #2
 8008b04:	9305      	str	r3, [sp, #20]
 8008b06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008bec <_vfiprintf_r+0x25c>
 8008b0a:	7821      	ldrb	r1, [r4, #0]
 8008b0c:	2203      	movs	r2, #3
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f7f7 fb66 	bl	80001e0 <memchr>
 8008b14:	b140      	cbz	r0, 8008b28 <_vfiprintf_r+0x198>
 8008b16:	2340      	movs	r3, #64	; 0x40
 8008b18:	eba0 000a 	sub.w	r0, r0, sl
 8008b1c:	fa03 f000 	lsl.w	r0, r3, r0
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	4303      	orrs	r3, r0
 8008b24:	3401      	adds	r4, #1
 8008b26:	9304      	str	r3, [sp, #16]
 8008b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b2c:	482c      	ldr	r0, [pc, #176]	; (8008be0 <_vfiprintf_r+0x250>)
 8008b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b32:	2206      	movs	r2, #6
 8008b34:	f7f7 fb54 	bl	80001e0 <memchr>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d03f      	beq.n	8008bbc <_vfiprintf_r+0x22c>
 8008b3c:	4b29      	ldr	r3, [pc, #164]	; (8008be4 <_vfiprintf_r+0x254>)
 8008b3e:	bb1b      	cbnz	r3, 8008b88 <_vfiprintf_r+0x1f8>
 8008b40:	9b03      	ldr	r3, [sp, #12]
 8008b42:	3307      	adds	r3, #7
 8008b44:	f023 0307 	bic.w	r3, r3, #7
 8008b48:	3308      	adds	r3, #8
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b4e:	443b      	add	r3, r7
 8008b50:	9309      	str	r3, [sp, #36]	; 0x24
 8008b52:	e767      	b.n	8008a24 <_vfiprintf_r+0x94>
 8008b54:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b58:	460c      	mov	r4, r1
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	e7a5      	b.n	8008aaa <_vfiprintf_r+0x11a>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	3401      	adds	r4, #1
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	4619      	mov	r1, r3
 8008b66:	f04f 0c0a 	mov.w	ip, #10
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b70:	3a30      	subs	r2, #48	; 0x30
 8008b72:	2a09      	cmp	r2, #9
 8008b74:	d903      	bls.n	8008b7e <_vfiprintf_r+0x1ee>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0c5      	beq.n	8008b06 <_vfiprintf_r+0x176>
 8008b7a:	9105      	str	r1, [sp, #20]
 8008b7c:	e7c3      	b.n	8008b06 <_vfiprintf_r+0x176>
 8008b7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b82:	4604      	mov	r4, r0
 8008b84:	2301      	movs	r3, #1
 8008b86:	e7f0      	b.n	8008b6a <_vfiprintf_r+0x1da>
 8008b88:	ab03      	add	r3, sp, #12
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	462a      	mov	r2, r5
 8008b8e:	4b16      	ldr	r3, [pc, #88]	; (8008be8 <_vfiprintf_r+0x258>)
 8008b90:	a904      	add	r1, sp, #16
 8008b92:	4630      	mov	r0, r6
 8008b94:	f3af 8000 	nop.w
 8008b98:	4607      	mov	r7, r0
 8008b9a:	1c78      	adds	r0, r7, #1
 8008b9c:	d1d6      	bne.n	8008b4c <_vfiprintf_r+0x1bc>
 8008b9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ba0:	07d9      	lsls	r1, r3, #31
 8008ba2:	d405      	bmi.n	8008bb0 <_vfiprintf_r+0x220>
 8008ba4:	89ab      	ldrh	r3, [r5, #12]
 8008ba6:	059a      	lsls	r2, r3, #22
 8008ba8:	d402      	bmi.n	8008bb0 <_vfiprintf_r+0x220>
 8008baa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bac:	f7ff fd7f 	bl	80086ae <__retarget_lock_release_recursive>
 8008bb0:	89ab      	ldrh	r3, [r5, #12]
 8008bb2:	065b      	lsls	r3, r3, #25
 8008bb4:	f53f af12 	bmi.w	80089dc <_vfiprintf_r+0x4c>
 8008bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bba:	e711      	b.n	80089e0 <_vfiprintf_r+0x50>
 8008bbc:	ab03      	add	r3, sp, #12
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4b09      	ldr	r3, [pc, #36]	; (8008be8 <_vfiprintf_r+0x258>)
 8008bc4:	a904      	add	r1, sp, #16
 8008bc6:	4630      	mov	r0, r6
 8008bc8:	f000 f880 	bl	8008ccc <_printf_i>
 8008bcc:	e7e4      	b.n	8008b98 <_vfiprintf_r+0x208>
 8008bce:	bf00      	nop
 8008bd0:	0801eb88 	.word	0x0801eb88
 8008bd4:	0801eba8 	.word	0x0801eba8
 8008bd8:	0801eb68 	.word	0x0801eb68
 8008bdc:	0801ebc8 	.word	0x0801ebc8
 8008be0:	0801ebd2 	.word	0x0801ebd2
 8008be4:	00000000 	.word	0x00000000
 8008be8:	0800896b 	.word	0x0800896b
 8008bec:	0801ebce 	.word	0x0801ebce

08008bf0 <_printf_common>:
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bf4:	4616      	mov	r6, r2
 8008bf6:	4699      	mov	r9, r3
 8008bf8:	688a      	ldr	r2, [r1, #8]
 8008bfa:	690b      	ldr	r3, [r1, #16]
 8008bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c00:	4293      	cmp	r3, r2
 8008c02:	bfb8      	it	lt
 8008c04:	4613      	movlt	r3, r2
 8008c06:	6033      	str	r3, [r6, #0]
 8008c08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	b10a      	cbz	r2, 8008c16 <_printf_common+0x26>
 8008c12:	3301      	adds	r3, #1
 8008c14:	6033      	str	r3, [r6, #0]
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	0699      	lsls	r1, r3, #26
 8008c1a:	bf42      	ittt	mi
 8008c1c:	6833      	ldrmi	r3, [r6, #0]
 8008c1e:	3302      	addmi	r3, #2
 8008c20:	6033      	strmi	r3, [r6, #0]
 8008c22:	6825      	ldr	r5, [r4, #0]
 8008c24:	f015 0506 	ands.w	r5, r5, #6
 8008c28:	d106      	bne.n	8008c38 <_printf_common+0x48>
 8008c2a:	f104 0a19 	add.w	sl, r4, #25
 8008c2e:	68e3      	ldr	r3, [r4, #12]
 8008c30:	6832      	ldr	r2, [r6, #0]
 8008c32:	1a9b      	subs	r3, r3, r2
 8008c34:	42ab      	cmp	r3, r5
 8008c36:	dc26      	bgt.n	8008c86 <_printf_common+0x96>
 8008c38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c3c:	1e13      	subs	r3, r2, #0
 8008c3e:	6822      	ldr	r2, [r4, #0]
 8008c40:	bf18      	it	ne
 8008c42:	2301      	movne	r3, #1
 8008c44:	0692      	lsls	r2, r2, #26
 8008c46:	d42b      	bmi.n	8008ca0 <_printf_common+0xb0>
 8008c48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c4c:	4649      	mov	r1, r9
 8008c4e:	4638      	mov	r0, r7
 8008c50:	47c0      	blx	r8
 8008c52:	3001      	adds	r0, #1
 8008c54:	d01e      	beq.n	8008c94 <_printf_common+0xa4>
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	68e5      	ldr	r5, [r4, #12]
 8008c5a:	6832      	ldr	r2, [r6, #0]
 8008c5c:	f003 0306 	and.w	r3, r3, #6
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	bf08      	it	eq
 8008c64:	1aad      	subeq	r5, r5, r2
 8008c66:	68a3      	ldr	r3, [r4, #8]
 8008c68:	6922      	ldr	r2, [r4, #16]
 8008c6a:	bf0c      	ite	eq
 8008c6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c70:	2500      	movne	r5, #0
 8008c72:	4293      	cmp	r3, r2
 8008c74:	bfc4      	itt	gt
 8008c76:	1a9b      	subgt	r3, r3, r2
 8008c78:	18ed      	addgt	r5, r5, r3
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	341a      	adds	r4, #26
 8008c7e:	42b5      	cmp	r5, r6
 8008c80:	d11a      	bne.n	8008cb8 <_printf_common+0xc8>
 8008c82:	2000      	movs	r0, #0
 8008c84:	e008      	b.n	8008c98 <_printf_common+0xa8>
 8008c86:	2301      	movs	r3, #1
 8008c88:	4652      	mov	r2, sl
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	47c0      	blx	r8
 8008c90:	3001      	adds	r0, #1
 8008c92:	d103      	bne.n	8008c9c <_printf_common+0xac>
 8008c94:	f04f 30ff 	mov.w	r0, #4294967295
 8008c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9c:	3501      	adds	r5, #1
 8008c9e:	e7c6      	b.n	8008c2e <_printf_common+0x3e>
 8008ca0:	18e1      	adds	r1, r4, r3
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	2030      	movs	r0, #48	; 0x30
 8008ca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008caa:	4422      	add	r2, r4
 8008cac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cb4:	3302      	adds	r3, #2
 8008cb6:	e7c7      	b.n	8008c48 <_printf_common+0x58>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4622      	mov	r2, r4
 8008cbc:	4649      	mov	r1, r9
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	47c0      	blx	r8
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d0e6      	beq.n	8008c94 <_printf_common+0xa4>
 8008cc6:	3601      	adds	r6, #1
 8008cc8:	e7d9      	b.n	8008c7e <_printf_common+0x8e>
	...

08008ccc <_printf_i>:
 8008ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	7e0f      	ldrb	r7, [r1, #24]
 8008cd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cd4:	2f78      	cmp	r7, #120	; 0x78
 8008cd6:	4691      	mov	r9, r2
 8008cd8:	4680      	mov	r8, r0
 8008cda:	460c      	mov	r4, r1
 8008cdc:	469a      	mov	sl, r3
 8008cde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ce2:	d807      	bhi.n	8008cf4 <_printf_i+0x28>
 8008ce4:	2f62      	cmp	r7, #98	; 0x62
 8008ce6:	d80a      	bhi.n	8008cfe <_printf_i+0x32>
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	f000 80d8 	beq.w	8008e9e <_printf_i+0x1d2>
 8008cee:	2f58      	cmp	r7, #88	; 0x58
 8008cf0:	f000 80a3 	beq.w	8008e3a <_printf_i+0x16e>
 8008cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cfc:	e03a      	b.n	8008d74 <_printf_i+0xa8>
 8008cfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d02:	2b15      	cmp	r3, #21
 8008d04:	d8f6      	bhi.n	8008cf4 <_printf_i+0x28>
 8008d06:	a101      	add	r1, pc, #4	; (adr r1, 8008d0c <_printf_i+0x40>)
 8008d08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d0c:	08008d65 	.word	0x08008d65
 8008d10:	08008d79 	.word	0x08008d79
 8008d14:	08008cf5 	.word	0x08008cf5
 8008d18:	08008cf5 	.word	0x08008cf5
 8008d1c:	08008cf5 	.word	0x08008cf5
 8008d20:	08008cf5 	.word	0x08008cf5
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008cf5 	.word	0x08008cf5
 8008d2c:	08008cf5 	.word	0x08008cf5
 8008d30:	08008cf5 	.word	0x08008cf5
 8008d34:	08008cf5 	.word	0x08008cf5
 8008d38:	08008e85 	.word	0x08008e85
 8008d3c:	08008da9 	.word	0x08008da9
 8008d40:	08008e67 	.word	0x08008e67
 8008d44:	08008cf5 	.word	0x08008cf5
 8008d48:	08008cf5 	.word	0x08008cf5
 8008d4c:	08008ea7 	.word	0x08008ea7
 8008d50:	08008cf5 	.word	0x08008cf5
 8008d54:	08008da9 	.word	0x08008da9
 8008d58:	08008cf5 	.word	0x08008cf5
 8008d5c:	08008cf5 	.word	0x08008cf5
 8008d60:	08008e6f 	.word	0x08008e6f
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	1d1a      	adds	r2, r3, #4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	602a      	str	r2, [r5, #0]
 8008d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d74:	2301      	movs	r3, #1
 8008d76:	e0a3      	b.n	8008ec0 <_printf_i+0x1f4>
 8008d78:	6820      	ldr	r0, [r4, #0]
 8008d7a:	6829      	ldr	r1, [r5, #0]
 8008d7c:	0606      	lsls	r6, r0, #24
 8008d7e:	f101 0304 	add.w	r3, r1, #4
 8008d82:	d50a      	bpl.n	8008d9a <_printf_i+0xce>
 8008d84:	680e      	ldr	r6, [r1, #0]
 8008d86:	602b      	str	r3, [r5, #0]
 8008d88:	2e00      	cmp	r6, #0
 8008d8a:	da03      	bge.n	8008d94 <_printf_i+0xc8>
 8008d8c:	232d      	movs	r3, #45	; 0x2d
 8008d8e:	4276      	negs	r6, r6
 8008d90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d94:	485e      	ldr	r0, [pc, #376]	; (8008f10 <_printf_i+0x244>)
 8008d96:	230a      	movs	r3, #10
 8008d98:	e019      	b.n	8008dce <_printf_i+0x102>
 8008d9a:	680e      	ldr	r6, [r1, #0]
 8008d9c:	602b      	str	r3, [r5, #0]
 8008d9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008da2:	bf18      	it	ne
 8008da4:	b236      	sxthne	r6, r6
 8008da6:	e7ef      	b.n	8008d88 <_printf_i+0xbc>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6820      	ldr	r0, [r4, #0]
 8008dac:	1d19      	adds	r1, r3, #4
 8008dae:	6029      	str	r1, [r5, #0]
 8008db0:	0601      	lsls	r1, r0, #24
 8008db2:	d501      	bpl.n	8008db8 <_printf_i+0xec>
 8008db4:	681e      	ldr	r6, [r3, #0]
 8008db6:	e002      	b.n	8008dbe <_printf_i+0xf2>
 8008db8:	0646      	lsls	r6, r0, #25
 8008dba:	d5fb      	bpl.n	8008db4 <_printf_i+0xe8>
 8008dbc:	881e      	ldrh	r6, [r3, #0]
 8008dbe:	4854      	ldr	r0, [pc, #336]	; (8008f10 <_printf_i+0x244>)
 8008dc0:	2f6f      	cmp	r7, #111	; 0x6f
 8008dc2:	bf0c      	ite	eq
 8008dc4:	2308      	moveq	r3, #8
 8008dc6:	230a      	movne	r3, #10
 8008dc8:	2100      	movs	r1, #0
 8008dca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dce:	6865      	ldr	r5, [r4, #4]
 8008dd0:	60a5      	str	r5, [r4, #8]
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	bfa2      	ittt	ge
 8008dd6:	6821      	ldrge	r1, [r4, #0]
 8008dd8:	f021 0104 	bicge.w	r1, r1, #4
 8008ddc:	6021      	strge	r1, [r4, #0]
 8008dde:	b90e      	cbnz	r6, 8008de4 <_printf_i+0x118>
 8008de0:	2d00      	cmp	r5, #0
 8008de2:	d04d      	beq.n	8008e80 <_printf_i+0x1b4>
 8008de4:	4615      	mov	r5, r2
 8008de6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dea:	fb03 6711 	mls	r7, r3, r1, r6
 8008dee:	5dc7      	ldrb	r7, [r0, r7]
 8008df0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008df4:	4637      	mov	r7, r6
 8008df6:	42bb      	cmp	r3, r7
 8008df8:	460e      	mov	r6, r1
 8008dfa:	d9f4      	bls.n	8008de6 <_printf_i+0x11a>
 8008dfc:	2b08      	cmp	r3, #8
 8008dfe:	d10b      	bne.n	8008e18 <_printf_i+0x14c>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	07de      	lsls	r6, r3, #31
 8008e04:	d508      	bpl.n	8008e18 <_printf_i+0x14c>
 8008e06:	6923      	ldr	r3, [r4, #16]
 8008e08:	6861      	ldr	r1, [r4, #4]
 8008e0a:	4299      	cmp	r1, r3
 8008e0c:	bfde      	ittt	le
 8008e0e:	2330      	movle	r3, #48	; 0x30
 8008e10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e18:	1b52      	subs	r2, r2, r5
 8008e1a:	6122      	str	r2, [r4, #16]
 8008e1c:	f8cd a000 	str.w	sl, [sp]
 8008e20:	464b      	mov	r3, r9
 8008e22:	aa03      	add	r2, sp, #12
 8008e24:	4621      	mov	r1, r4
 8008e26:	4640      	mov	r0, r8
 8008e28:	f7ff fee2 	bl	8008bf0 <_printf_common>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d14c      	bne.n	8008eca <_printf_i+0x1fe>
 8008e30:	f04f 30ff 	mov.w	r0, #4294967295
 8008e34:	b004      	add	sp, #16
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	4835      	ldr	r0, [pc, #212]	; (8008f10 <_printf_i+0x244>)
 8008e3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e40:	6829      	ldr	r1, [r5, #0]
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e48:	6029      	str	r1, [r5, #0]
 8008e4a:	061d      	lsls	r5, r3, #24
 8008e4c:	d514      	bpl.n	8008e78 <_printf_i+0x1ac>
 8008e4e:	07df      	lsls	r7, r3, #31
 8008e50:	bf44      	itt	mi
 8008e52:	f043 0320 	orrmi.w	r3, r3, #32
 8008e56:	6023      	strmi	r3, [r4, #0]
 8008e58:	b91e      	cbnz	r6, 8008e62 <_printf_i+0x196>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	f023 0320 	bic.w	r3, r3, #32
 8008e60:	6023      	str	r3, [r4, #0]
 8008e62:	2310      	movs	r3, #16
 8008e64:	e7b0      	b.n	8008dc8 <_printf_i+0xfc>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	f043 0320 	orr.w	r3, r3, #32
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	2378      	movs	r3, #120	; 0x78
 8008e70:	4828      	ldr	r0, [pc, #160]	; (8008f14 <_printf_i+0x248>)
 8008e72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e76:	e7e3      	b.n	8008e40 <_printf_i+0x174>
 8008e78:	0659      	lsls	r1, r3, #25
 8008e7a:	bf48      	it	mi
 8008e7c:	b2b6      	uxthmi	r6, r6
 8008e7e:	e7e6      	b.n	8008e4e <_printf_i+0x182>
 8008e80:	4615      	mov	r5, r2
 8008e82:	e7bb      	b.n	8008dfc <_printf_i+0x130>
 8008e84:	682b      	ldr	r3, [r5, #0]
 8008e86:	6826      	ldr	r6, [r4, #0]
 8008e88:	6961      	ldr	r1, [r4, #20]
 8008e8a:	1d18      	adds	r0, r3, #4
 8008e8c:	6028      	str	r0, [r5, #0]
 8008e8e:	0635      	lsls	r5, r6, #24
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	d501      	bpl.n	8008e98 <_printf_i+0x1cc>
 8008e94:	6019      	str	r1, [r3, #0]
 8008e96:	e002      	b.n	8008e9e <_printf_i+0x1d2>
 8008e98:	0670      	lsls	r0, r6, #25
 8008e9a:	d5fb      	bpl.n	8008e94 <_printf_i+0x1c8>
 8008e9c:	8019      	strh	r1, [r3, #0]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6123      	str	r3, [r4, #16]
 8008ea2:	4615      	mov	r5, r2
 8008ea4:	e7ba      	b.n	8008e1c <_printf_i+0x150>
 8008ea6:	682b      	ldr	r3, [r5, #0]
 8008ea8:	1d1a      	adds	r2, r3, #4
 8008eaa:	602a      	str	r2, [r5, #0]
 8008eac:	681d      	ldr	r5, [r3, #0]
 8008eae:	6862      	ldr	r2, [r4, #4]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7f7 f994 	bl	80001e0 <memchr>
 8008eb8:	b108      	cbz	r0, 8008ebe <_printf_i+0x1f2>
 8008eba:	1b40      	subs	r0, r0, r5
 8008ebc:	6060      	str	r0, [r4, #4]
 8008ebe:	6863      	ldr	r3, [r4, #4]
 8008ec0:	6123      	str	r3, [r4, #16]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ec8:	e7a8      	b.n	8008e1c <_printf_i+0x150>
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4649      	mov	r1, r9
 8008ed0:	4640      	mov	r0, r8
 8008ed2:	47d0      	blx	sl
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d0ab      	beq.n	8008e30 <_printf_i+0x164>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	079b      	lsls	r3, r3, #30
 8008edc:	d413      	bmi.n	8008f06 <_printf_i+0x23a>
 8008ede:	68e0      	ldr	r0, [r4, #12]
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	4298      	cmp	r0, r3
 8008ee4:	bfb8      	it	lt
 8008ee6:	4618      	movlt	r0, r3
 8008ee8:	e7a4      	b.n	8008e34 <_printf_i+0x168>
 8008eea:	2301      	movs	r3, #1
 8008eec:	4632      	mov	r2, r6
 8008eee:	4649      	mov	r1, r9
 8008ef0:	4640      	mov	r0, r8
 8008ef2:	47d0      	blx	sl
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d09b      	beq.n	8008e30 <_printf_i+0x164>
 8008ef8:	3501      	adds	r5, #1
 8008efa:	68e3      	ldr	r3, [r4, #12]
 8008efc:	9903      	ldr	r1, [sp, #12]
 8008efe:	1a5b      	subs	r3, r3, r1
 8008f00:	42ab      	cmp	r3, r5
 8008f02:	dcf2      	bgt.n	8008eea <_printf_i+0x21e>
 8008f04:	e7eb      	b.n	8008ede <_printf_i+0x212>
 8008f06:	2500      	movs	r5, #0
 8008f08:	f104 0619 	add.w	r6, r4, #25
 8008f0c:	e7f5      	b.n	8008efa <_printf_i+0x22e>
 8008f0e:	bf00      	nop
 8008f10:	0801ebd9 	.word	0x0801ebd9
 8008f14:	0801ebea 	.word	0x0801ebea

08008f18 <_putc_r>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	4606      	mov	r6, r0
 8008f20:	b118      	cbz	r0, 8008f2a <_putc_r+0x12>
 8008f22:	6983      	ldr	r3, [r0, #24]
 8008f24:	b90b      	cbnz	r3, 8008f2a <_putc_r+0x12>
 8008f26:	f7ff fb23 	bl	8008570 <__sinit>
 8008f2a:	4b1c      	ldr	r3, [pc, #112]	; (8008f9c <_putc_r+0x84>)
 8008f2c:	429c      	cmp	r4, r3
 8008f2e:	d124      	bne.n	8008f7a <_putc_r+0x62>
 8008f30:	6874      	ldr	r4, [r6, #4]
 8008f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f34:	07d8      	lsls	r0, r3, #31
 8008f36:	d405      	bmi.n	8008f44 <_putc_r+0x2c>
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	0599      	lsls	r1, r3, #22
 8008f3c:	d402      	bmi.n	8008f44 <_putc_r+0x2c>
 8008f3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f40:	f7ff fbb4 	bl	80086ac <__retarget_lock_acquire_recursive>
 8008f44:	68a3      	ldr	r3, [r4, #8]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	60a3      	str	r3, [r4, #8]
 8008f4c:	da05      	bge.n	8008f5a <_putc_r+0x42>
 8008f4e:	69a2      	ldr	r2, [r4, #24]
 8008f50:	4293      	cmp	r3, r2
 8008f52:	db1c      	blt.n	8008f8e <_putc_r+0x76>
 8008f54:	b2eb      	uxtb	r3, r5
 8008f56:	2b0a      	cmp	r3, #10
 8008f58:	d019      	beq.n	8008f8e <_putc_r+0x76>
 8008f5a:	6823      	ldr	r3, [r4, #0]
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	6022      	str	r2, [r4, #0]
 8008f60:	701d      	strb	r5, [r3, #0]
 8008f62:	b2ed      	uxtb	r5, r5
 8008f64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f66:	07da      	lsls	r2, r3, #31
 8008f68:	d405      	bmi.n	8008f76 <_putc_r+0x5e>
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	059b      	lsls	r3, r3, #22
 8008f6e:	d402      	bmi.n	8008f76 <_putc_r+0x5e>
 8008f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f72:	f7ff fb9c 	bl	80086ae <__retarget_lock_release_recursive>
 8008f76:	4628      	mov	r0, r5
 8008f78:	bd70      	pop	{r4, r5, r6, pc}
 8008f7a:	4b09      	ldr	r3, [pc, #36]	; (8008fa0 <_putc_r+0x88>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d101      	bne.n	8008f84 <_putc_r+0x6c>
 8008f80:	68b4      	ldr	r4, [r6, #8]
 8008f82:	e7d6      	b.n	8008f32 <_putc_r+0x1a>
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <_putc_r+0x8c>)
 8008f86:	429c      	cmp	r4, r3
 8008f88:	bf08      	it	eq
 8008f8a:	68f4      	ldreq	r4, [r6, #12]
 8008f8c:	e7d1      	b.n	8008f32 <_putc_r+0x1a>
 8008f8e:	4629      	mov	r1, r5
 8008f90:	4622      	mov	r2, r4
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff f912 	bl	80081bc <__swbuf_r>
 8008f98:	4605      	mov	r5, r0
 8008f9a:	e7e3      	b.n	8008f64 <_putc_r+0x4c>
 8008f9c:	0801eb88 	.word	0x0801eb88
 8008fa0:	0801eba8 	.word	0x0801eba8
 8008fa4:	0801eb68 	.word	0x0801eb68

08008fa8 <_sbrk_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d06      	ldr	r5, [pc, #24]	; (8008fc4 <_sbrk_r+0x1c>)
 8008fac:	2300      	movs	r3, #0
 8008fae:	4604      	mov	r4, r0
 8008fb0:	4608      	mov	r0, r1
 8008fb2:	602b      	str	r3, [r5, #0]
 8008fb4:	f7f7 fe64 	bl	8000c80 <_sbrk>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_sbrk_r+0x1a>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_sbrk_r+0x1a>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20000e18 	.word	0x20000e18

08008fc8 <__sread>:
 8008fc8:	b510      	push	{r4, lr}
 8008fca:	460c      	mov	r4, r1
 8008fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd0:	f000 f8a0 	bl	8009114 <_read_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	bfab      	itete	ge
 8008fd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fda:	89a3      	ldrhlt	r3, [r4, #12]
 8008fdc:	181b      	addge	r3, r3, r0
 8008fde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fe2:	bfac      	ite	ge
 8008fe4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fe6:	81a3      	strhlt	r3, [r4, #12]
 8008fe8:	bd10      	pop	{r4, pc}

08008fea <__swrite>:
 8008fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fee:	461f      	mov	r7, r3
 8008ff0:	898b      	ldrh	r3, [r1, #12]
 8008ff2:	05db      	lsls	r3, r3, #23
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4616      	mov	r6, r2
 8008ffa:	d505      	bpl.n	8009008 <__swrite+0x1e>
 8008ffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009000:	2302      	movs	r3, #2
 8009002:	2200      	movs	r2, #0
 8009004:	f000 f868 	bl	80090d8 <_lseek_r>
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800900e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009012:	81a3      	strh	r3, [r4, #12]
 8009014:	4632      	mov	r2, r6
 8009016:	463b      	mov	r3, r7
 8009018:	4628      	mov	r0, r5
 800901a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901e:	f000 b817 	b.w	8009050 <_write_r>

08009022 <__sseek>:
 8009022:	b510      	push	{r4, lr}
 8009024:	460c      	mov	r4, r1
 8009026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902a:	f000 f855 	bl	80090d8 <_lseek_r>
 800902e:	1c43      	adds	r3, r0, #1
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	bf15      	itete	ne
 8009034:	6560      	strne	r0, [r4, #84]	; 0x54
 8009036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800903a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800903e:	81a3      	strheq	r3, [r4, #12]
 8009040:	bf18      	it	ne
 8009042:	81a3      	strhne	r3, [r4, #12]
 8009044:	bd10      	pop	{r4, pc}

08009046 <__sclose>:
 8009046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800904a:	f000 b813 	b.w	8009074 <_close_r>
	...

08009050 <_write_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d07      	ldr	r5, [pc, #28]	; (8009070 <_write_r+0x20>)
 8009054:	4604      	mov	r4, r0
 8009056:	4608      	mov	r0, r1
 8009058:	4611      	mov	r1, r2
 800905a:	2200      	movs	r2, #0
 800905c:	602a      	str	r2, [r5, #0]
 800905e:	461a      	mov	r2, r3
 8009060:	f7f7 fdbd 	bl	8000bde <_write>
 8009064:	1c43      	adds	r3, r0, #1
 8009066:	d102      	bne.n	800906e <_write_r+0x1e>
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	b103      	cbz	r3, 800906e <_write_r+0x1e>
 800906c:	6023      	str	r3, [r4, #0]
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	20000e18 	.word	0x20000e18

08009074 <_close_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4d06      	ldr	r5, [pc, #24]	; (8009090 <_close_r+0x1c>)
 8009078:	2300      	movs	r3, #0
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f7f7 fdc9 	bl	8000c16 <_close>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_close_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_close_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20000e18 	.word	0x20000e18

08009094 <_fstat_r>:
 8009094:	b538      	push	{r3, r4, r5, lr}
 8009096:	4d07      	ldr	r5, [pc, #28]	; (80090b4 <_fstat_r+0x20>)
 8009098:	2300      	movs	r3, #0
 800909a:	4604      	mov	r4, r0
 800909c:	4608      	mov	r0, r1
 800909e:	4611      	mov	r1, r2
 80090a0:	602b      	str	r3, [r5, #0]
 80090a2:	f7f7 fdc4 	bl	8000c2e <_fstat>
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	d102      	bne.n	80090b0 <_fstat_r+0x1c>
 80090aa:	682b      	ldr	r3, [r5, #0]
 80090ac:	b103      	cbz	r3, 80090b0 <_fstat_r+0x1c>
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	bd38      	pop	{r3, r4, r5, pc}
 80090b2:	bf00      	nop
 80090b4:	20000e18 	.word	0x20000e18

080090b8 <_isatty_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d06      	ldr	r5, [pc, #24]	; (80090d4 <_isatty_r+0x1c>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	f7f7 fdc3 	bl	8000c4e <_isatty>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_isatty_r+0x1a>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_isatty_r+0x1a>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	20000e18 	.word	0x20000e18

080090d8 <_lseek_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4d07      	ldr	r5, [pc, #28]	; (80090f8 <_lseek_r+0x20>)
 80090dc:	4604      	mov	r4, r0
 80090de:	4608      	mov	r0, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	602a      	str	r2, [r5, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f7f7 fdbc 	bl	8000c64 <_lseek>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_lseek_r+0x1e>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_lseek_r+0x1e>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20000e18 	.word	0x20000e18

080090fc <__malloc_lock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__malloc_lock+0x8>)
 80090fe:	f7ff bad5 	b.w	80086ac <__retarget_lock_acquire_recursive>
 8009102:	bf00      	nop
 8009104:	20000e0c 	.word	0x20000e0c

08009108 <__malloc_unlock>:
 8009108:	4801      	ldr	r0, [pc, #4]	; (8009110 <__malloc_unlock+0x8>)
 800910a:	f7ff bad0 	b.w	80086ae <__retarget_lock_release_recursive>
 800910e:	bf00      	nop
 8009110:	20000e0c 	.word	0x20000e0c

08009114 <_read_r>:
 8009114:	b538      	push	{r3, r4, r5, lr}
 8009116:	4d07      	ldr	r5, [pc, #28]	; (8009134 <_read_r+0x20>)
 8009118:	4604      	mov	r4, r0
 800911a:	4608      	mov	r0, r1
 800911c:	4611      	mov	r1, r2
 800911e:	2200      	movs	r2, #0
 8009120:	602a      	str	r2, [r5, #0]
 8009122:	461a      	mov	r2, r3
 8009124:	f7f7 fd3e 	bl	8000ba4 <_read>
 8009128:	1c43      	adds	r3, r0, #1
 800912a:	d102      	bne.n	8009132 <_read_r+0x1e>
 800912c:	682b      	ldr	r3, [r5, #0]
 800912e:	b103      	cbz	r3, 8009132 <_read_r+0x1e>
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	bd38      	pop	{r3, r4, r5, pc}
 8009134:	20000e18 	.word	0x20000e18

08009138 <_init>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	bf00      	nop
 800913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913e:	bc08      	pop	{r3}
 8009140:	469e      	mov	lr, r3
 8009142:	4770      	bx	lr

08009144 <_fini>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr
